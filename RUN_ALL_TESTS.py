"""
üß™ RULETTT - –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
===================================================

–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
"""

import sys
import os
import time
import sqlite3
from pathlib import Path
from datetime import datetime

print("=" * 80)
print("üß™ RULETTT - –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –° –†–ï–ê–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò")
print("=" * 80)
print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
print()

# –°—á—ë—Ç—á–∏–∫–∏
tests_passed = 0
tests_failed = 0
tests_total = 0

def run_test(name, func):
    """–ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    global tests_passed, tests_failed, tests_total
    tests_total += 1
    print(f"{'='*80}")
    print(f"üîµ –¢–ï–°–¢ #{tests_total}: {name}")
    print(f"{'='*80}")
    try:
        result = func()
        if result:
            tests_passed += 1
            print(f"‚úÖ PASSED: {name}")
        else:
            tests_failed += 1
            print(f"‚ùå FAILED: {name}")
        print()
        return result
    except Exception as e:
        tests_failed += 1
        print(f"‚ùå EXCEPTION in {name}: {e}")
        print()
        return False

# ============ –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ ============
def test_project_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    print("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...")
    
    required_files = [
        'api_server.py',
        'src/logger.py',
        'src/error_tracker.py',
        'webapp/event-tracker.js',
        'webapp/logs_dashboard.html',
        'LOGGING_GUIDE.md',
        'QUICKSTART.md'
    ]
    
    required_dirs = [
        'src',
        'webapp',
        'data',
        'logs'
    ]
    
    all_ok = True
    
    for file in required_files:
        path = Path(file)
        if path.exists():
            print(f"   ‚úÖ {file}")
        else:
            print(f"   ‚ùå {file} - –ù–ï –ù–ê–ô–î–ï–ù")
            all_ok = False
    
    for dir_name in required_dirs:
        path = Path(dir_name)
        if path.exists():
            print(f"   ‚úÖ {dir_name}/")
        else:
            print(f"   ‚ùå {dir_name}/ - –ù–ï –ù–ê–ô–î–ï–ù–ê")
            all_ok = False
    
    return all_ok

# ============ –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö ============
def test_databases():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î"""
    print("üíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö...")
    
    data_dir = Path('data')
    db_files = list(data_dir.glob('*.db'))
    
    print(f"   üìä –ù–∞–π–¥–µ–Ω–æ –ë–î: {len(db_files)}")
    
    all_ok = True
    for db_file in db_files:
        try:
            conn = sqlite3.connect(db_file)
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
            tables = cursor.fetchall()
            
            # –°—á–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ
            total_records = 0
            for table in tables:
                table_name = table[0]
                cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
                count = cursor.fetchone()[0]
                total_records += count
            
            conn.close()
            
            print(f"   ‚úÖ {db_file.name}: {len(tables)} —Ç–∞–±–ª–∏—Ü, {total_records} –∑–∞–ø–∏—Å–µ–π")
            
        except Exception as e:
            print(f"   ‚ùå {db_file.name}: –û—à–∏–±–∫–∞ - {e}")
            all_ok = False
    
    return all_ok and len(db_files) > 0

# ============ –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞ ============
def test_api_server():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã API endpoints"""
    print("üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞...")
    
    import urllib.request
    import json
    
    endpoints = [
        ('http://localhost:5000/api/health', 'Health check'),
        ('http://localhost:5000/api/spins?limit=5', '–°–ø–∏–Ω—ã'),
        ('http://localhost:5000/api/statistics', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'),
    ]
    
    all_ok = True
    for url, name in endpoints:
        try:
            response = urllib.request.urlopen(url, timeout=3)
            status = response.status
            data = json.loads(response.read().decode('utf-8'))
            print(f"   ‚úÖ {name}: {status} - {len(str(data))} bytes")
        except Exception as e:
            print(f"   ‚ùå {name}: {e}")
            all_ok = False
    
    return all_ok

# ============ –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ ============
def test_web_server():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü"""
    print("üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...")
    
    import urllib.request
    
    pages = [
        ('http://localhost:8080/logs_dashboard.html', 'Logs Dashboard'),
        ('http://localhost:8080/dashboard.html', 'Main Dashboard'),
        ('http://localhost:8080/event-tracker.js', 'Event Tracker'),
    ]
    
    all_ok = True
    for url, name in pages:
        try:
            response = urllib.request.urlopen(url, timeout=3)
            status = response.status
            size = len(response.read())
            print(f"   ‚úÖ {name}: {status} - {size} bytes")
        except Exception as e:
            print(f"   ‚ùå {name}: {e}")
            all_ok = False
    
    return all_ok

# ============ –¢–ï–°–¢ 5: –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ============
def test_logging():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üìù –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    import logging
    
    # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–π –ª–æ–≥–≥–µ—Ä
    log_dir = Path('logs')
    log_dir.mkdir(exist_ok=True)
    
    test_log_file = log_dir / 'test_run.log'
    
    logger = logging.getLogger('test_run')
    logger.setLevel(logging.DEBUG)
    
    handler = logging.FileHandler(test_log_file, encoding='utf-8')
    handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
    logger.addHandler(handler)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ª–æ–≥–∏
    test_messages = [
        (logger.debug, "üêõ Debug: –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"),
        (logger.info, "‚ÑπÔ∏è  Info: –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç"),
        (logger.warning, "‚ö†Ô∏è  Warning: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"),
        (logger.error, "‚ùå Error: –¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞"),
        (logger.critical, "üî• Critical: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")
    ]
    
    for log_func, message in test_messages:
        log_func(message)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏
    if test_log_file.exists():
        size = test_log_file.stat().st_size
        with open(test_log_file, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        print(f"   ‚úÖ –§–∞–π–ª –ª–æ–≥–æ–≤ —Å–æ–∑–¥–∞–Ω: {size} bytes, {len(lines)} —Å—Ç—Ä–æ–∫")
        return True
    else:
        print(f"   ‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ —Å–æ–∑–¥–∞–Ω")
        return False

# ============ –¢–ï–°–¢ 6: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ============
def test_real_data_analysis():
    """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î"""
    print("üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    db_path = Path('data/final_single_table.db')
    
    if not db_path.exists():
        db_path = Path('data/rulettt_cloud.db')
    
    if not db_path.exists():
        print("   ‚ö†Ô∏è  –û—Å–Ω–æ–≤–Ω—ã–µ –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return False
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–ø–∏–Ω–æ–≤
        cursor.execute("""
            SELECT COUNT(*) FROM roulette_spins
        """)
        total_spins = cursor.fetchone()[0]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ü–≤–µ—Ç–∞–º
        cursor.execute("""
            SELECT color, COUNT(*) as count 
            FROM roulette_spins 
            GROUP BY color
            ORDER BY count DESC
        """)
        color_stats = cursor.fetchall()
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–ø–∏–Ω—ã
        cursor.execute("""
            SELECT number, color, timestamp 
            FROM roulette_spins 
            ORDER BY timestamp DESC 
            LIMIT 5
        """)
        recent_spins = cursor.fetchall()
        
        conn.close()
        
        print(f"   üìà –í—Å–µ–≥–æ —Å–ø–∏–Ω–æ–≤: {total_spins}")
        print(f"   üé® –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ü–≤–µ—Ç–∞–º:")
        for color, count in color_stats:
            percentage = (count / total_spins * 100) if total_spins > 0 else 0
            print(f"      {color}: {count} ({percentage:.1f}%)")
        
        print(f"   üé≤ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–ø–∏–Ω–æ–≤:")
        for number, color, timestamp in recent_spins:
            print(f"      {number} ({color}) - {timestamp}")
        
        return total_spins > 0
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return False

# ============ –¢–ï–°–¢ 7: –¢–µ—Å—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–π ============
def test_strategies():
    """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    print("üéØ –¢–µ—Å—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥—É–ª—è game_analyzer
        from pathlib import Path
        analyzer_path = Path('src/game_analyzer.py')
        
        if not analyzer_path.exists():
            print("   ‚ö†Ô∏è  game_analyzer.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        print("   ‚úÖ –ú–æ–¥—É–ª—å game_analyzer –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–î —Å–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
        db_path = Path('data/test_strategies.db')
        if db_path.exists():
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()
            
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
            tables = cursor.fetchall()
            
            print(f"   ‚úÖ –ë–î —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(tables)} —Ç–∞–±–ª–∏—Ü")
            
            conn.close()
            return True
        else:
            print("   ‚ÑπÔ∏è  –ë–î —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
            return True
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

# ============ –¢–ï–°–¢ 8: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ============
def test_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
    print("‚ö° –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    import time
    
    # –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥
    import logging
    logger = logging.getLogger('perf_test')
    logger.setLevel(logging.INFO)
    handler = logging.FileHandler('logs/perf_test.log', encoding='utf-8')
    logger.addHandler(handler)
    
    start_time = time.time()
    for i in range(1000):
        logger.info(f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ #{i}")
    end_time = time.time()
    
    duration = end_time - start_time
    ops_per_sec = 1000 / duration
    
    print(f"   üìä 1000 –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥: {duration:.3f} —Å–µ–∫ ({ops_per_sec:.0f} ops/sec)")
    
    # –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ —á—Ç–µ–Ω–∏—è –∏–∑ –ë–î
    db_path = Path('data/final_single_table.db')
    if db_path.exists():
        start_time = time.time()
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM roulette_spins LIMIT 1000")
        results = cursor.fetchall()
        conn.close()
        end_time = time.time()
        
        duration = end_time - start_time
        print(f"   üìä –ß—Ç–µ–Ω–∏–µ 1000 –∑–∞–ø–∏—Å–µ–π –∏–∑ –ë–î: {duration:.3f} —Å–µ–∫")
    
    return True

# ============ –¢–ï–°–¢ 9: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç ============
def test_integration():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
    print("üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç...")
    
    import urllib.request
    import json
    
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ API
        response = urllib.request.urlopen('http://localhost:5000/api/statistics', timeout=3)
        stats = json.loads(response.read().decode('utf-8'))
        print(f"   ‚úÖ API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞")
        
        # 2. –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–ø–∏–Ω—ã
        response = urllib.request.urlopen('http://localhost:5000/api/spins?limit=10', timeout=3)
        spins = json.loads(response.read().decode('utf-8'))
        print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(spins)} —Å–ø–∏–Ω–æ–≤")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º dashboard –¥–æ—Å—Ç—É–ø–µ–Ω
        response = urllib.request.urlopen('http://localhost:8080/logs_dashboard.html', timeout=3)
        dashboard_html = response.read()
        print(f"   ‚úÖ Dashboard –¥–æ—Å—Ç—É–ø–µ–Ω ({len(dashboard_html)} bytes)")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

# ============ –¢–ï–°–¢ 10: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ ============
def test_documentation():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ –ø–æ–ª–Ω–æ—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    print("üìö –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...")
    
    docs = [
        ('LOGGING_GUIDE.md', '–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—é'),
        ('QUICKSTART.md', '–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç'),
        ('LOGGING_SYSTEM_REPORT.md', '–û—Ç—á—ë—Ç –æ —Å–∏—Å—Ç–µ–º–µ'),
        ('LOGGING_INTEGRATION_EXAMPLE.py', '–ü—Ä–∏–º–µ—Ä—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏'),
        ('README.md', 'README')
    ]
    
    all_ok = True
    total_size = 0
    
    for filename, description in docs:
        path = Path(filename)
        if path.exists():
            size = path.stat().st_size
            total_size += size
            print(f"   ‚úÖ {description}: {size} bytes")
        else:
            print(f"   ‚ö†Ô∏è  {description} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            # –ù–µ —Å—á–∏—Ç–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–æ–π
    
    print(f"   üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: {total_size} bytes")
    return True

# ============ –ó–ê–ü–£–°–ö –í–°–ï–• –¢–ï–°–¢–û–í ============

print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...\n")

run_test("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞", test_project_structure)
run_test("–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", test_databases)
run_test("API —Å–µ—Ä–≤–µ—Ä", test_api_server)
run_test("–í–µ–±-—Å–µ—Ä–≤–µ—Ä", test_web_server)
run_test("–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è", test_logging)
run_test("–ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", test_real_data_analysis)
run_test("–°—Ç—Ä–∞—Ç–µ–≥–∏–∏", test_strategies)
run_test("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", test_performance)
run_test("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç", test_integration)
run_test("–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", test_documentation)

# ============ –ò–¢–û–ì–ò ============

print("=" * 80)
print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
print("=" * 80)
print()
print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ:  {tests_passed}/{tests_total}")
print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {tests_failed}/{tests_total}")
print(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(tests_passed/tests_total*100):.1f}%")
print()

if tests_failed == 0:
    print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ RULETTT —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
elif tests_failed <= 2:
    print("‚ö†Ô∏è  –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    print("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ–±–ª–µ–º—ã")
else:
    print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
    print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")

print()
print("=" * 80)
print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
print("=" * 80)
