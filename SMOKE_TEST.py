"""
üß™ RULETTT - –¢–µ—Å—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º—ã (smoke test)
===================================================

–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent / 'src'))

print("=" * 80)
print("üß™ RULETTT - SMOKE TEST (–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)")
print("=" * 80)
print()

passed = 0
failed = 0

# –¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç—ã
print("1Ô∏è‚É£ –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤...")
try:
    from utils import RouletteUtils
    print("   ‚úÖ utils.RouletteUtils")
    passed += 1
except Exception as e:
    print(f"   ‚ùå utils: {e}")
    failed += 1

try:
    from data_collector import DataCollector
    print("   ‚úÖ data_collector.DataCollector")
    passed += 1
except Exception as e:
    print(f"   ‚ùå data_collector: {e}")
    failed += 1

try:
    import game_analyzer
    print("   ‚úÖ game_analyzer")
    passed += 1
except Exception as e:
    print(f"   ‚ùå game_analyzer: {e}")
    failed += 1

print()

# –¢–µ—Å—Ç 2: –£—Ç–∏–ª–∏—Ç—ã —Ä—É–ª–µ—Ç–∫–∏
print("2Ô∏è‚É£ –¢–µ—Å—Ç —É—Ç–∏–ª–∏—Ç —Ä—É–ª–µ—Ç–∫–∏...")
try:
    from utils import RouletteUtils
    
    # –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞
    assert RouletteUtils.get_color(0) == "green", "0 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–µ–ª—ë–Ω—ã–º"
    assert RouletteUtils.get_color(1) == "red", "1 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Å–Ω—ã–º"
    assert RouletteUtils.get_color(2) == "black", "2 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á—ë—Ä–Ω—ã–º"
    print("   ‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    passed += 1
    
    # –¢–µ—Å—Ç –¥—é–∂–∏–Ω
    assert RouletteUtils.get_dozen(5) == 1, "5 –≤ –ø–µ—Ä–≤–æ–π –¥—é–∂–∏–Ω–µ"
    assert RouletteUtils.get_dozen(15) == 2, "15 –≤–æ –≤—Ç–æ—Ä–æ–π –¥—é–∂–∏–Ω–µ"
    assert RouletteUtils.get_dozen(30) == 3, "30 –≤ —Ç—Ä–µ—Ç—å–µ–π –¥—é–∂–∏–Ω–µ"
    print("   ‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥—é–∂–∏–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç")
    passed += 1
    
except Exception as e:
    print(f"   ‚ùå –û—à–∏–±–∫–∞ —É—Ç–∏–ª–∏—Ç: {e}")
    failed += 2

print()

# –¢–µ—Å—Ç 3: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
print("3Ô∏è‚É£ –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
try:
    import sqlite3
    from pathlib import Path
    
    db_path = Path('data/rulettt_cloud.db')
    if db_path.exists():
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = [t[0] for t in cursor.fetchall()]
        print(f"   ‚úÖ –ë–î –Ω–∞–π–¥–µ–Ω–∞: {len(tables)} —Ç–∞–±–ª–∏—Ü")
        passed += 1
        
        # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
        for table in tables:
            try:
                cursor.execute(f"SELECT COUNT(*) FROM {table}")
                count = cursor.fetchone()[0]
                print(f"   ‚úÖ {table}: {count} –∑–∞–ø–∏—Å–µ–π")
            except:
                pass
        
        conn.close()
        passed += 1
    else:
        print("   ‚ö†Ô∏è  –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        failed += 2
        
except Exception as e:
    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
    failed += 2

print()

# –¢–µ—Å—Ç 4: API
print("4Ô∏è‚É£ –¢–µ—Å—Ç API...")
try:
    import urllib.request
    import json
    
    response = urllib.request.urlopen('http://localhost:5000/api/health', timeout=2)
    data = json.loads(response.read().decode('utf-8'))
    
    if data.get('status') == 'healthy':
        print(f"   ‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç: {data.get('service')}")
        passed += 1
    else:
        print(f"   ‚ö†Ô∏è  API –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
        failed += 1
        
except Exception as e:
    print(f"   ‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    failed += 1

print()

# –¢–µ—Å—Ç 5: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
print("5Ô∏è‚É£ –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")
try:
    import logging
    log_dir = Path('logs')
    log_dir.mkdir(exist_ok=True)
    
    logger = logging.getLogger('smoke_test')
    logger.setLevel(logging.INFO)
    handler = logging.FileHandler('logs/smoke_test.log', encoding='utf-8')
    logger.addHandler(handler)
    
    logger.info("‚úÖ Smoke test logging works")
    
    if (log_dir / 'smoke_test.log').exists():
        print("   ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        passed += 1
    else:
        print("   ‚ùå –§–∞–π–ª –ª–æ–≥–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω")
        failed += 1
        
except Exception as e:
    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    failed += 1

print()

# –ò—Ç–æ–≥–∏
print("=" * 80)
print("üìä –ò–¢–û–ì–ò SMOKE TEST")
print("=" * 80)
total = passed + failed
success_rate = (passed / total * 100) if total > 0 else 0

print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}/{total}")
print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
print()

if failed == 0:
    print("üéâ –í–°–ï –ë–ê–ó–û–í–´–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!")
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
elif success_rate >= 70:
    print("‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–∞")
    print("üí° –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è")
else:
    print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–µ—Ä—å—ë–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
    print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")

print("=" * 80)
