"""
–¢–ï–°–¢–ò–†–û–í–©–ò–ö –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ö–ê–ó–ò–ù–û
===============================

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–∑–∏–Ω–æ.
"""

import sys
import json
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
current_dir = Path(__file__).parent
sys.path.append(str(current_dir / "src"))

try:
    from src.live_data_collector import LiveDataCollector
    from src.utils import RouletteUtils
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

class ConnectionTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    
    def __init__(self):
        self.collector = LiveDataCollector()
        self.utils = RouletteUtils()
    
    def run_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ö–ê–ó–ò–ù–û")
        print("=" * 40)
        
        self.test_config()
        self.test_connection()
        self.test_data_quality()
        self.show_recommendations()
    
    def test_config(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("\nüìã –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
        print("-" * 30)
        
        config = self.collector.config
        
        print(f"–ö–∞–∑–∏–Ω–æ: {config.get('casino_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
        print(f"–ú–µ—Ç–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {config.get('connection_method', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
        
        if 'betting' in config:
            betting = config['betting']
            print(f"–ë–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞: {betting.get('base_bet', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
            print(f"–ë–∞–Ω–∫—Ä–æ–ª–ª: {betting.get('bankroll', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
        
        method = config.get('connection_method', 'mock')
        
        if method == 'api':
            api_config = config.get('api', {})
            if api_config.get('base_url') and api_config.get('api_key'):
                print("‚úÖ API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
            else:
                print("‚ö†Ô∏è API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–ø–æ–ª–Ω–∞—è")
        
        elif method == 'scraping':
            scraping_config = config.get('scraping', {})
            if scraping_config.get('base_url') and scraping_config.get('selectors'):
                print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
            else:
                print("‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –Ω–µ–ø–æ–ª–Ω–∞—è")
        
        elif method == 'mock':
            print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
        
        else:
            print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥: {method}")
    
    def test_connection(self):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        print("\nüîó –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø")
        print("-" * 25)
        
        method = self.collector.config.get('connection_method', 'mock')
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            results = self.collector.get_live_results(method, limit=5)
            
            if results:
                print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ({len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                print("\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
                for i, result in enumerate(results[:3], 1):
                    number = result.get('number', '?')
                    color = result.get('color', '?')
                    timestamp = result.get('timestamp', datetime.now())
                    if isinstance(timestamp, datetime):
                        time_str = timestamp.strftime('%H:%M:%S')
                    else:
                        time_str = str(timestamp)
                    
                    print(f"  {i}. {time_str}: {number} ({color})")
            
            else:
                print("‚ö†Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –Ω–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç")
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
    
    def test_data_quality(self):
        """–¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüìä –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê –î–ê–ù–ù–´–•")
        print("-" * 30)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            results = self.collector.get_live_results(
                self.collector.config.get('connection_method', 'mock'), 
                limit=50
            )
            
            if not results:
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            numbers = [r.get('number') for r in results if r.get('number') is not None]
            colors = [r.get('color') for r in results if r.get('color')]
            
            if not numbers:
                print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–µ—Ç —á–∏—Å–µ–ª)")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —á–∏—Å–µ–ª
            valid_numbers = [n for n in numbers if 0 <= n <= 36]
            invalid_count = len(numbers) - len(valid_numbers)
            
            if invalid_count > 0:
                print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {invalid_count} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —á–∏—Å–µ–ª")
            else:
                print("‚úÖ –í—Å–µ —á–∏—Å–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã (0-36)")
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤
            if colors:
                color_counts = {}
                for color in colors:
                    color_counts[color] = color_counts.get(color, 0) + 1
                
                print("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤:")
                for color, count in color_counts.items():
                    percentage = count / len(colors) * 100
                    print(f"  {color}: {count} ({percentage:.1f}%)")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
            timestamps = [r.get('timestamp') for r in results if r.get('timestamp')]
            if timestamps:
                if all(isinstance(ts, datetime) for ts in timestamps):
                    print("‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
                else:
                    print("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏")
            
            print(f"‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def show_recommendations(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
        print("-" * 15)
        
        method = self.collector.config.get('connection_method', 'mock')
        
        if method == 'mock':
            print("üìö –í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
            print("  ‚Ä¢ –û—Ç–ª–∏—á–Ω–æ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã")
            print("  ‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
            print("  ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã")
        
        elif method == 'api':
            print("üöÄ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:")
            print("  ‚Ä¢ –°–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
            print("  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ API")
            print("  ‚Ä¢ –û–±–µ—Å–ø–µ—á—å—Ç–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
        
        elif method == 'scraping':
            print("üï∑Ô∏è –í–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥:")
            print("  ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–∫—Ä–∞–ø–∏–Ω–≥ —Ä–∞–∑—Ä–µ—à–µ–Ω")
            print("  ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏")
            print("  ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ HTML")
        
        print("\n‚ö†Ô∏è –í–ê–ñ–ù–´–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø:")
        print("  ‚Ä¢ –ù–∞—á–Ω–∏—Ç–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫")
        print("  ‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ª–∏–º–∏—Ç—ã –ø–æ—Ç–µ—Ä—å")
        print("  ‚Ä¢ –ü–æ–º–Ω–∏—Ç–µ –æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ –∫–∞–∑–∏–Ω–æ")
        print("  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        tester = ConnectionTester()
        tester.run_tests()
        
        print("\n" + "=" * 40)
        print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ python src/main.py –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()