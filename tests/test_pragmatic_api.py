"""
–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API PRAGMATIC PLAY LIVE
===================================

–ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoint: https://promo.pragmaticplaylive.net/api/v2/fetchinstantpoints
"""

import urllib.request
import urllib.parse
import json
from datetime import datetime

def test_pragmatic_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Pragmatic Play API"""
    
    api_url = "https://promo.pragmaticplaylive.net/api/v2/fetchinstantpoints"
    
    print("üé∞ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï PRAGMATIC PLAY API")
    print("=" * 40)
    print(f"URL: {api_url}")
    print()
    
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'Accept': 'application/json, text/plain, */*',
        'Accept-Language': 'en-US,en;q=0.9',
        'Accept-Encoding': 'gzip, deflate, br',
        'Connection': 'keep-alive',
        'Sec-Fetch-Dest': 'empty',
        'Sec-Fetch-Mode': 'cors',
        'Sec-Fetch-Site': 'cross-site'
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∑–∞–ø—Ä–æ—Å–∞
    methods_to_test = [
        ('GET', None),
        ('POST', {'action': 'fetch'}),
        ('POST', {'gameType': 'roulette'}),
        ('POST', {'limit': 10}),
    ]
    
    for method, data in methods_to_test:
        print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º {method} –∑–∞–ø—Ä–æ—Å...")
        
        try:
            if method == 'GET':
                req = urllib.request.Request(api_url, headers=headers)
            else:
                # POST –∑–∞–ø—Ä–æ—Å
                post_data = json.dumps(data).encode('utf-8') if data else b''
                req = urllib.request.Request(api_url, data=post_data, headers=headers)
                req.add_header('Content-Type', 'application/json')
            
            with urllib.request.urlopen(req, timeout=10) as response:
                status_code = response.getcode()
                content_type = response.headers.get('Content-Type', '')
                
                print(f"   ‚úÖ Status: {status_code}")
                print(f"   üìÑ Content-Type: {content_type}")
                
                # –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
                response_data = response.read().decode('utf-8')
                
                if response_data:
                    print(f"   üìä –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(response_data)} –±–∞–π—Ç")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
                    preview = response_data[:500]
                    print(f"   üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {preview}")
                    
                    if len(response_data) > 500:
                        print("   ... (–æ–±—Ä–µ–∑–∞–Ω–æ)")
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å JSON
                    if 'json' in content_type.lower():
                        try:
                            json_data = json.loads(response_data)
                            print(f"   üéØ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {type(json_data)}")
                            
                            if isinstance(json_data, dict):
                                print(f"   üîë –ö–ª—é—á–∏: {list(json_data.keys())}")
                            elif isinstance(json_data, list):
                                print(f"   üìù –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ: {len(json_data)}")
                                if json_data and isinstance(json_data[0], dict):
                                    print(f"   üîë –ö–ª—é—á–∏ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞: {list(json_data[0].keys())}")
                                    
                        except json.JSONDecodeError:
                            print("   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å JSON")
                
                else:
                    print("   ‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                    
        except urllib.error.HTTPError as e:
            error_msg = e.read().decode('utf-8', errors='ignore')
            print(f"   ‚ùå HTTP Error {e.code}: {e.reason}")
            if error_msg:
                print(f"   üìÑ –°–æ–æ–±—â–µ–Ω–∏–µ: {error_msg[:200]}")
                
        except urllib.error.URLError as e:
            print(f"   ‚ùå URL Error: {e.reason}")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        print()

def test_alternative_endpoints():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ endpoints Pragmatic Play"""
    
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–• ENDPOINTS")
    print("=" * 42)
    
    base_url = "https://promo.pragmaticplaylive.net"
    
    alternative_endpoints = [
        "/api/v2/game/roulette",
        "/api/v2/history",
        "/api/v2/live/results", 
        "/api/v2/tables",
        "/api/v1/fetchinstantpoints",
        "/api/game/history",
        "/live/roulette/data",
        "/roulette/results"
    ]
    
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'Accept': 'application/json'
    }
    
    for endpoint in alternative_endpoints:
        url = base_url + endpoint
        print(f"üîó –ü—Ä–æ–≤–µ—Ä—è–µ–º: {endpoint}")
        
        try:
            req = urllib.request.Request(url, headers=headers)
            
            with urllib.request.urlopen(req, timeout=5) as response:
                status_code = response.getcode()
                content_type = response.headers.get('Content-Type', '')
                
                if status_code == 200:
                    data = response.read(300).decode('utf-8', errors='ignore')
                    print(f"   ‚úÖ {status_code}: {data[:100]}...")
                else:
                    print(f"   ‚ö†Ô∏è {status_code}")
                    
        except urllib.error.HTTPError as e:
            if e.code == 404:
                print(f"   ‚ùå 404 - –ù–µ –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"   ‚ùå HTTP {e.code}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {str(e)[:50]}")
    
    print()

def create_pragmatic_config():
    """–°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è Pragmatic Play"""
    
    print("‚öôÔ∏è –°–û–ó–î–ê–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò PRAGMATIC PLAY")
    print("=" * 38)
    
    config = {
        "casino_name": "Pragmatic Play Live",
        "provider": "Pragmatic Play",
        "connection_method": "api",
        "api": {
            "base_url": "https://promo.pragmaticplaylive.net",
            "endpoints": {
                "instant_points": "/api/v2/fetchinstantpoints",
                "live_results": "/api/v2/live/results",
                "history": "/api/v2/history",
                "tables": "/api/v2/tables"
            },
            "headers": {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
                "Accept": "application/json, text/plain, */*",
                "Accept-Language": "en-US,en;q=0.9",
                "Content-Type": "application/json"
            },
            "timeout": 10,
            "retry_attempts": 3
        },
        "betting": {
            "base_bet": 100,
            "max_bet": 10000,
            "bankroll": 100000
        },
        "safety": {
            "enabled": True,
            "max_daily_loss": 50000,
            "stop_loss_percent": 20
        }
    }
    
    try:
        with open('pragmatic_play_config.json', 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2, ensure_ascii=False)
        
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ pragmatic_play_config.json")
        print("üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
        print(f"   üé∞ –ö–∞–∑–∏–Ω–æ: {config['casino_name']}")
        print(f"   üè¢ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {config['provider']}")
        print(f"   üîó API endpoints: {len(config['api']['endpoints'])}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üéØ –ê–ù–ê–õ–ò–ó API PRAGMATIC PLAY LIVE")
    print("=" * 35)
    print("–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π API endpoint...")
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π API
    test_pragmatic_api()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
    test_alternative_endpoints()
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if create_pragmatic_config():
        print()
        print("üöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("1. python test_connection.py - –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É")
        print("2. python src/main.py - –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É")
        print("3. –í—ã–±—Ä–∞—Ç—å '–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' –≤ –º–µ–Ω—é")
        print()
        print("üéâ Pragmatic Play API –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")

if __name__ == "__main__":
    main()