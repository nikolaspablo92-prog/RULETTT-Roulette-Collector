"""
–ü–û–ò–°–ö–û–í–ò–ö –ò –¢–ï–°–¢–ï–† API –ö–ê–ó–ò–ù–û
============================

–ü–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–∞–∑–∏–Ω–æ.
"""

import requests
import json
import time
import urllib.parse
from datetime import datetime
from typing import Dict, List, Optional

class CasinoAPIFinder:
    """–ü–æ–∏—Å–∫–æ–≤–∏–∫ API –∫–∞–∑–∏–Ω–æ"""
    
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })
        
        # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–∞–∑–∏–Ω–æ —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ API
        self.known_casinos = {
            'stake': {
                'name': 'Stake.com',
                'base_url': 'https://stake.com',
                'potential_endpoints': [
                    '/api/v1/casino/games/history',
                    '/api/v1/live/roulette',
                    '/_api/graphql'
                ],
                'description': '–ö—Ä—É–ø–Ω–æ–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–µ –∫–∞–∑–∏–Ω–æ'
            },
            'bc_game': {
                'name': 'BC.Game',
                'base_url': 'https://bc.game',
                'potential_endpoints': [
                    '/api/casino/roulette/history',
                    '/api/v1/live-games'
                ],
                'description': '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–µ –∫–∞–∑–∏–Ω–æ —Å API'
            },
            'roobet': {
                'name': 'Roobet',
                'base_url': 'https://roobet.com',
                'potential_endpoints': [
                    '/api/casino/roulette',
                    '/api/games/live'
                ],
                'description': '–ü–æ–ø—É–ª—è—Ä–Ω–æ–µ –æ–Ω–ª–∞–π–Ω –∫–∞–∑–∏–Ω–æ'
            }
        }
    
    def run_search(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ API"""
        print("üîç –ü–û–ò–°–ö API –ö–ê–ó–ò–ù–û")
        print("=" * 25)
        
        print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–∞–∑–∏–Ω–æ")
        print("2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π URL")
        print("3. –ü–æ–∏—Å–∫ endpoints –Ω–∞ —Å–∞–π—Ç–µ")
        print("4. –ê–Ω–∞–ª–∏–∑ —Å–µ—Ç–µ–≤–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞")
        print("0. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í—ã–±–æ—Ä (0-4): ").strip()
        
        if choice == "1":
            self.test_known_casinos()
        elif choice == "2":
            self.test_custom_url()
        elif choice == "3":
            self.search_endpoints()
        elif choice == "4":
            self.show_network_analysis_guide()
        elif choice == "0":
            return
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    
    def test_known_casinos(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–∞–∑–∏–Ω–æ"""
        print("\nüé∞ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ó–í–ï–°–¢–ù–´–• –ö–ê–ó–ò–ù–û")
        print("-" * 35)
        
        for casino_id, casino_info in self.known_casinos.items():
            print(f"\nüìç {casino_info['name']}")
            print(f"   {casino_info['description']}")
            
            for endpoint in casino_info['potential_endpoints']:
                url = casino_info['base_url'] + endpoint
                result = self.test_endpoint(url)
                
                status_icon = "‚úÖ" if result.get('accessible') else "‚ùå"
                print(f"   {status_icon} {endpoint} - {result.get('status', '–û—à–∏–±–∫–∞')}")
                
                if result.get('data'):
                    print(f"      üìä –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {len(str(result['data']))} —Å–∏–º–≤–æ–ª–æ–≤")
                
                time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    def test_custom_url(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ URL"""
        print("\nüîó –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ì–û URL")
        print("-" * 40)
        
        base_url = input("–í–≤–µ–¥–∏—Ç–µ –±–∞–∑–æ–≤—ã–π URL –∫–∞–∑–∏–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://casino.com): ").strip()
        
        if not base_url:
            print("‚ùå URL –Ω–µ –≤–≤–µ–¥–µ–Ω")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
        if not base_url.startswith(('http://', 'https://')):
            base_url = 'https://' + base_url
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ endpoints –¥–ª—è –ø–æ–∏—Å–∫–∞
        common_endpoints = [
            '/api',
            '/api/v1',
            '/api/v2', 
            '/api/casino',
            '/api/live',
            '/api/roulette',
            '/api/games',
            '/api/casino/roulette',
            '/api/live/roulette',
            '/api/v1/casino/games',
            '/api/v1/live/games',
            '/_api',
            '/rest/api',
            '/graphql'
        ]
        
        print(f"\nüîç –ü–æ–∏—Å–∫ API endpoints –Ω–∞ {base_url}")
        
        found_endpoints = []
        
        for endpoint in common_endpoints:
            url = base_url + endpoint
            result = self.test_endpoint(url)
            
            if result.get('accessible'):
                found_endpoints.append((endpoint, result))
                print(f"‚úÖ {endpoint} - {result.get('status')}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω—ã—Ö
                if result.get('data'):
                    data_preview = str(result['data'])[:100]
                    print(f"   üìä –î–∞–Ω–Ω—ã–µ: {data_preview}...")
            else:
                print(f"‚ùå {endpoint} - {result.get('status', '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω')}")
            
            time.sleep(0.5)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞
        
        if found_endpoints:
            print(f"\nüéØ –ù–ê–ô–î–ï–ù–û {len(found_endpoints)} –î–û–°–¢–£–ü–ù–´–• ENDPOINTS:")
            for endpoint, result in found_endpoints:
                print(f"   ‚Ä¢ {base_url}{endpoint}")
        else:
            print("\nüòû API endpoints –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
            print("   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é —Å–∞–π—Ç–∞")
            print("   2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–µ—Ç–µ–≤–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞")
            print("   3. –°–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")
    
    def search_endpoints(self):
        """–ü–æ–∏—Å–∫ endpoints –Ω–∞ —Å–∞–π—Ç–µ"""
        print("\nüï∑Ô∏è –ü–û–ò–°–ö ENDPOINTS –ù–ê –°–ê–ô–¢–ï")
        print("-" * 30)
        
        url = input("–í–≤–µ–¥–∏—Ç–µ URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: ").strip()
        
        if not url:
            print("‚ùå URL –Ω–µ –≤–≤–µ–¥–µ–Ω")
            return
        
        try:
            response = self.session.get(url, timeout=10)
            content = response.text
            
            # –ü–æ–∏—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö API endpoints –≤ –∫–æ–¥–µ
            import re
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ API endpoints
            patterns = [
                r'["\']https?://[^"\']*api[^"\']*["\']',
                r'["\'][^"\']*api[^"\']*["\']',
                r'["\']https?://[^"\']*roulette[^"\']*["\']',
                r'endpoint["\']?\s*:\s*["\'][^"\']*["\']',
                r'url["\']?\s*:\s*["\'][^"\']*api[^"\']*["\']'
            ]
            
            found_urls = set()
            
            for pattern in patterns:
                matches = re.findall(pattern, content, re.IGNORECASE)
                for match in matches:
                    # –û—á–∏—â–∞–µ–º –æ—Ç –∫–∞–≤—ã—á–µ–∫
                    clean_url = match.strip('"\'')
                    if 'api' in clean_url.lower() or 'roulette' in clean_url.lower():
                        found_urls.add(clean_url)
            
            if found_urls:
                print(f"\nüéØ –ù–ê–ô–î–ï–ù–û {len(found_urls)} –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–• ENDPOINTS:")
                for found_url in sorted(found_urls):
                    print(f"   ‚Ä¢ {found_url}")
                    
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ URL
                if input("\n–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ endpoints? (y/n): ").lower() == 'y':
                    for found_url in list(found_urls)[:5]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5
                        result = self.test_endpoint(found_url)
                        status = "‚úÖ" if result.get('accessible') else "‚ùå"
                        print(f"{status} {found_url} - {result.get('status', '–û—à–∏–±–∫–∞')}")
                        time.sleep(1)
            else:
                print("üòû API endpoints –≤ –∫–æ–¥–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
    
    def test_endpoint(self, url: str) -> Dict:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ endpoint"""
        try:
            response = self.session.get(url, timeout=10)
            
            result = {
                'url': url,
                'status': response.status_code,
                'accessible': response.status_code < 400
            }
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å JSON
            try:
                data = response.json()
                result['data'] = data
                result['content_type'] = 'json'
            except:
                result['data'] = response.text[:200] if response.text else None
                result['content_type'] = response.headers.get('content-type', 'unknown')
            
            return result
            
        except requests.exceptions.Timeout:
            return {'url': url, 'status': 'Timeout', 'accessible': False}
        except requests.exceptions.ConnectionError:
            return {'url': url, 'status': 'Connection Error', 'accessible': False}
        except Exception as e:
            return {'url': url, 'status': f'Error: {str(e)}', 'accessible': False}
    
    def show_network_analysis_guide(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∞–Ω–∞–ª–∏–∑—É —Å–µ—Ç–µ–≤–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞"""
        print("\nüåê –ê–ù–ê–õ–ò–ó –°–ï–¢–ï–í–û–ì–û –¢–†–ê–§–ò–ö–ê")
        print("-" * 30)
        print("""
1. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä (Chrome/Firefox)
2. –ù–∞–∂–º–∏—Ç–µ F12 (Developer Tools)
3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É "Network" (–°–µ—Ç—å)
4. –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É live —Ä—É–ª–µ—Ç–∫–∏
5. –ò–≥—Ä–∞–π—Ç–µ –∏–ª–∏ –Ω–∞–±–ª—é–¥–∞–π—Ç–µ –∑–∞ –∏–≥—Ä–æ–π
6. –ò—â–∏—Ç–µ –∑–∞–ø—Ä–æ—Å—ã —Ç–∏–ø–∞:
   ‚Ä¢ XHR/Fetch
   ‚Ä¢ WebSocket connections
   ‚Ä¢ –° –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Å–æ–¥–µ—Ä–∂–∞—â–∏–º–∏: api, roulette, live, games

7. –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
8. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ:
   ‚Ä¢ Request URL
   ‚Ä¢ Headers
   ‚Ä¢ Response

–í–ê–ñ–ù–û:
‚ö†Ô∏è –ù–µ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ endpoints
‚ö†Ô∏è –°–æ–±–ª—é–¥–∞–π—Ç–µ Terms of Service —Å–∞–π—Ç–∞
‚ö†Ô∏è –î–æ–±–∞–≤–ª—è–π—Ç–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        """)
    
    def save_findings(self, findings: List[Dict]):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ API"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"found_apis_{timestamp}.json"
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(findings, f, indent=2, ensure_ascii=False)
            print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üé∞ –ü–û–ò–°–ö–û–í–ò–ö API –ö–ê–ó–ò–ù–û")
    print("=" * 30)
    print("–ü–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–∞–∑–∏–Ω–æ")
    print("–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä—É–ª–µ—Ç–∫–∏.\n")
    
    finder = CasinoAPIFinder()
    
    while True:
        try:
            finder.run_search()
            
            if input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫? (y/n): ").lower() != 'y':
                break
                
        except KeyboardInterrupt:
            print("\n\nüëã –ü–æ–∏—Å–∫ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("\nüéØ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print("üí° –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ API –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ToS")


if __name__ == "__main__":
    main()