"""
üß™ RULETTT - –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
==============================================

–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Ç–µ—Å—Ç –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Ñ–∞–π–ª–æ–≤
import logging
from pathlib import Path

print("=" * 60)
print("üß™ RULETTT - –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
print("=" * 60)
print()

# –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤
print("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤...")
log_dir = Path('logs')
log_dir.mkdir(exist_ok=True)
print(f"   ‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: {log_dir.absolute()}")
print()

# –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –ë–î –æ—à–∏–±–æ–∫
print("2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î –æ—à–∏–±–æ–∫...")
data_dir = Path('data')
data_dir.mkdir(exist_ok=True)
db_path = data_dir / 'errors.db'
if db_path.exists():
    print(f"   ‚úÖ –ë–î —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {db_path}")
else:
    print(f"   ‚ö†Ô∏è  –ë–î –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ")
print()

# –¢–µ—Å—Ç 3: –ë–∞–∑–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
print("3Ô∏è‚É£ –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")
logger = logging.getLogger('test')
logger.setLevel(logging.DEBUG)

# –§–∞–π–ª–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
file_handler = logging.FileHandler('logs/test.log', encoding='utf-8')
file_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
logger.addHandler(file_handler)

# –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
console_handler = logging.StreamHandler()
console_handler.setFormatter(logging.Formatter('   %(levelname)s: %(message)s'))
logger.addHandler(console_handler)

logger.debug("üêõ Debug —Å–æ–æ–±—â–µ–Ω–∏–µ")
logger.info("‚ÑπÔ∏è  Info —Å–æ–æ–±—â–µ–Ω–∏–µ")
logger.warning("‚ö†Ô∏è  Warning —Å–æ–æ–±—â–µ–Ω–∏–µ")
logger.error("‚ùå Error —Å–æ–æ–±—â–µ–Ω–∏–µ")
logger.critical("üî• Critical —Å–æ–æ–±—â–µ–Ω–∏–µ")
print()

# –¢–µ—Å—Ç 4: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –Ω–∞ API
print("4Ô∏è‚É£ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è –Ω–∞ API...")
try:
    import urllib.request
    import json
    
    event_data = {
        'type': 'test_event',
        'level': 'info',
        'details': {
            'test': True,
            'message': '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ—Ç test_logging.py'
        }
    }
    
    req = urllib.request.Request(
        'http://localhost:5000/api/events',
        data=json.dumps([event_data]).encode('utf-8'),
        headers={'Content-Type': 'application/json'}
    )
    
    response = urllib.request.urlopen(req, timeout=5)
    result = json.loads(response.read().decode('utf-8'))
    print(f"   ‚úÖ –°–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {result}")
except Exception as e:
    print(f"   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ: {e}")
    print(f"   üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5000")
print()

# –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints
print("5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints...")
endpoints = [
    ('http://localhost:5000/api/health', 'Health check'),
    ('http://localhost:5000/api/logs/stats', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–æ–≤'),
    ('http://localhost:8080/logs_dashboard.html', 'Dashboard')
]

for url, name in endpoints:
    try:
        response = urllib.request.urlopen(url, timeout=3)
        status = response.status
        print(f"   ‚úÖ {name}: {status}")
    except Exception as e:
        print(f"   ‚ùå {name}: {e}")
print()

# –¢–µ—Å—Ç 6: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ª–æ–≥–æ–≤
print("6Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ª–æ–≥–æ–≤...")
for i in range(10):
    if i % 3 == 0:
        logger.info(f"‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è {i+1} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    elif i % 3 == 1:
        logger.warning(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ {i+1}")
    else:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–ø–µ—Ä–∞—Ü–∏–∏ {i+1}")
print(f"   ‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ 10 —Ç–µ—Å—Ç–æ–≤—ã—Ö –ª–æ–≥–æ–≤")
print()

# –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤
print("7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤...")
log_files = list(log_dir.glob('*.log'))
if log_files:
    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(log_files)} —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤:")
    for log_file in log_files[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
        size = log_file.stat().st_size
        print(f"      - {log_file.name} ({size} bytes)")
else:
    print(f"   ‚ö†Ô∏è  –§–∞–π–ª—ã –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
print()

# –ò—Ç–æ–≥–∏
print("=" * 60)
print("‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–Å–ù")
print("=" * 60)
print()
print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
print(f"   ‚Ä¢ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤: {log_dir.absolute()}")
print(f"   ‚Ä¢ –§–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤: {len(log_files)}")
print(f"   ‚Ä¢ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ë–î: {data_dir.absolute()}")
print()
print("üåê –û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ:")
print(f"   ‚Ä¢ Dashboard: http://localhost:8080/logs_dashboard.html")
print(f"   ‚Ä¢ API Health: http://localhost:5000/api/health")
print(f"   ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: http://localhost:5000/api/logs/stats")
print()
print("üí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
print("   1. –û—Ç–∫—Ä–æ–π—Ç–µ Dashboard –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
print("   2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–õ–æ–≥–∏'")
print("   3. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –ª–æ–≥–∏")
print()
