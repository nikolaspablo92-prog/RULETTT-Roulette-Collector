"""
–ê–ù–ê–õ–ò–ó–ê–¢–û–† –ù–û–í–´–• API ENDPOINTS
=============================

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ API endpoints –¥–ª—è —Ä—É–ª–µ—Ç–∫–∏
"""

import json
import urllib.request
import urllib.parse
from pathlib import Path
import re

class NewAPIAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–æ–≤—ã—Ö API endpoints"""
    
    def __init__(self):
        self.found_endpoints = []
        
    def analyze_spin_and_go_url(self, url):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º URL Spin and Go Roulette"""
        print("üéØ –ê–ù–ê–õ–ò–ó SPIN AND GO ROULETTE URL")
        print("=" * 35)
        
        print(f"üîó URL: {url}")
        
        # –ü–∞—Ä—Å–∏–º URL
        parsed = urllib.parse.urlparse(url)
        query_params = urllib.parse.parse_qs(parsed.query)
        
        print(f"\nüìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û URL:")
        print(f"   –î–æ–º–µ–Ω: {parsed.netloc}")
        print(f"   –ü—É—Ç—å: {parsed.path}")
        print(f"   –ò–≥—Ä–∞: {query_params.get('game', ['–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'])[0]}")
        print(f"   –ê–ª–∏–∞—Å: {query_params.get('launch_alias', ['–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'])[0]}")
        print(f"   –Ø–∑—ã–∫: {query_params.get('language', ['–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'])[0]}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        base_info = {
            'domain': parsed.netloc,
            'game_type': query_params.get('game', [''])[0],
            'launch_alias': query_params.get('launch_alias', [''])[0],
            'language': query_params.get('language', ['EN'])[0],
            'base_url': f"{parsed.scheme}://{parsed.netloc}"
        }
        
        return base_info
    
    def find_potential_api_endpoints(self, base_info):
        """–ò—â–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ API endpoints"""
        print("\nüîç –ü–û–ò–°–ö –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–• API ENDPOINTS")
        print("=" * 38)
        
        base_url = base_info['base_url']
        game_type = base_info['game_type']
        
        # –¢–∏–ø–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã API –¥–ª—è live-–∫–∞–∑–∏–Ω–æ
        potential_endpoints = [
            f"{base_url}/api/game/{game_type}/history",
            f"{base_url}/api/game/{game_type}/results",
            f"{base_url}/api/game/{game_type}/current",
            f"{base_url}/api/live/{game_type}/status",
            f"{base_url}/api/live/results",
            f"{base_url}/api/roulette/history",
            f"{base_url}/api/roulette/results",
            f"{base_url}/live/api/game_data",
            f"{base_url}/live/api/history",
            f"{base_url}/gameapi/history",
            f"{base_url}/gameapi/results",
            f"{base_url}/ws/game/{game_type}",  # WebSocket endpoint
        ]
        
        print("üéØ –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ï ENDPOINTS:")
        for i, endpoint in enumerate(potential_endpoints, 1):
            print(f"   {i:2d}. {endpoint}")
        
        return potential_endpoints
    
    def test_endpoints(self, endpoints):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ endpoints"""
        print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENDPOINTS")
        print("=" * 25)
        
        working_endpoints = []
        
        for endpoint in endpoints:
            print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É—é: {endpoint}")
            
            try:
                req = urllib.request.Request(endpoint)
                req.add_header('User-Agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36')
                req.add_header('Accept', 'application/json, text/plain, */*')
                req.add_header('Accept-Language', 'en-US,en;q=0.9')
                
                with urllib.request.urlopen(req, timeout=5) as response:
                    status_code = response.getcode()
                    content_type = response.headers.get('Content-Type', '')
                    
                    if status_code == 200:
                        data = response.read(500).decode('utf-8', errors='ignore')
                        print(f"   ‚úÖ HTTP {status_code} - {content_type}")
                        print(f"   üìÑ –î–∞–Ω–Ω—ã–µ: {data[:100]}...")
                        
                        working_endpoints.append({
                            'url': endpoint,
                            'status': status_code,
                            'content_type': content_type,
                            'data_preview': data[:200]
                        })
                    else:
                        print(f"   ‚ö†Ô∏è HTTP {status_code}")
                        
            except urllib.error.HTTPError as e:
                if e.code == 404:
                    print(f"   ‚ùå 404 - –ù–µ –Ω–∞–π–¥–µ–Ω")
                elif e.code == 403:
                    print(f"   üîê 403 - –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                elif e.code == 401:
                    print(f"   üîë 401 - –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
                else:
                    print(f"   ‚ùå HTTP {e.code}")
                    
            except urllib.error.URLError as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e.reason}")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        return working_endpoints
    
    def analyze_main_page(self, url):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–≥—Ä—ã"""
        print("\nüìÑ –ê–ù–ê–õ–ò–ó –ì–õ–ê–í–ù–û–ô –°–¢–†–ê–ù–ò–¶–´")
        print("=" * 26)
        
        try:
            req = urllib.request.Request(url)
            req.add_header('User-Agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36')
            
            with urllib.request.urlopen(req, timeout=10) as response:
                if response.getcode() == 200:
                    content = response.read().decode('utf-8', errors='ignore')
                    
                    print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ ({len(content)} —Å–∏–º–≤–æ–ª–æ–≤)")
                    
                    # –ò—â–µ–º API endpoints –≤ –∫–æ–¥–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    api_patterns = [
                        r'["\']([^"\']*api[^"\']*)["\']',
                        r'["\']([^"\']*\/ws\/[^"\']*)["\']',
                        r'["\']([^"\']*websocket[^"\']*)["\']',
                        r'["\']([^"\']*results?[^"\']*)["\']',
                        r'["\']([^"\']*history[^"\']*)["\']',
                    ]
                    
                    found_apis = set()
                    for pattern in api_patterns:
                        matches = re.findall(pattern, content, re.IGNORECASE)
                        for match in matches:
                            if ('api' in match.lower() or 'ws' in match.lower() or 
                                'result' in match.lower() or 'history' in match.lower()):
                                found_apis.add(match)
                    
                    if found_apis:
                        print(f"\nüéØ –ù–ê–ô–î–ï–ù–ù–´–ï API –í –ö–û–î–ï –°–¢–†–ê–ù–ò–¶–´:")
                        for api in sorted(found_apis)[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                            print(f"   ‚Ä¢ {api}")
                        
                        return list(found_apis)
                    else:
                        print("‚ùå API endpoints –≤ –∫–æ–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                        return []
                        
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: HTTP {response.getcode()}")
                    return []
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            return []
    
    def create_config_for_new_casino(self, base_info, working_endpoints):
        """–°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–∞–∑–∏–Ω–æ"""
        print("\n‚öôÔ∏è –°–û–ó–î–ê–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
        print("=" * 24)
        
        if not working_endpoints:
            print("‚ùå –ù–µ—Ç —Ä–∞–±–æ—á–∏—Ö endpoints –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return None
        
        config = {
            "casino_name": f"Spin and Go Roulette ({base_info['domain']})",
            "connection_method": "api",
            "api": {
                "base_url": base_info['base_url'],
                "endpoints": {},
                "headers": {
                    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
                    "Accept": "application/json, text/plain, */*",
                    "Accept-Language": "en-US,en;q=0.9"
                }
            },
            "game_info": {
                "game_type": base_info['game_type'],
                "launch_alias": base_info['launch_alias'],
                "language": base_info['language']
            },
            "betting": {
                "base_bet": 100,
                "max_bet": 10000,
                "bankroll": 100000
            },
            "safety": {
                "enabled": True,
                "max_daily_loss": 50000
            }
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–±–æ—á–∏–µ endpoints
        for i, endpoint in enumerate(working_endpoints):
            endpoint_name = f"endpoint_{i+1}"
            config['api']['endpoints'][endpoint_name] = {
                'url': endpoint['url'],
                'method': 'GET',
                'content_type': endpoint['content_type'],
                'description': f'Working endpoint {i+1}'
            }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        try:
            config_path = Path(__file__).parent / "spinandgo_config.json"
            with open(config_path, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
            
            print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {config_path}")
            return config
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return None
    
    def run(self, url):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞"""
        print("üéØ –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ù–û–í–´–• API ENDPOINTS")
        print("=" * 33)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º URL
        base_info = self.analyze_spin_and_go_url(url)
        
        # –ò—â–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ endpoints
        potential_endpoints = self.find_potential_api_endpoints(base_info)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º endpoints
        working_endpoints = self.test_endpoints(potential_endpoints)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        page_apis = self.analyze_main_page(url)
        
        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ API –≤ –∫–æ–¥–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —Ç–µ—Å—Ç–∏—Ä—É–µ–º –∏—Ö —Ç–æ–∂–µ
        if page_apis:
            print(f"\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –ò–ó –ö–û–î–ê –°–¢–†–ê–ù–ò–¶–´")
            print("=" * 35)
            
            # –î–æ–ø–æ–ª–Ω—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ URL
            full_page_apis = []
            for api in page_apis[:5]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5
                if api.startswith('/'):
                    full_page_apis.append(base_info['base_url'] + api)
                elif api.startswith('http'):
                    full_page_apis.append(api)
            
            if full_page_apis:
                page_working = self.test_endpoints(full_page_apis)
                working_endpoints.extend(page_working)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if working_endpoints:
            config = self.create_config_for_new_casino(base_info, working_endpoints)
            
            if config:
                print(f"\nüéâ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(working_endpoints)} —Ä–∞–±–æ—á–∏—Ö endpoints")
                print(f"üìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: spinandgo_config.json")
                
                print(f"\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
                print(f"1. cp spinandgo_config.json casino_setup.json")
                print(f"2. python test_connection.py")
                print(f"3. python src/main.py")
            else:
                print(f"\nüòû –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        else:
            print(f"\nüòû –†–∞–±–æ—á–∏–µ endpoints –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            print(f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
            print(f"   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Network tab –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
            print(f"   ‚Ä¢ –ü–æ–∏—Å–∫–∞—Ç—å WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
            print(f"   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Å—Ç–æ–ª/–ø—Ä–æ–≤–∞–π–¥–µ—Ä")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # URL –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    spin_and_go_url = "https://casinopp-com-ngm.bfcdl.com/livedistributed/25.9.3.0/?game=sgrol&launch_alias=sgrol_spinandgorol&language=EN&redirect_time=1760063327593&backUrl=https%3A%2F%2Fcasinopp-com-ngm.bfcdl.com%2Flive%2F%3Fgame%3Dsgrol%26launch_alias%3Dsgrol_spinandgorol%26language%3DEN&_entry=live"
    
    try:
        analyzer = NewAPIAnalyzer()
        analyzer.run(spin_and_go_url)
        
    except KeyboardInterrupt:
        print("\n\nüëã –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()