"""
–û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï - –¢–û–õ–¨–ö–û –û–î–ò–ù –°–¢–û–õ
=======================================

–≠—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –æ–¥–Ω–∏–º —Å—Ç–æ–ª–æ–º roulettestura541
–∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –¥—Ä—É–≥–∏—Ö —Å—Ç–æ–ª–æ–≤.
"""

import json
import time
import urllib.request
import urllib.parse
from datetime import datetime
from typing import Dict, List
from pathlib import Path
import sqlite3


class FinalSingleTableSystem:
    """–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –¢–û–õ–¨–ö–û —Å –æ–¥–Ω–∏–º —Å—Ç–æ–ª–æ–º"""
    
    def __init__(self):
        self.TARGET_TABLE = "roulettestura541"  # –¢–û–õ–¨–ö–û –≠–¢–û–¢ –°–¢–û–õ
        self.config = self._load_config()
        self.db_path = Path(__file__).parent / "data" / "final_single_table.db"
        self.db_path.parent.mkdir(exist_ok=True)
        self._init_database()
        
        print("üéØ" + "="*50)
        print(f"   –°–ò–°–¢–ï–ú–ê –ù–ê–°–¢–†–û–ï–ù–ê –¢–û–õ–¨–ö–û –ù–ê –°–¢–û–õ: {self.TARGET_TABLE}")
        print("   –ù–ò–ö–ê–ö–ò–• –î–†–£–ì–ò–• –°–¢–û–õ–û–í –ù–ï –ë–£–î–ï–¢!")
        print("üéØ" + "="*50)
    
    def _load_config(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            config_path = Path(__file__).parent / "casino_setup.json"
            with open(config_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return {}
    
    def _init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        with sqlite3.connect(str(self.db_path)) as conn:
            cursor = conn.cursor()
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS final_spins (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    number INTEGER NOT NULL,
                    color TEXT NOT NULL,
                    timestamp DATETIME NOT NULL,
                    table_id TEXT NOT NULL CHECK(table_id = 'roulettestura541'),
                    game_id TEXT,
                    source TEXT
                )
            """)
            conn.commit()
    
    def get_single_table_data_only(self, limit: int = 50) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –°–¢–†–û–ì–û –¢–û–õ–¨–ö–û —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–∞
        """
        print(f"üîç –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –¢–û–õ–¨–ö–û –° –°–¢–û–õ–ê: {self.TARGET_TABLE}")
        print(f"üö´ –í–°–ï –û–°–¢–ê–õ–¨–ù–´–ï –°–¢–û–õ–´ –ò–ì–ù–û–†–ò–†–£–Æ–¢–°–Ø!")
        
        if not self.config:
            print("‚ùå –ù–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API")
            return []
        
        try:
            # API –∑–∞–ø—Ä–æ—Å –°–¢–†–û–ì–û –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å—Ç–æ–ª–∞
            auth = self.config['api']['auth']
            base_url = "https://games.pragmaticplaylive.net/api/ui/statisticHistory"
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¢–û–õ–¨–ö–û –¥–ª—è –Ω–∞—à–µ–≥–æ —Å—Ç–æ–ª–∞
            params = {
                'tableId': self.TARGET_TABLE,  # –°–¢–†–û–ì–û –Ω–∞—à —Å—Ç–æ–ª
                'numberOfGames': min(limit, 500)
            }
            
            url = f"{base_url}?" + urllib.parse.urlencode(params)
            
            req = urllib.request.Request(url)
            req.add_header('User-Agent', self.config['api']['headers']['User-Agent'])
            req.add_header('Accept', 'application/json')
            
            with urllib.request.urlopen(req, timeout=10) as response:
                if response.getcode() == 200:
                    data = json.loads(response.read().decode('utf-8'))
                    results = self._parse_with_strict_filtering(data)
                    
                    print(f"‚úÖ –ü–û–õ–£–ß–ï–ù–û {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¢–û–õ–¨–ö–û —Å —Å—Ç–æ–ª–∞ {self.TARGET_TABLE}")
                    return results
                else:
                    print(f"‚ùå API –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.getcode()}")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
        
        return []
    
    def _parse_with_strict_filtering(self, data: Dict) -> List[Dict]:
        """
        –ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ —Å –ñ–ï–°–¢–ö–û–ô —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Å—Ç–æ–ª—É
        """
        results = []
        
        try:
            if 'history' in data and isinstance(data['history'], list):
                print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(data['history'])} –∑–∞–ø–∏—Å–µ–π –∏–∑ API")
                
                valid_results = 0
                filtered_out = 0
                
                for game in data['history']:
                    if not isinstance(game, dict):
                        continue
                    
                    # –ü–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä –∏ —Ü–≤–µ—Ç
                    winning_number = None
                    color = None
                    
                    if 'gameResult' in game:
                        try:
                            parts = game['gameResult'].split()
                            if len(parts) >= 2:
                                winning_number = int(parts[0])
                                api_color = parts[1].lower()
                                color = api_color if api_color in ['red', 'black', 'green'] else self._get_color(winning_number)
                        except (ValueError, IndexError):
                            continue
                    
                    if winning_number is not None and 0 <= winning_number <= 36:
                        # –í—Ä–µ–º—è
                        timestamp = datetime.now()
                        if 'gameTime' in game:
                            try:
                                timestamp = datetime.fromisoformat(game['gameTime'].replace('Z', '+00:00'))
                            except:
                                pass
                        
                        # –ñ–ï–°–¢–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –¢–û–õ–¨–ö–û –ù–ê–® –°–¢–û–õ
                        result = {
                            'number': winning_number,
                            'color': color,
                            'timestamp': timestamp,
                            'table_id': self.TARGET_TABLE,  # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –Ω–∞—à —Å—Ç–æ–ª
                            'source': 'final_single_table_api',
                            'game_id': game.get('gameId', '')
                        }
                        
                        # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê - —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —ç—Ç–æ –Ω–∞—à —Å—Ç–æ–ª
                        if result['table_id'] == self.TARGET_TABLE:
                            results.append(result)
                            valid_results += 1
                        else:
                            filtered_out += 1
                            print(f"üö´ –û–¢–§–ò–õ–¨–¢–†–û–í–ê–ù: {result['table_id']}")
                
                print(f"‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {valid_results}")
                print(f"üö´ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {filtered_out}")
                print(f"üéØ –í–°–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –° –°–¢–û–õ–ê: {self.TARGET_TABLE}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        
        return results
    
    def _get_color(self, number: int) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–≤–µ—Ç —á–∏—Å–ª–∞"""
        if number == 0:
            return 'green'
        red_numbers = {1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36}
        return 'red' if number in red_numbers else 'black'
    
    def save_to_database(self, results: List[Dict]) -> int:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç–æ–ª–∞"""
        saved_count = 0
        
        with sqlite3.connect(str(self.db_path)) as conn:
            cursor = conn.cursor()
            
            for result in results:
                # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
                if result.get('table_id') != self.TARGET_TABLE:
                    print(f"üö´ –û–¢–ö–õ–û–ù–ï–ù–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: —á—É–∂–æ–π —Å—Ç–æ–ª {result.get('table_id')}")
                    continue
                
                try:
                    cursor.execute("""
                        INSERT INTO final_spins 
                        (number, color, timestamp, table_id, game_id, source)
                        VALUES (?, ?, ?, ?, ?, ?)
                    """, (
                        result['number'],
                        result['color'],
                        result['timestamp'],
                        result['table_id'],
                        result.get('game_id', ''),
                        result.get('source', 'final_single_table')
                    ))
                    saved_count += 1
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            
            conn.commit()
        
        print(f"üíæ –°–û–•–†–ê–ù–ï–ù–û {saved_count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        return saved_count
    
    def get_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¢–û–õ–¨–ö–û —Å –æ–¥–Ω–æ–≥–æ —Å—Ç–æ–ª–∞"""
        with sqlite3.connect(str(self.db_path)) as conn:
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ —Å –Ω–∞—à–µ–≥–æ —Å—Ç–æ–ª–∞
            cursor.execute("SELECT DISTINCT table_id FROM final_spins")
            tables = [row[0] for row in cursor.fetchall()]
            
            if len(tables) > 1:
                print(f"‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –î–ê–ù–ù–´–ï –° –ß–£–ñ–ò–• –°–¢–û–õ–û–í: {tables}")
                print(f"üßπ –û–ß–ò–©–ê–ï–ú –ß–£–ñ–ò–ï –î–ê–ù–ù–´–ï...")
                cursor.execute("DELETE FROM final_spins WHERE table_id != ?", (self.TARGET_TABLE,))
                conn.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–ª—å–∫–æ –Ω–∞—à–µ–≥–æ —Å—Ç–æ–ª–∞
            cursor.execute("""
                SELECT number, color, timestamp 
                FROM final_spins 
                WHERE table_id = ? 
                ORDER BY timestamp DESC
            """, (self.TARGET_TABLE,))
            
            rows = cursor.fetchall()
            
            if not rows:
                return {'total': 0, 'colors': {}, 'table': self.TARGET_TABLE}
            
            colors = {'red': 0, 'black': 0, 'green': 0}
            numbers_count = {}
            
            for number, color, timestamp in rows:
                colors[color] += 1
                numbers_count[number] = numbers_count.get(number, 0) + 1
            
            total = len(rows)
            
            return {
                'total': total,
                'table': self.TARGET_TABLE,
                'colors': colors,
                'percentages': {
                    'red': round(colors['red']/total*100, 1),
                    'black': round(colors['black']/total*100, 1),
                    'green': round(colors['green']/total*100, 1)
                },
                'most_frequent': sorted(numbers_count.items(), key=lambda x: x[1], reverse=True)[:5],
                'latest_results': [(number, color) for number, color, _ in rows[:10]]
            }
    
    def show_detailed_stats(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        stats = self.get_statistics()
        
        if stats['total'] == 0:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return
        
        print(f"\nüìä –ü–û–î–†–û–ë–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–¢–û–õ–ê {stats['table']}:")
        print("="*50)
        print(f"–í—Å–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {stats['total']}")
        print(f"–ö—Ä–∞—Å–Ω—ã–µ: {stats['colors']['red']} ({stats['percentages']['red']}%)")
        print(f"–ß–µ—Ä–Ω—ã–µ: {stats['colors']['black']} ({stats['percentages']['black']}%)")
        print(f"–ó–µ–ª–µ–Ω—ã–µ: {stats['colors']['green']} ({stats['percentages']['green']}%)")
        
        print(f"\n–ß–∞—Å—Ç—ã–µ —á–∏—Å–ª–∞:")
        for number, count in stats['most_frequent']:
            print(f"  {number}: {count} —Ä–∞–∑ ({count/stats['total']*100:.1f}%)")
        
        print(f"\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        for i, (number, color) in enumerate(stats['latest_results'], 1):
            print(f"  {i:2d}. {number:2d} ({color})")
    
    def run_collection_session(self, count: int = 50):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Å—Å–∏—é —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
        print(f"\nüöÄ –ó–ê–ü–£–°–ö –°–ï–°–°–ò–ò –°–ë–û–†–ê –î–ê–ù–ù–´–•")
        print(f"üéØ –¶–ï–õ–¨: {count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¢–û–õ–¨–ö–û —Å —Å—Ç–æ–ª–∞ {self.TARGET_TABLE}")
        print("="*50)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        results = self.get_single_table_data_only(count)
        
        if results:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            saved = self.save_to_database(results)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.show_detailed_stats()
            
            print(f"\n‚úÖ –°–ï–°–°–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ: {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {saved} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤") 
            print(f"üéØ –í–°–ï –î–ê–ù–ù–´–ï –¢–û–õ–¨–ö–û –° –°–¢–û–õ–ê: {self.TARGET_TABLE}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê - –¢–û–õ–¨–ö–û –û–î–ò–ù –°–¢–û–õ")
    print("="*60)
    
    system = FinalSingleTableSystem()
    
    while True:
        print(f"\nüé∞ –ú–ï–ù–Æ –°–ò–°–¢–ï–ú–´ (–°–¢–û–õ: {system.TARGET_TABLE})")
        print("-"*40)
        print("1. üìä –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –æ–¥–Ω–æ–≥–æ —Å—Ç–æ–ª–∞")
        print("2. üìà –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        print("3. üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é —Å–±–æ—Ä–∞ (50 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)")
        print("4. üß™ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        print("0. üö™ –í—ã—Ö–æ–¥")
        print("-"*40)
        
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()
        
        if choice == '1':
            count = input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20): ").strip()
            count = int(count) if count.isdigit() else 20
            
            results = system.get_single_table_data_only(count)
            if results:
                system.save_to_database(results)
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        elif choice == '2':
            system.show_detailed_stats()
        
        elif choice == '3':
            system.run_collection_session(50)
        
        elif choice == '4':
            print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
            results = system.get_single_table_data_only(5)
            if results:
                print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–ª—É—á–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                for i, r in enumerate(results, 1):
                    print(f"  {i}. {r['number']} ({r['color']}) - {r['table_id']}")
            else:
                print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º")
        
        elif choice == '0':
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")


if __name__ == "__main__":
    main()