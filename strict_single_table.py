"""
–°–¢–†–û–ì–ò–ô –°–ë–û–†–©–ò–ö –î–ê–ù–ù–´–• –¢–û–õ–¨–ö–û –° –û–î–ù–û–ì–û –°–¢–û–õ–ê
============================================

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¢–û–õ–¨–ö–û —Å –æ–¥–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–∞ —Ä—É–ª–µ—Ç–∫–∏.
–ù–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å –¥—Ä—É–≥–∏—Ö —Å—Ç–æ–ª–æ–≤ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è.
"""

import json
import time
import urllib.request
import urllib.parse
from datetime import datetime
from typing import Dict, List
from pathlib import Path


class SingleTableOnlyCollector:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –°–¢–†–û–ì–û —Å –æ–¥–Ω–æ–≥–æ —Å—Ç–æ–ª–∞"""
    
    def __init__(self, table_id: str = "roulettestura541"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Å—Ç–æ–ª–æ–º
        
        Args:
            table_id: ID —Å—Ç–æ–ª–∞ (–¢–û–õ–¨–ö–û —Å –Ω–µ–≥–æ –±—É–¥—É—Ç –¥–∞–Ω–Ω—ã–µ)
        """
        self.target_table_id = table_id
        self.config = self._load_config()
        
        print(f"üéØ –ù–ê–°–¢–†–û–ï–ù –°–ë–û–† –î–ê–ù–ù–´–• –¢–û–õ–¨–ö–û –° –°–¢–û–õ–ê: {self.target_table_id}")
        print(f"‚ö†Ô∏è  –ù–ò–ö–ê–ö–ò–• –î–†–£–ì–ò–• –°–¢–û–õ–û–í –ù–ï –ë–£–î–ï–¢!")
    
    def _load_config(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            config_path = Path(__file__).parent / "casino_setup.json"
            with open(config_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return {}
    
    def get_single_table_data(self, limit: int = 50) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¢–û–õ–¨–ö–û —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–∞
        
        Args:
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–º–∞–∫—Å–∏–º—É–º 500)
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¢–û–õ–¨–ö–û —Å —Ü–µ–ª–µ–≤–æ–≥–æ —Å—Ç–æ–ª–∞
        """
        if not self.config:
            print("‚ùå –ù–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API")
            return []
        
        try:
            # –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∞
            print(f"üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¢–û–õ–¨–ö–û —Å —Å—Ç–æ–ª–∞: {self.target_table_id}")
            
            # API –∑–∞–ø—Ä–æ—Å –°–¢–†–û–ì–û –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å—Ç–æ–ª–∞
            auth = self.config['api']['auth']
            base_url = "https://games.pragmaticplaylive.net/api/ui/statisticHistory"
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¢–û–õ–¨–ö–û –¥–ª—è –Ω–∞—à–µ–≥–æ —Å—Ç–æ–ª–∞
            params = {
                'tableId': self.target_table_id,  # –°–¢–†–û–ì–û –Ω–∞—à —Å—Ç–æ–ª
                'numberOfGames': min(limit, 500),
                'JSESSIONID': auth['jsessionid']
            }
            
            url = f"{base_url}?" + urllib.parse.urlencode(params)
            
            req = urllib.request.Request(url)
            req.add_header('User-Agent', self.config['api']['headers']['User-Agent'])
            req.add_header('Accept', 'application/json')
            
            with urllib.request.urlopen(req, timeout=10) as response:
                if response.getcode() == 200:
                    data = json.loads(response.read().decode('utf-8'))
                    results = self._parse_single_table_only(data)
                    
                    # –î–í–û–ô–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: —É–±–∏—Ä–∞–µ–º –ª—é–±—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å –Ω–∞—à–µ–≥–æ —Å—Ç–æ–ª–∞
                    filtered_results = []
                    for result in results:
                        if result.get('table_id') == self.target_table_id:
                            filtered_results.append(result)
                        else:
                            print(f"üö´ –û–¢–§–ò–õ–¨–¢–†–û–í–ê–ù —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —á—É–∂–æ–≥–æ —Å—Ç–æ–ª–∞: {result.get('table_id')}")
                    
                    print(f"‚úÖ –ü–û–õ–£–ß–ï–ù–û {len(filtered_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¢–û–õ–¨–ö–û —Å —Å—Ç–æ–ª–∞ {self.target_table_id}")
                    return filtered_results
                else:
                    print(f"‚ùå API –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.getcode()}")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
        
        return []
    
    def _parse_single_table_only(self, data: Dict) -> List[Dict]:
        """
        –ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç–æ–ª–∞
        """
        results = []
        
        try:
            if 'history' in data and isinstance(data['history'], list):
                print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(data['history'])} –∑–∞–ø–∏—Å–µ–π")
                
                for game in data['history']:
                    if not isinstance(game, dict):
                        continue
                    
                    # –ü–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä –∏ —Ü–≤–µ—Ç
                    winning_number = None
                    color = None
                    
                    if 'gameResult' in game:
                        try:
                            parts = game['gameResult'].split()
                            if len(parts) >= 2:
                                winning_number = int(parts[0])
                                api_color = parts[1].lower()
                                color = api_color if api_color in ['red', 'black', 'green'] else self._get_color(winning_number)
                        except (ValueError, IndexError):
                            continue
                    
                    if winning_number is not None and 0 <= winning_number <= 36:
                        # –í—Ä–µ–º—è
                        timestamp = datetime.now()
                        if 'gameTime' in game:
                            try:
                                timestamp = datetime.fromisoformat(game['gameTime'].replace('Z', '+00:00'))
                            except:
                                pass
                        
                        # –°–¢–†–û–ì–û –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –Ω–∞—à–µ–º—É —Å—Ç–æ–ª—É
                        result = {
                            'number': winning_number,
                            'color': color,
                            'timestamp': timestamp,
                            'table_id': self.target_table_id,  # –°–¢–†–û–ì–û –Ω–∞—à —Å—Ç–æ–ª
                            'source': 'single_table_api',
                            'game_id': game.get('gameId', '')
                        }
                        
                        results.append(result)
                
                print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ç–æ–ª–∞ {self.target_table_id}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        
        return results
    
    def _get_color(self, number: int) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–≤–µ—Ç —á–∏—Å–ª–∞"""
        if number == 0:
            return 'green'
        red_numbers = {1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36}
        return 'red' if number in red_numbers else 'black'
    
    def monitor_single_table(self, duration_minutes: int = 30):
        """
        –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¢–û–õ–¨–ö–û –æ–¥–Ω–æ–≥–æ —Å—Ç–æ–ª–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        
        Args:
            duration_minutes: –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        """
        print(f"üé∞ –ú–û–ù–ò–¢–û–†–ò–ù–ì –¢–û–õ–¨–ö–û –°–¢–û–õ–ê {self.target_table_id}")
        print(f"‚è±Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_minutes} –º–∏–Ω—É—Ç")
        print(f"üö´ –ù–ò–ö–ê–ö–ò–• –î–†–£–ì–ò–• –°–¢–û–õ–û–í!")
        
        start_time = time.time()
        end_time = start_time + (duration_minutes * 60)
        
        spin_counter = 0
        last_results = set()  # –î–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–µ–π
        
        while time.time() < end_time:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
                current_results = self.get_single_table_data(10)
                
                # –ò—â–µ–º –Ω–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                for result in current_results:
                    result_key = f"{result['game_id']}_{result['number']}_{result['timestamp']}"
                    
                    if result_key not in last_results:
                        spin_counter += 1
                        print(f"üéØ –°–ø–∏–Ω #{spin_counter}: {result['number']} ({result['color']}) - –°–¢–û–õ {result['table_id']}")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                        self._save_to_database(result)
                        
                        last_results.add(result_key)
                        
                        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
                        if len(last_results) > 100:
                            last_results = set(list(last_results)[-50:])
                
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
                time.sleep(30)  # 30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                
            except KeyboardInterrupt:
                print("‚èπÔ∏è  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(10)
        
        print(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ü–æ–ª—É—á–µ–Ω–æ {spin_counter} –Ω–æ–≤—ã—Ö —Å–ø–∏–Ω–æ–≤ –¢–û–õ–¨–ö–û —Å —Å—Ç–æ–ª–∞ {self.target_table_id}")
    
    def _save_to_database(self, result: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            import sqlite3
            
            db_path = Path(__file__).parent / "data" / "single_table_history.db"
            db_path.parent.mkdir(exist_ok=True)
            
            with sqlite3.connect(str(db_path)) as conn:
                cursor = conn.cursor()
                
                # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS single_table_spins (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        number INTEGER NOT NULL,
                        color TEXT NOT NULL,
                        timestamp DATETIME NOT NULL,
                        table_id TEXT NOT NULL,
                        game_id TEXT,
                        source TEXT
                    )
                """)
                
                # –í—Å—Ç–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                cursor.execute("""
                    INSERT INTO single_table_spins 
                    (number, color, timestamp, table_id, game_id, source)
                    VALUES (?, ?, ?, ?, ?, ?)
                """, (
                    result['number'],
                    result['color'],
                    result['timestamp'],
                    result['table_id'],
                    result.get('game_id', ''),
                    result.get('source', 'single_table_api')
                ))
                
                conn.commit()
                print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {result['number']} ({result['color']})")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")


def test_single_table():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä—â–∏–∫–∞ –æ–¥–Ω–æ–≥–æ —Å—Ç–æ–ª–∞"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ë–û–†–©–ò–ö–ê –û–î–ù–û–ì–û –°–¢–û–õ–ê")
    print("=" * 50)
    
    collector = SingleTableOnlyCollector("roulettestura541")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    results = collector.get_single_table_data(20)
    
    if results:
        print(f"\nüìä –ü–û–õ–£–ß–ï–ù–û {len(results)} –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¢–û–õ–¨–ö–û –° –°–¢–û–õ–ê roulettestura541:")
        print("-" * 50)
        
        for i, result in enumerate(results[:10], 1):
            time_str = result['timestamp'].strftime("%H:%M:%S")
            print(f"  {i:2d}. {time_str}: {result['number']:2d} ({result['color']}) - {result['table_id']}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        colors = {'red': 0, 'black': 0, 'green': 0}
        for result in results:
            colors[result['color']] += 1
        
        total = len(results)
        print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–¢–û–õ–ê {collector.target_table_id}:")
        print(f"–í—Å–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {total}")
        print(f"–ö—Ä–∞—Å–Ω—ã–µ: {colors['red']} ({colors['red']/total*100:.1f}%)")
        print(f"–ß–µ—Ä–Ω—ã–µ: {colors['black']} ({colors['black']/total*100:.1f}%)")
        print(f"–ó–µ–ª–µ–Ω—ã–µ: {colors['green']} ({colors['green']/total*100:.1f}%)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –Ω—É–∂–Ω–æ–≥–æ —Å—Ç–æ–ª–∞
        wrong_table = [r for r in results if r.get('table_id') != collector.target_table_id]
        if wrong_table:
            print(f"‚ùå –ù–ê–ô–î–ï–ù–´ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –° –ß–£–ñ–ò–• –°–¢–û–õ–û–í: {len(wrong_table)}")
        else:
            print(f"‚úÖ –í–°–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –° –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –°–¢–û–õ–ê: {collector.target_table_id}")
    else:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")


if __name__ == "__main__":
    test_single_table()