"""
üé≤ RULETTT - –°–∏—Å—Ç–µ–º–∞ –û–±–ª–∞—á–Ω–æ–≥–æ –•—Ä–∞–Ω–µ–Ω–∏—è –î–∞–Ω–Ω—ã—Ö
===========================================

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –æ–±–ª–∞—á–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä—É–ª–µ—Ç–∫–∏
"""

import json
import sqlite3
import pandas as pd
from datetime import datetime, timedelta
import asyncio
import aiohttp
import logging
from typing import Dict, List, Optional, Any

class CloudDataManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –æ–±–ª–∞—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö RULETTT"""
    
    def __init__(self):
        self.local_db = "data/rulettt_cloud.db"
        self.api_endpoints = {
            "firebase": "https://rulettt-default-rtdb.firebaseio.com/",
            "supabase": "https://your-project.supabase.co/rest/v1/",
            "airtable": "https://api.airtable.com/v0/your-base/",
            "github_gist": "https://api.github.com/gists"
        }
        self.setup_database()
        
    def setup_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.local_db)
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä—É–ª–µ—Ç–∫–∏
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS roulette_spins (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                casino_name TEXT NOT NULL,
                number INTEGER NOT NULL,
                color TEXT NOT NULL,
                session_id TEXT,
                table_id TEXT,
                synced_to_cloud BOOLEAN DEFAULT FALSE,
                cloud_id TEXT
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS strategy_results (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                strategy_name TEXT NOT NULL,
                bet_amount REAL NOT NULL,
                win_amount REAL DEFAULT 0,
                session_id TEXT,
                data_range TEXT,
                synced_to_cloud BOOLEAN DEFAULT FALSE
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫–æ–º–∞–Ω–¥—ã –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS team_activity (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                user_name TEXT NOT NULL,
                action_type TEXT NOT NULL,
                description TEXT,
                session_id TEXT
            )
        ''')
        
        conn.commit()
        conn.close()
        print("‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    async def save_spin_data(self, casino: str, number: int, color: str, 
                           session_id: str = None, table_id: str = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–ø–∏–Ω–∞ —Ä—É–ª–µ—Ç–∫–∏"""
        conn = sqlite3.connect(self.local_db)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO roulette_spins 
            (casino_name, number, color, session_id, table_id)
            VALUES (?, ?, ?, ?, ?)
        ''', (casino, number, color, session_id, table_id))
        
        conn.commit()
        spin_id = cursor.lastrowid
        conn.close()
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –æ–±–ª–∞–∫–æ–º
        await self.sync_to_cloud('roulette_spins', spin_id)
        
        print(f"üíæ –°–ø–∏–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {casino} | {number} ({color})")
        return spin_id

    async def save_strategy_result(self, strategy: str, bet_amount: float, 
                                 win_amount: float, session_id: str = None,
                                 data_range: str = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        conn = sqlite3.connect(self.local_db)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO strategy_results 
            (strategy_name, bet_amount, win_amount, session_id, data_range)
            VALUES (?, ?, ?, ?, ?)
        ''', (strategy, bet_amount, win_amount, session_id, data_range))
        
        conn.commit()
        result_id = cursor.lastrowid
        conn.close()
        
        await self.sync_to_cloud('strategy_results', result_id)
        
        profit = win_amount - bet_amount
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {strategy} | –ü—Ä–∏–±—ã–ª—å: {profit:+.2f}")
        return result_id

    async def sync_to_cloud(self, table_name: str, record_id: int):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –æ–±–ª–∞—á–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏"""
        try:
            conn = sqlite3.connect(self.local_db)
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            cursor.execute(f'''
                SELECT * FROM {table_name} 
                WHERE id = ? AND synced_to_cloud = FALSE
            ''', (record_id,))
            
            record = cursor.fetchone()
            if not record:
                return
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
            columns = [description[0] for description in cursor.description]
            data = dict(zip(columns, record))
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Firebase
            firebase_id = await self.sync_to_firebase(table_name, data)
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å GitHub Gist (–∫–∞–∫ –±—ç–∫–∞–ø)
            gist_id = await self.sync_to_github_gist(table_name, data)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            cursor.execute(f'''
                UPDATE {table_name} 
                SET synced_to_cloud = TRUE, cloud_id = ?
                WHERE id = ?
            ''', (firebase_id, record_id))
            
            conn.commit()
            conn.close()
            
            print(f"‚òÅÔ∏è –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {table_name}#{record_id}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")

    async def sync_to_firebase(self, table_name: str, data: Dict) -> str:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Firebase Realtime Database"""
        try:
            url = f"{self.api_endpoints['firebase']}{table_name}.json"
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Firebase
            firebase_data = {
                **data,
                'timestamp': data.get('timestamp', datetime.now().isoformat()),
                'source': 'rulettt_collector'
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=firebase_data) as response:
                    if response.status == 200:
                        result = await response.json()
                        return result.get('name', '')  # Firebase –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
                    else:
                        print(f"‚ùå Firebase –æ—à–∏–±–∫–∞: {response.status}")
                        return None
                        
        except Exception as e:
            print(f"‚ùå Firebase —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            return None

    async def sync_to_github_gist(self, table_name: str, data: Dict) -> str:
        """–ë—ç–∫–∞–ø –¥–∞–Ω–Ω—ã—Ö –≤ GitHub Gist"""
        try:
            # –°–æ–∑–¥–∞–µ–º JSON —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏
            filename = f"rulettt_{table_name}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            content = json.dumps(data, indent=2, ensure_ascii=False, default=str)
            
            gist_data = {
                "description": f"RULETTT {table_name} backup",
                "public": False,
                "files": {
                    filename: {
                        "content": content
                    }
                }
            }
            
            headers = {
                "Authorization": "token YOUR_GITHUB_TOKEN",
                "Accept": "application/vnd.github.v3+json"
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    self.api_endpoints['github_gist'], 
                    json=gist_data, 
                    headers=headers
                ) as response:
                    if response.status == 201:
                        result = await response.json()
                        return result.get('id', '')
                    else:
                        print(f"‚ùå GitHub Gist –æ—à–∏–±–∫–∞: {response.status}")
                        return None
                        
        except Exception as e:
            print(f"‚ùå GitHub Gist –±—ç–∫–∞–ø –Ω–µ —É–¥–∞–ª—Å—è: {e}")
            return None

    def get_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.local_db)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ø–∏–Ω–æ–≤
        spins_df = pd.read_sql_query('''
            SELECT casino_name, COUNT(*) as total_spins, 
                   COUNT(CASE WHEN color = 'red' THEN 1 END) as red_count,
                   COUNT(CASE WHEN color = 'black' THEN 1 END) as black_count,
                   COUNT(CASE WHEN color = 'green' THEN 1 END) as green_count,
                   MIN(timestamp) as first_spin,
                   MAX(timestamp) as last_spin
            FROM roulette_spins 
            GROUP BY casino_name
        ''', conn)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        strategy_df = pd.read_sql_query('''
            SELECT strategy_name, 
                   COUNT(*) as sessions,
                   SUM(win_amount - bet_amount) as total_profit,
                   AVG(win_amount - bet_amount) as avg_profit,
                   MAX(win_amount - bet_amount) as max_profit,
                   MIN(win_amount - bet_amount) as min_profit
            FROM strategy_results 
            GROUP BY strategy_name
        ''', conn)
        
        conn.close()
        
        return {
            'spins_by_casino': spins_df.to_dict('records'),
            'strategy_performance': strategy_df.to_dict('records'),
            'total_spins': spins_df['total_spins'].sum() if not spins_df.empty else 0,
            'total_sessions': len(strategy_df) if not strategy_df.empty else 0
        }

    async def export_data(self, format: str = 'json', 
                         start_date: str = None, end_date: str = None) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö"""
        conn = sqlite3.connect(self.local_db)
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º
        date_filter = ""
        if start_date and end_date:
            date_filter = f"WHERE timestamp BETWEEN '{start_date}' AND '{end_date}'"
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        spins_df = pd.read_sql_query(f'''
            SELECT * FROM roulette_spins {date_filter}
            ORDER BY timestamp DESC
        ''', conn)
        
        strategies_df = pd.read_sql_query(f'''
            SELECT * FROM strategy_results {date_filter}
            ORDER BY timestamp DESC
        ''', conn)
        
        conn.close()
        
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        
        if format.lower() == 'json':
            filename = f"rulettt_export_{timestamp}.json"
            export_data = {
                'export_info': {
                    'timestamp': datetime.now().isoformat(),
                    'total_spins': len(spins_df),
                    'total_strategies': len(strategies_df),
                    'date_range': f"{start_date} to {end_date}" if start_date else "All time"
                },
                'roulette_spins': spins_df.to_dict('records'),
                'strategy_results': strategies_df.to_dict('records')
            }
            
            with open(f"exports/{filename}", 'w', encoding='utf-8') as f:
                json.dump(export_data, f, indent=2, ensure_ascii=False, default=str)
                
        elif format.lower() == 'csv':
            filename_spins = f"rulettt_spins_{timestamp}.csv"
            filename_strategies = f"rulettt_strategies_{timestamp}.csv"
            
            spins_df.to_csv(f"exports/{filename_spins}", index=False, encoding='utf-8')
            strategies_df.to_csv(f"exports/{filename_strategies}", index=False, encoding='utf-8')
            
            filename = f"Exported: {filename_spins}, {filename_strategies}"
            
        elif format.lower() == 'excel':
            filename = f"rulettt_export_{timestamp}.xlsx"
            
            with pd.ExcelWriter(f"exports/{filename}", engine='openpyxl') as writer:
                spins_df.to_excel(writer, sheet_name='Roulette Spins', index=False)
                strategies_df.to_excel(writer, sheet_name='Strategy Results', index=False)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats = self.get_statistics()
                stats_df = pd.DataFrame([stats])
                stats_df.to_excel(writer, sheet_name='Statistics', index=False)
        
        print(f"üì§ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {filename}")
        return filename

    async def team_activity_log(self, user_name: str, action_type: str, 
                              description: str, session_id: str = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã"""
        conn = sqlite3.connect(self.local_db)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO team_activity 
            (user_name, action_type, description, session_id)
            VALUES (?, ?, ?, ?)
        ''', (user_name, action_type, description, session_id))
        
        conn.commit()
        activity_id = cursor.lastrowid
        conn.close()
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        await self.broadcast_activity(user_name, action_type, description)
        
        print(f"üë• –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_name} - {action_type}")
        return activity_id

    async def broadcast_activity(self, user: str, action: str, description: str):
        """–¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å WebSocket –∏–ª–∏ Server-Sent Events
        activity_data = {
            'timestamp': datetime.now().isoformat(),
            'user': user,
            'action': action,
            'description': description,
            'type': 'team_activity'
        }
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ WebSocket –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
        print(f"üì° –¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {user} - {action}")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±–ª–∞—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è"""
    print("üé≤ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –æ–±–ª–∞—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è RULETTT")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    cloud_manager = CloudDataManager()
    
    # –°–∏–º—É–ª—è—Ü–∏—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Ä—É–ª–µ—Ç–∫–∏
    await cloud_manager.save_spin_data("Stake.com", 17, "black", "session_001", "table_vip_1")
    await cloud_manager.save_spin_data("BC.Game", 32, "red", "session_001", "table_standard_2")
    await cloud_manager.save_spin_data("Roobet", 0, "green", "session_002", "table_vip_1")
    
    # –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    await cloud_manager.save_strategy_result("–ú–∞—Ä—Ç–∏–Ω–≥–µ–π–ª –∫—Ä–∞—Å–Ω–æ–µ", 10.0, 20.0, "session_001", "last_100_spins")
    await cloud_manager.save_strategy_result("–§–∏–±–æ–Ω–∞—á—á–∏ —á–µ—Ç–Ω–æ–µ", 15.0, 12.0, "session_001", "last_50_spins")
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã
    await cloud_manager.team_activity_log("–ö–æ–ª–ª–µ–∫—Ç–æ—Ä", "data_collection", "–°–æ–±—Ä–∞–Ω–æ 150 —Å–ø–∏–Ω–æ–≤ —Å Stake.com", "session_001")
    await cloud_manager.team_activity_log("–ê–Ω–∞–ª–∏—Ç–∏–∫", "strategy_analysis", "–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ú–∞—Ä—Ç–∏–Ω–≥–µ–π–ª –∑–∞–≤–µ—Ä—à–µ–Ω", "session_001")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats = cloud_manager.get_statistics()
    print("\nüìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  –í—Å–µ–≥–æ —Å–ø–∏–Ω–æ–≤: {stats['total_spins']}")
    print(f"  –°–µ—Å—Å–∏–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {stats['total_sessions']}")
    
    # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
    json_file = await cloud_manager.export_data('json')
    excel_file = await cloud_manager.export_data('excel')
    
    print(f"\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–±–ª–∞—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
    print(f"üìÅ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —Ñ–∞–π–ª—ã: {json_file}, {excel_file}")

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    import os
    os.makedirs("exports", exist_ok=True)
    os.makedirs("data", exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
    asyncio.run(main())