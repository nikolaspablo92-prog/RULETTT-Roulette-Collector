#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üé∞ RULETTT Desktop Application
–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ Windows –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–±–æ—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä—É–ª–µ—Ç–∫–∏
"""

import sys
import os
import threading
import webbrowser
from pathlib import Path

try:
    from PyQt5.QtWidgets import (
        QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
        QPushButton, QLabel, QTextEdit, QGroupBox, QSystemTrayIcon,
        QMenu, QAction, QStyle, QMessageBox, QTabWidget, QStatusBar
    )
    from PyQt5.QtCore import Qt, QTimer, pyqtSignal, QObject
    from PyQt5.QtGui import QIcon, QFont, QTextCursor
    PYQT_AVAILABLE = True
except ImportError:
    PYQT_AVAILABLE = False
    print("‚ùå PyQt5 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install PyQt5 PyQtWebEngine")
    sys.exit(1)

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
sys.path.append(str(Path(__file__).parent))

# –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤
import subprocess
import socket


class ServerManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API –∏ Web —Å–µ—Ä–≤–µ—Ä–∞–º–∏"""
    
    def __init__(self):
        self.api_process = None
        self.web_process = None
        self.api_port = 5000
        self.web_port = 8080
    
    def is_port_in_use(self, port):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞"""
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            return s.connect_ex(('localhost', port)) == 0
    
    def start_api_server(self):
        """–ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞"""
        if self.is_port_in_use(self.api_port):
            return True, "API —Å–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω"
        
        try:
            api_script = Path(__file__).parent / "api_server.py"
            self.api_process = subprocess.Popen(
                [sys.executable, str(api_script)],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                creationflags=subprocess.CREATE_NO_WINDOW if sys.platform == 'win32' else 0
            )
            return True, f"API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {self.api_port}"
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ API: {e}"
    
    def start_web_server(self):
        """–ó–∞–ø—É—Å–∫ Web —Å–µ—Ä–≤–µ—Ä–∞"""
        if self.is_port_in_use(self.web_port):
            return True, "Web —Å–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω"
        
        try:
            webapp_dir = Path(__file__).parent / "webapp"
            self.web_process = subprocess.Popen(
                [sys.executable, "-m", "http.server", str(self.web_port)],
                cwd=str(webapp_dir),
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                creationflags=subprocess.CREATE_NO_WINDOW if sys.platform == 'win32' else 0
            )
            return True, f"Web —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {self.web_port}"
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Web: {e}"
    
    def stop_servers(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        if self.api_process:
            self.api_process.terminate()
            self.api_process = None
        if self.web_process:
            self.web_process.terminate()
            self.web_process = None
    
    def get_status(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        api_status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if self.is_port_in_use(self.api_port) else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        web_status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if self.is_port_in_use(self.web_port) else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return api_status, web_status


class LogEmitter(QObject):
    """–≠–º–∏—Ç—Ç–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤ –≤ GUI"""
    log_signal = pyqtSignal(str)


class RoulettDesktopApp(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        super().__init__()
        
        self.server_manager = ServerManager()
        self.log_emitter = LogEmitter()
        self.log_emitter.log_signal.connect(self.append_log)
        
        self.init_ui()
        self.init_tray()
        self.setup_status_timer()
        
        # –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤
        self.auto_start_servers()
    
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.setWindowTitle("üé∞ RULETTT - –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—É–ª–µ—Ç–∫–∏")
        self.setGeometry(100, 100, 900, 700)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # –ì–ª–∞–≤–Ω—ã–π layout
        main_layout = QVBoxLayout()
        central_widget.setLayout(main_layout)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = QLabel("üé∞ RULETTT - –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ä—É–ª–µ—Ç–∫–∏")
        header_font = QFont()
        header_font.setPointSize(16)
        header_font.setBold(True)
        header.setFont(header_font)
        header.setAlignment(Qt.AlignCenter)
        main_layout.addWidget(header)
        
        # –í–∫–ª–∞–¥–∫–∏
        tabs = QTabWidget()
        main_layout.addWidget(tabs)
        
        # –í–∫–ª–∞–¥–∫–∞ 1: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        control_tab = self.create_control_tab()
        tabs.addTab(control_tab, "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        
        # –í–∫–ª–∞–¥–∫–∞ 2: –õ–æ–≥–∏
        log_tab = self.create_log_tab()
        tabs.addTab(log_tab, "üìã –õ–æ–≥–∏")
        
        # –í–∫–ª–∞–¥–∫–∞ 3: –û –ø—Ä–æ–≥—Ä–∞–º–º–µ
        about_tab = self.create_about_tab()
        tabs.addTab(about_tab, "‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ")
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)
        self.status_bar.showMessage("–ì–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
        self.apply_styles()
    
    def create_control_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        widget = QWidget()
        layout = QVBoxLayout()
        widget.setLayout(layout)
        
        # –ì—Ä—É–ø–ø–∞: –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤
        status_group = QGroupBox("–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤")
        status_layout = QVBoxLayout()
        status_group.setLayout(status_layout)
        
        self.api_status_label = QLabel("API Server: üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        self.web_status_label = QLabel("Web Server: üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        status_layout.addWidget(self.api_status_label)
        status_layout.addWidget(self.web_status_label)
        
        layout.addWidget(status_group)
        
        # –ì—Ä—É–ø–ø–∞: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏
        control_group = QGroupBox("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏")
        control_layout = QVBoxLayout()
        control_group.setLayout(control_layout)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_layout = QHBoxLayout()
        
        self.btn_start_all = QPushButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å—ë")
        self.btn_start_all.clicked.connect(self.start_all_servers)
        btn_layout.addWidget(self.btn_start_all)
        
        self.btn_stop_all = QPushButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å—ë")
        self.btn_stop_all.clicked.connect(self.stop_all_servers)
        btn_layout.addWidget(self.btn_stop_all)
        
        control_layout.addLayout(btn_layout)
        layout.addWidget(control_group)
        
        # –ì—Ä—É–ø–ø–∞: –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø
        quick_group = QGroupBox("–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø")
        quick_layout = QVBoxLayout()
        quick_group.setLayout(quick_layout)
        
        btn_dashboard = QPushButton("üåê –û—Ç–∫—Ä—ã—Ç—å Dashboard")
        btn_dashboard.clicked.connect(self.open_dashboard)
        quick_layout.addWidget(btn_dashboard)
        
        btn_logs_dashboard = QPushButton("üìä –û—Ç–∫—Ä—ã—Ç—å Logs Dashboard")
        btn_logs_dashboard.clicked.connect(self.open_logs_dashboard)
        quick_layout.addWidget(btn_logs_dashboard)
        
        btn_main_py = QPushButton("üêç –ó–∞–ø—É—Å—Ç–∏—Ç—å Python CLI")
        btn_main_py.clicked.connect(self.open_python_cli)
        quick_layout.addWidget(btn_main_py)
        
        btn_collector = QPushButton("üìã –û—Ç–∫—Ä—ã—Ç—å –∫–æ–ª–ª–µ–∫—Ç–æ—Ä (JS)")
        btn_collector.clicked.connect(self.open_collector_code)
        quick_layout.addWidget(btn_collector)
        
        layout.addWidget(quick_group)
        
        # –ì—Ä—É–ø–ø–∞: –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
        docs_group = QGroupBox("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
        docs_layout = QVBoxLayout()
        docs_group.setLayout(docs_layout)
        
        btn_real_data = QPushButton("üìñ –ö–∞–∫ —Å–æ–±—Ä–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        btn_real_data.clicked.connect(lambda: self.open_file("REAL_DATA_START.md"))
        docs_layout.addWidget(btn_real_data)
        
        btn_cheatsheet = QPushButton("üìù –®–ø–∞—Ä–≥–∞–ª–∫–∞")
        btn_cheatsheet.clicked.connect(lambda: self.open_file("CHEATSHEET.md"))
        docs_layout.addWidget(btn_cheatsheet)
        
        layout.addWidget(docs_group)
        
        # –†–∞—Å—Ç—è–∂–∫–∞
        layout.addStretch()
        
        return widget
    
    def create_log_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –ª–æ–≥–æ–≤"""
        widget = QWidget()
        layout = QVBoxLayout()
        widget.setLayout(layout)
        
        label = QLabel("üìã –õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:")
        layout.addWidget(label)
        
        self.log_text = QTextEdit()
        self.log_text.setReadOnly(True)
        self.log_text.setStyleSheet("background-color: #1e1e1e; color: #d4d4d4; font-family: Consolas;")
        layout.addWidget(self.log_text)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏
        btn_clear = QPushButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏")
        btn_clear.clicked.connect(self.log_text.clear)
        layout.addWidget(btn_clear)
        
        return widget
    
    def create_about_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –û –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        widget = QWidget()
        layout = QVBoxLayout()
        widget.setLayout(layout)
        
        about_text = QLabel("""
        <h2>üé∞ RULETTT - –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—É–ª–µ—Ç–∫–∏</h2>
        <p><b>–í–µ—Ä—Å–∏—è:</b> 1.0.0 Desktop Edition</p>
        <p><b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> Windows (macOS –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)</p>
        
        <h3>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</h3>
        <ul>
            <li>‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Ä—É–ª–µ—Ç–∫–∏</li>
            <li>‚úÖ –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤</li>
            <li>‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–≥—Ä–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π</li>
            <li>‚úÖ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</li>
            <li>‚úÖ Web-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ API</li>
        </ul>
        
        <h3>‚ö†Ô∏è –í–∞–∂–Ω–æ:</h3>
        <p>–°–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è <b>–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π</b>!</p>
        <p>–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è —Å—Ç–∞–≤–æ–∫ —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–µ–Ω—å–≥–∞–º–∏.</p>
        
        <h3>üìß –ö–æ–Ω—Ç–∞–∫—Ç—ã:</h3>
        <p>GitHub: nikolaspablo92-prog/RULETTT</p>
        
        <p style="color: gray; margin-top: 20px;">
        ¬© 2025 RULETTT Project. All rights reserved.
        </p>
        """)
        about_text.setWordWrap(True)
        about_text.setOpenExternalLinks(True)
        layout.addWidget(about_text)
        
        layout.addStretch()
        
        return widget
    
    def init_tray(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∫–æ–Ω–∫–∏ –≤ —Ç—Ä–µ–µ"""
        if not QSystemTrayIcon.isSystemTrayAvailable():
            self.log("‚ö†Ô∏è System tray –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        # –ò–∫–æ–Ω–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é)
        icon = self.style().standardIcon(QStyle.SP_ComputerIcon)
        
        self.tray_icon = QSystemTrayIcon(icon, self)
        self.tray_icon.setToolTip("RULETTT - –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—É–ª–µ—Ç–∫–∏")
        
        # –ú–µ–Ω—é —Ç—Ä–µ—è
        tray_menu = QMenu()
        
        show_action = QAction("–ü–æ–∫–∞–∑–∞—Ç—å", self)
        show_action.triggered.connect(self.show)
        tray_menu.addAction(show_action)
        
        dashboard_action = QAction("–û—Ç–∫—Ä—ã—Ç—å Dashboard", self)
        dashboard_action.triggered.connect(self.open_dashboard)
        tray_menu.addAction(dashboard_action)
        
        tray_menu.addSeparator()
        
        quit_action = QAction("–í—ã—Ö–æ–¥", self)
        quit_action.triggered.connect(self.quit_application)
        tray_menu.addAction(quit_action)
        
        self.tray_icon.setContextMenu(tray_menu)
        self.tray_icon.activated.connect(self.tray_icon_activated)
        self.tray_icon.show()
    
    def tray_icon_activated(self, reason):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∏–∫–æ–Ω–∫–µ –≤ —Ç—Ä–µ–µ"""
        if reason == QSystemTrayIcon.DoubleClick:
            self.show()
            self.activateWindow()
    
    def setup_status_timer(self):
        """–¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
        self.status_timer = QTimer()
        self.status_timer.timeout.connect(self.update_server_status)
        self.status_timer.start(2000)  # –ö–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    
    def update_server_status(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        api_status, web_status = self.server_manager.get_status()
        self.api_status_label.setText(f"API Server: {api_status}")
        self.web_status_label.setText(f"Web Server: {web_status}")
    
    def auto_start_servers(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"""
        self.log("üöÄ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤...")
        self.start_all_servers()
    
    def start_all_servers(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        self.log("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤...")
        
        # –ó–∞–ø—É—Å–∫ API
        success, msg = self.server_manager.start_api_server()
        self.log(f"API: {msg}")
        
        # –ó–∞–ø—É—Å–∫ Web
        success, msg = self.server_manager.start_web_server()
        self.log(f"Web: {msg}")
        
        self.status_bar.showMessage("–°–µ—Ä–≤–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã", 3000)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ç—Ä–µ–µ
        if hasattr(self, 'tray_icon'):
            self.tray_icon.showMessage(
                "RULETTT",
                "–°–µ—Ä–≤–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã!",
                QSystemTrayIcon.Information,
                2000
            )
    
    def stop_all_servers(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        self.log("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤...")
        self.server_manager.stop_servers()
        self.log("‚úÖ –°–µ—Ä–≤–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        self.status_bar.showMessage("–°–µ—Ä–≤–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã", 3000)
    
    def open_dashboard(self):
        """–û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω—ã–π Dashboard"""
        url = f"http://localhost:{self.server_manager.web_port}/dashboard.html"
        webbrowser.open(url)
        self.log(f"üåê –û—Ç–∫—Ä—ã—Ç Dashboard: {url}")
    
    def open_logs_dashboard(self):
        """–û—Ç–∫—Ä—ã—Ç—å Logs Dashboard"""
        url = f"http://localhost:{self.server_manager.web_port}/logs_dashboard.html"
        webbrowser.open(url)
        self.log(f"üìä –û—Ç–∫—Ä—ã—Ç Logs Dashboard: {url}")
    
    def open_python_cli(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å Python CLI"""
        try:
            script_path = Path(__file__).parent / "src" / "main.py"
            subprocess.Popen([sys.executable, str(script_path)])
            self.log("üêç –ó–∞–ø—É—â–µ–Ω Python CLI")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ CLI: {e}")
    
    def open_collector_code(self):
        """–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª —Å –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–º"""
        try:
            file_path = Path(__file__).parent / "auto_collector_with_api.js"
            if sys.platform == 'win32':
                os.startfile(file_path)
            else:
                subprocess.Popen(['open' if sys.platform == 'darwin' else 'xdg-open', file_path])
            self.log("üìã –û—Ç–∫—Ä—ã—Ç —Ñ–∞–π–ª –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    def open_file(self, filename):
        """–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        try:
            file_path = Path(__file__).parent / filename
            if sys.platform == 'win32':
                os.startfile(file_path)
            else:
                subprocess.Popen(['open' if sys.platform == 'darwin' else 'xdg-open', file_path])
            self.log(f"üìñ –û—Ç–∫—Ä—ã—Ç —Ñ–∞–π–ª: {filename}")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    def log(self, message):
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥"""
        from datetime import datetime
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.log_emitter.log_signal.emit(f"[{timestamp}] {message}")
    
    def append_log(self, message):
        """–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ –ª–æ–≥ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ —Å–∏–≥–Ω–∞–ª–∞)"""
        self.log_text.append(message)
        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
        cursor = self.log_text.textCursor()
        cursor.movePosition(QTextCursor.End)
        self.log_text.setTextCursor(cursor)
    
    def apply_styles(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π"""
        self.setStyleSheet("""
            QMainWindow {
                background-color: #f0f0f0;
            }
            QGroupBox {
                font-weight: bold;
                border: 2px solid #cccccc;
                border-radius: 5px;
                margin-top: 10px;
                padding-top: 10px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px;
            }
            QPushButton {
                background-color: #0078d4;
                color: white;
                border: none;
                padding: 10px;
                border-radius: 5px;
                font-size: 12px;
            }
            QPushButton:hover {
                background-color: #106ebe;
            }
            QPushButton:pressed {
                background-color: #005a9e;
            }
            QLabel {
                color: #333333;
            }
        """)
    
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        reply = QMessageBox.question(
            self, 
            '–í—ã—Ö–æ–¥', 
            "–°–≤–µ—Ä–Ω—É—Ç—å –≤ —Ç—Ä–µ–π –∏–ª–∏ –≤—ã–π—Ç–∏?",
            QMessageBox.Yes | QMessageBox.No | QMessageBox.Cancel,
            QMessageBox.Cancel
        )
        
        if reply == QMessageBox.Yes:
            # –°–≤–µ—Ä–Ω—É—Ç—å –≤ —Ç—Ä–µ–π
            event.ignore()
            self.hide()
            if hasattr(self, 'tray_icon'):
                self.tray_icon.showMessage(
                    "RULETTT",
                    "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–≤–µ—Ä–Ω—É—Ç–æ –≤ —Ç—Ä–µ–π",
                    QSystemTrayIcon.Information,
                    1000
                )
        elif reply == QMessageBox.No:
            # –í—ã—Ö–æ–¥
            self.quit_application()
        else:
            # –û—Ç–º–µ–Ω–∞
            event.ignore()
    
    def quit_application(self):
        """–ü–æ–ª–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.log("üëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        self.stop_all_servers()
        if hasattr(self, 'tray_icon'):
            self.tray_icon.hide()
        QApplication.quit()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    app = QApplication(sys.argv)
    app.setApplicationName("RULETTT")
    app.setOrganizationName("RULETTT Project")
    
    # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
    window = RoulettDesktopApp()
    window.show()
    
    sys.exit(app.exec_())


if __name__ == "__main__":
    main()
