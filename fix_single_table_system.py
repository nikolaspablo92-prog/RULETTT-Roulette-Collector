"""
–§–ò–ö–° –û–°–ù–û–í–ù–û–ô –°–ò–°–¢–ï–ú–´ - –¢–û–õ–¨–ö–û –û–î–ò–ù –°–¢–û–õ
========================================

–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É —á—Ç–æ–±—ã –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–ª–∞ –¢–û–õ–¨–ö–û —Å –æ–¥–Ω–∏–º —Å—Ç–æ–ª–æ–º roulettestura541
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Å—Ç—Ä–æ–≥–æ–º—É —Å–±–æ—Ä—â–∏–∫—É
sys.path.insert(0, str(Path(__file__).parent))
from strict_single_table import SingleTableOnlyCollector


def patch_main_system():
    """–ü–∞—Ç—á–∏–º –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–¥–Ω–∏–º —Å—Ç–æ–ª–æ–º"""
    print("üîß –ü–ê–¢–ß–ò–ù–ì –û–°–ù–û–í–ù–û–ô –°–ò–°–¢–ï–ú–´...")
    print("üéØ –ù–ê–°–¢–†–û–ô–ö–ê –ù–ê –û–î–ò–ù –°–¢–û–õ: roulettestura541")
    
    # –ß–∏—Ç–∞–µ–º main.py
    main_path = Path(__file__).parent / "src" / "main.py"
    if not main_path.exists():
        print(f"‚ùå –§–∞–π–ª {main_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        with open(main_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç —Å—Ç—Ä–æ–≥–æ–≥–æ —Å–±–æ—Ä—â–∏–∫–∞ –≤ –Ω–∞—á–∞–ª–æ
        import_patch = '''
# –ü–ê–¢–ß: –ò–º–ø–æ—Ä—Ç —Å—Ç—Ä–æ–≥–æ–≥–æ —Å–±–æ—Ä—â–∏–∫–∞ –æ–¥–Ω–æ–≥–æ —Å—Ç–æ–ª–∞
import sys
from pathlib import Path
sys.path.insert(0, str(Path(__file__).parent.parent))
try:
    from strict_single_table import SingleTableOnlyCollector
    STRICT_COLLECTOR = SingleTableOnlyCollector("roulettestura541")
    print("‚úÖ –ê–ö–¢–ò–í–ò–†–û–í–ê–ù –°–¢–†–û–ì–ò–ô –†–ï–ñ–ò–ú –û–î–ù–û–ì–û –°–¢–û–õ–ê: roulettestura541")
except ImportError as e:
    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–æ–≥–∏–π —Å–±–æ—Ä—â–∏–∫: {e}")
    STRICT_COLLECTOR = None

'''
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–∞—Ç—á –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤
        if "from src.data_collector import DataCollector" in content:
            content = content.replace(
                "from src.data_collector import DataCollector",
                "from src.data_collector import DataCollector" + import_patch
            )
        
        # –ü–∞—Ç—á–∏–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        real_data_patch = '''
def get_real_data_single_table_only():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¢–û–õ–¨–ö–û —Å –æ–¥–Ω–æ–≥–æ —Å—Ç–æ–ª–∞"""
    print("üéØ –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –¢–û–õ–¨–ö–û –° –°–¢–û–õ–ê roulettestura541")
    
    if STRICT_COLLECTOR:
        try:
            results = STRICT_COLLECTOR.get_single_table_data(50)
            if results:
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¢–û–õ–¨–ö–û —Å —Å—Ç–æ–ª–∞ roulettestura541")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                data_collector = DataCollector()
                saved_count = 0
                
                for result in results:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –Ω—É–∂–Ω–æ–≥–æ —Å—Ç–æ–ª–∞
                        if result.get('table_id') == 'roulettestura541':
                            spin_id = data_collector.add_spin(
                                number=result['number'],
                                timestamp=result['timestamp'],
                                casino_name='Paddy Power + Pragmatic Play Live',
                                table_name='roulettestura541'
                            )
                            saved_count += 1
                        else:
                            print(f"üö´ –ü—Ä–æ–ø—É—â–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —á—É–∂–æ–≥–æ —Å—Ç–æ–ª–∞: {result.get('table_id')}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
                
                print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                show_single_table_stats(results)
                return True
            else:
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–∞")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    else:
        print("‚ùå –°—Ç—Ä–æ–≥–∏–π —Å–±–æ—Ä—â–∏–∫ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        return False

def show_single_table_stats(results):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–¥–Ω–æ–≥–æ —Å—Ç–æ–ª–∞"""
    if not results:
        return
    
    print(f"\\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–¢–û–õ–ê roulettestura541:")
    print("-" * 40)
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    for i, result in enumerate(results[:10], 1):
        time_str = result['timestamp'].strftime("%H:%M:%S")
        print(f"  {i:2d}. {time_str}: {result['number']:2d} ({result['color']})")
    
    # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    colors = {'red': 0, 'black': 0, 'green': 0}
    for result in results:
        colors[result['color']] += 1
    
    total = len(results)
    print(f"\\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤:")
    print(f"  –ö—Ä–∞—Å–Ω—ã–µ: {colors['red']} ({colors['red']/total*100:.1f}%)")
    print(f"  –ß–µ—Ä–Ω—ã–µ: {colors['black']} ({colors['black']/total*100:.1f}%)")
    print(f"  –ó–µ–ª–µ–Ω—ã–µ: {colors['green']} ({colors['green']/total*100:.1f}%)")

'''
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ç—á —Ñ—É–Ω–∫—Ü–∏–π
        content += real_data_patch
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ç—á–µ–Ω—ã–π —Ñ–∞–π–ª
        patched_path = Path(__file__).parent / "src" / "main_single_table.py"
        with open(patched_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–∞—Ç—á–µ–Ω—ã–π —Ñ–∞–π–ª: {patched_path}")
        print("üéØ –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python src/main_single_table.py")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ç—á–∏–Ω–≥–∞: {e}")


def test_patched_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ç—á–µ–Ω—É—é —Å–∏—Å—Ç–µ–º—É"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ê–¢–ß–ï–ù–û–ô –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–≥–∏–π —Å–±–æ—Ä—â–∏–∫
    collector = SingleTableOnlyCollector("roulettestura541")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    results = collector.get_single_table_data(20)
    
    if results:
        print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–ª—É—á–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Å –Ω—É–∂–Ω–æ–≥–æ —Å—Ç–æ–ª–∞
        wrong_table = [r for r in results if r.get('table_id') != 'roulettestura541']
        if wrong_table:
            print(f"‚ùå –ù–ê–ô–î–ï–ù–´ –ß–£–ñ–ò–ï –°–¢–û–õ–´: {len(wrong_table)}")
            for r in wrong_table:
                print(f"   - {r.get('table_id')}")
        else:
            print("‚úÖ –í–°–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –° –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –°–¢–û–õ–ê!")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        colors = {'red': 0, 'black': 0, 'green': 0}
        for result in results:
            colors[result['color']] += 1
        
        print(f"\\nüìä –ö–†–ê–¢–ö–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"–ö—Ä–∞—Å–Ω—ã–µ: {colors['red']}, –ß–µ—Ä–Ω—ã–µ: {colors['black']}, –ó–µ–ª–µ–Ω—ã–µ: {colors['green']}")
        
    else:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")


if __name__ == "__main__":
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –û–î–ù–ò–ú –°–¢–û–õ–û–ú")
    print("=" * 60)
    
    # –ü–∞—Ç—á–∏–º —Å–∏—Å—Ç–µ–º—É
    patch_main_system()
    
    print("\\n" + "=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º
    test_patched_system()
    
    print("\\n" + "=" * 60)
    print("üéØ –ì–û–¢–û–í–û! –¢–µ–ø–µ—Ä—å —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –¢–û–õ–¨–ö–û —Å –æ–¥–Ω–∏–º —Å—Ç–æ–ª–æ–º!")
    print("\\nüìã –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞:")
    print("  python src/main_single_table.py  # –ü–∞—Ç—á–µ–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")  
    print("  python strict_single_table.py    # –°—Ç—Ä–æ–≥–∏–π —Å–±–æ—Ä—â–∏–∫")
    print("\\n‚ö†Ô∏è  –ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å –¥—Ä—É–≥–∏—Ö —Å—Ç–æ–ª–æ–≤!")