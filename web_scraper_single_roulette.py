"""
–í–ï–ë-–°–ö–†–ê–ü–ï–† –î–õ–Ø –û–î–ù–û–ô –ö–û–ù–ö–†–ï–¢–ù–û–ô –†–£–õ–ï–¢–ö–ò
========================================

–≠—Ç–æ—Ç —Å–∫—Ä–∞–ø–µ—Ä –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¢–û–õ–¨–ö–û —Å –æ–¥–Ω–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä—É–ª–µ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—è XPath
"""

import time
from datetime import datetime
from typing import List, Dict
import re
import sqlite3
from pathlib import Path


class SingleRouletteWebScraper:
    """–í–µ–±-—Å–∫—Ä–∞–ø–µ—Ä –¥–ª—è –æ–¥–Ω–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä—É–ª–µ—Ç–∫–∏"""
    
    def __init__(self, target_xpath: str = "/html/body/div[2]/div/div[3]/div[1]/div/div[1]/div/div/div[2]/div[4]"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫—Ä–∞–ø–µ—Ä–∞
        
        Args:
            target_xpath: XPath —ç–ª–µ–º–µ–Ω—Ç–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä—É–ª–µ—Ç–∫–∏
        """
        self.target_xpath = target_xpath
        self.driver = None
        self.db_path = Path(__file__).parent / "data" / "scraped_single_roulette.db"
        self.db_path.parent.mkdir(exist_ok=True)
        self._init_database()
        
        print("üéØ" + "="*60)
        print("   –í–ï–ë-–°–ö–†–ê–ü–ï–† –î–õ–Ø –û–î–ù–û–ô –ö–û–ù–ö–†–ï–¢–ù–û–ô –†–£–õ–ï–¢–ö–ò")
        print(f"   XPath —Ü–µ–ª–∏: {target_xpath[:50]}...")
        print("üéØ" + "="*60)
    
    def _init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        with sqlite3.connect(str(self.db_path)) as conn:
            cursor = conn.cursor()
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS scraped_results (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    number INTEGER NOT NULL,
                    color TEXT NOT NULL,
                    timestamp DATETIME NOT NULL,
                    source TEXT,
                    xpath TEXT
                )
            """)
            conn.commit()
    
    def setup_selenium(self, url: str = None):
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Selenium WebDriver
        
        Args:
            url: URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
        """
        try:
            from selenium import webdriver
            from selenium.webdriver.chrome.options import Options
            from selenium.webdriver.common.by import By
            from selenium.webdriver.support.ui import WebDriverWait
            from selenium.webdriver.support import expected_conditions as EC
            
            print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Selenium WebDriver...")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Chrome
            chrome_options = Options()
            # chrome_options.add_argument('--headless')  # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
            chrome_options.add_argument('--no-sandbox')
            chrome_options.add_argument('--disable-dev-shm-usage')
            chrome_options.add_argument('--disable-blink-features=AutomationControlled')
            
            # –°–æ–∑–¥–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
            self.driver = webdriver.Chrome(options=chrome_options)
            
            if url:
                print(f"üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: {url}")
                self.driver.get(url)
                time.sleep(5)  # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            
            print("‚úÖ Selenium –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except ImportError:
            print("‚ùå Selenium –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install selenium")
            print("   –¢–∞–∫–∂–µ –Ω—É–∂–µ–Ω ChromeDriver: https://chromedriver.chromium.org/")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Selenium: {e}")
            return False
    
    def extract_numbers_from_xpath(self) -> List[Dict]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å–ª–∞ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ XPath
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä—É–ª–µ—Ç–∫–∏
        """
        if not self.driver:
            print("‚ùå WebDriver –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return []
        
        try:
            from selenium.webdriver.common.by import By
            from selenium.webdriver.support.ui import WebDriverWait
            from selenium.webdriver.support import expected_conditions as EC
            
            print(f"üîç –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ XPath: {self.target_xpath}")
            
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
            wait = WebDriverWait(self.driver, 10)
            element = wait.until(
                EC.presence_of_element_located((By.XPATH, self.target_xpath))
            )
            
            print("‚úÖ –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω!")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞
            element_text = element.text
            element_html = element.get_attribute('innerHTML')
            
            print(f"üìä –¢–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞: {element_text[:200]}")
            
            # –ò—â–µ–º –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            children = element.find_elements(By.XPATH, ".//*")
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(children)}")
            
            results = []
            
            # –í–∞—Ä–∏–∞–Ω—Ç 1: –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç
            numbers = self._extract_numbers_from_text(element_text)
            if numbers:
                results.extend(numbers)
            
            # –í–∞—Ä–∏–∞–Ω—Ç 2: –ü–∞—Ä—Å–∏–º HTML
            numbers_from_html = self._extract_numbers_from_html(element_html)
            if numbers_from_html:
                results.extend(numbers_from_html)
            
            # –í–∞—Ä–∏–∞–Ω—Ç 3: –ü–∞—Ä—Å–∏–º –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            for child in children:
                child_text = child.text
                child_class = child.get_attribute('class')
                
                if child_text and child_text.strip():
                    child_numbers = self._extract_numbers_from_text(child_text)
                    if child_numbers:
                        results.extend(child_numbers)
            
            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            unique_results = []
            seen = set()
            for r in results:
                key = (r['number'], r['timestamp'].strftime('%Y-%m-%d %H:%M:%S'))
                if key not in seen:
                    seen.add(key)
                    unique_results.append(r)
            
            print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(unique_results)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return unique_results
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return []
    
    def _extract_numbers_from_text(self, text: str) -> List[Dict]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å–ª–∞ —Ä—É–ª–µ—Ç–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        results = []
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–∏—Å–µ–ª —Ä—É–ª–µ—Ç–∫–∏ (0-36)
        patterns = [
            r'\b([0-9]|[1-2][0-9]|3[0-6])\b',  # –ß–∏—Å–ª–∞ 0-36
            r'#([0-9]|[1-2][0-9]|3[0-6])\b',    # –° —Ä–µ—à–µ—Ç–∫–æ–π
            r'‚Ññ([0-9]|[1-2][0-9]|3[0-6])\b',    # –° –Ω–æ–º–µ—Ä–æ–º
        ]
        
        for pattern in patterns:
            matches = re.findall(pattern, text)
            for match in matches:
                try:
                    number = int(match)
                    if 0 <= number <= 36:
                        color = self._get_color(number)
                        results.append({
                            'number': number,
                            'color': color,
                            'timestamp': datetime.now(),
                            'source': 'web_scraper',
                            'xpath': self.target_xpath
                        })
                except ValueError:
                    continue
        
        return results
    
    def _extract_numbers_from_html(self, html: str) -> List[Dict]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å–ª–∞ —Ä—É–ª–µ—Ç–∫–∏ –∏–∑ HTML"""
        results = []
        
        # –ò—â–µ–º —á–∏—Å–ª–∞ –≤ –∫–ª–∞—Å—Å–∞—Ö, –∞—Ç—Ä–∏–±—É—Ç–∞—Ö –∏ —Ç–µ–∫—Å—Ç–µ
        patterns = [
            r'number["\s:]*([0-9]|[1-2][0-9]|3[0-6])',
            r'result["\s:]*([0-9]|[1-2][0-9]|3[0-6])',
            r'winning["\s:]*([0-9]|[1-2][0-9]|3[0-6])',
        ]
        
        for pattern in patterns:
            matches = re.findall(pattern, html, re.IGNORECASE)
            for match in matches:
                try:
                    number = int(match)
                    if 0 <= number <= 36:
                        color = self._get_color(number)
                        results.append({
                            'number': number,
                            'color': color,
                            'timestamp': datetime.now(),
                            'source': 'web_scraper_html',
                            'xpath': self.target_xpath
                        })
                except ValueError:
                    continue
        
        return results
    
    def _get_color(self, number: int) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–≤–µ—Ç —á–∏—Å–ª–∞"""
        if number == 0:
            return 'green'
        red_numbers = {1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36}
        return 'red' if number in red_numbers else 'black'
    
    def save_results(self, results: List[Dict]) -> int:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        if not results:
            return 0
        
        saved_count = 0
        
        with sqlite3.connect(str(self.db_path)) as conn:
            cursor = conn.cursor()
            
            for result in results:
                try:
                    cursor.execute("""
                        INSERT INTO scraped_results 
                        (number, color, timestamp, source, xpath)
                        VALUES (?, ?, ?, ?, ?)
                    """, (
                        result['number'],
                        result['color'],
                        result['timestamp'],
                        result['source'],
                        result['xpath']
                    ))
                    saved_count += 1
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            
            conn.commit()
        
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        return saved_count
    
    def monitor_roulette(self, url: str, duration_minutes: int = 30, check_interval: int = 30):
        """
        –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä—É–ª–µ—Ç–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        
        Args:
            url: URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ä—É–ª–µ—Ç–∫–æ–π
            duration_minutes: –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            check_interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        print(f"üé∞ –ó–ê–ü–£–°–ö –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –†–£–õ–ï–¢–ö–ò")
        print(f"‚è±Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_minutes} –º–∏–Ω—É—Ç")
        print(f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {check_interval} —Å–µ–∫—É–Ω–¥")
        print("="*60)
        
        if not self.setup_selenium(url):
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Selenium")
            return
        
        start_time = time.time()
        end_time = start_time + (duration_minutes * 60)
        
        last_results = set()
        total_new_results = 0
        
        try:
            while time.time() < end_time:
                print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤... ({datetime.now().strftime('%H:%M:%S')})")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                results = self.extract_numbers_from_xpath()
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                new_results = []
                for result in results:
                    result_key = (result['number'], result['timestamp'].strftime('%Y-%m-%d %H:%M'))
                    if result_key not in last_results:
                        new_results.append(result)
                        last_results.add(result_key)
                
                if new_results:
                    print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(new_results)} –Ω–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
                    for r in new_results:
                        print(f"   {r['number']} ({r['color']})")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
                    saved = self.save_results(new_results)
                    total_new_results += saved
                else:
                    print("   –ù–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                print(f"üìä –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {total_new_results}")
                
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {check_interval} —Å–µ–∫—É–Ω–¥...")
                time.sleep(check_interval)
                
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        finally:
            if self.driver:
                self.driver.quit()
                print("‚úÖ WebDriver –∑–∞–∫—Ä—ã—Ç")
        
        print(f"\nüéâ –ú–û–ù–ò–¢–û–†–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù!")
        print(f"üìä –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ {total_new_results} –Ω–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    def get_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        with sqlite3.connect(str(self.db_path)) as conn:
            cursor = conn.cursor()
            
            cursor.execute("SELECT number, color, timestamp FROM scraped_results ORDER BY timestamp DESC")
            rows = cursor.fetchall()
            
            if not rows:
                return {'total': 0}
            
            colors = {'red': 0, 'black': 0, 'green': 0}
            numbers_count = {}
            
            for number, color, timestamp in rows:
                colors[color] += 1
                numbers_count[number] = numbers_count.get(number, 0) + 1
            
            total = len(rows)
            
            return {
                'total': total,
                'colors': colors,
                'percentages': {
                    'red': round(colors['red']/total*100, 1),
                    'black': round(colors['black']/total*100, 1),
                    'green': round(colors['green']/total*100, 1)
                },
                'most_frequent': sorted(numbers_count.items(), key=lambda x: x[1], reverse=True)[:5],
                'latest_results': [(number, color) for number, color, _ in rows[:10]]
            }
    
    def show_statistics(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        stats = self.get_statistics()
        
        if stats['total'] == 0:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return
        
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–û–ë–†–ê–ù–ù–´–• –î–ê–ù–ù–´–•:")
        print("="*50)
        print(f"–í—Å–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {stats['total']}")
        print(f"–ö—Ä–∞—Å–Ω—ã–µ: {stats['colors']['red']} ({stats['percentages']['red']}%)")
        print(f"–ß–µ—Ä–Ω—ã–µ: {stats['colors']['black']} ({stats['percentages']['black']}%)")
        print(f"–ó–µ–ª–µ–Ω—ã–µ: {stats['colors']['green']} ({stats['percentages']['green']}%)")
        
        print(f"\n–ß–∞—Å—Ç—ã–µ —á–∏—Å–ª–∞:")
        for number, count in stats['most_frequent']:
            print(f"  {number}: {count} —Ä–∞–∑ ({count/stats['total']*100:.1f}%)")
        
        print(f"\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        for i, (number, color) in enumerate(stats['latest_results'], 1):
            print(f"  {i:2d}. {number:2d} ({color})")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üé∞ –í–ï–ë-–°–ö–†–ê–ü–ï–† –î–õ–Ø –û–î–ù–û–ô –ö–û–ù–ö–†–ï–¢–ù–û–ô –†–£–õ–ï–¢–ö–ò")
    print("="*60)
    
    # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∞–ø–µ—Ä —Å –≤–∞—à–∏–º XPath
    scraper = SingleRouletteWebScraper(
        target_xpath="/html/body/div[2]/div/div[3]/div[1]/div/div[1]/div/div/div[2]/div[4]"
    )
    
    print("\nüìã –ú–ï–ù–Æ:")
    print("1. üß™ –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–Ω—É–∂–µ–Ω URL)")
    print("2. üé∞ –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (–Ω—É–∂–µ–Ω URL)")
    print("3. üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    print("4. ‚ÑπÔ∏è  –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    print("0. üö™ –í—ã—Ö–æ–¥")
    
    while True:
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()
        
        if choice == '1':
            url = input("–í–≤–µ–¥–∏—Ç–µ URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ä—É–ª–µ—Ç–∫–æ–π: ").strip()
            if url:
                if scraper.setup_selenium(url):
                    results = scraper.extract_numbers_from_xpath()
                    if results:
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
                        for i, r in enumerate(results[:10], 1):
                            print(f"  {i}. {r['number']} ({r['color']})")
                        
                        save = input("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã? (y/n): ").strip().lower()
                        if save == 'y':
                            scraper.save_results(results)
                    else:
                        print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    
                    scraper.driver.quit()
        
        elif choice == '2':
            url = input("–í–≤–µ–¥–∏—Ç–µ URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ä—É–ª–µ—Ç–∫–æ–π: ").strip()
            if url:
                duration = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30): ").strip()
                duration = int(duration) if duration.isdigit() else 30
                
                interval = input("–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30): ").strip()
                interval = int(interval) if interval.isdigit() else 30
                
                scraper.monitor_roulette(url, duration, interval)
        
        elif choice == '3':
            scraper.show_statistics()
        
        elif choice == '4':
            print("\nüìñ –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ:")
            print("="*60)
            print("1. –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ä—É–ª–µ—Ç–∫–æ–π –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
            print("2. –ù–∞–∂–º–∏—Ç–µ F12 (–æ—Ç–∫—Ä—ã—Ç—å Developer Tools)")
            print("3. –ù–∞–π–¥–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä—É–ª–µ—Ç–∫–∏")
            print("4. –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ ‚Üí Copy ‚Üí Copy XPath")
            print("5. –ò–∑–º–µ–Ω–∏—Ç–µ target_xpath –≤ –∫–æ–¥–µ –Ω–∞ –≤–∞—à XPath")
            print("6. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∞–ø–µ—Ä —Å URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            print("\n‚ö†Ô∏è –¢–†–ï–ë–û–í–ê–ù–ò–Ø:")
            print("- pip install selenium")
            print("- ChromeDriver: https://chromedriver.chromium.org/")
            print("="*60)
        
        elif choice == '0':
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")


if __name__ == "__main__":
    main()