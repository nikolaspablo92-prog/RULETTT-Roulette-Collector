"""
–ë–´–°–¢–†–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê API –ò–ó –ö–û–ù–°–û–õ–ò –ë–†–ê–£–ó–ï–†–ê
=========================================

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–º–æ–≥–∞–µ—Ç –±—ã—Å—Ç—Ä–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–∞–∑–∏–Ω–æ
–∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞.
"""

import json
import urllib.request
import urllib.parse
from pathlib import Path

class QuickAPISetup:
    """–ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ API –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞"""
    
    def __init__(self):
        self.config = {}
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        print("‚ö° –ë–´–°–¢–†–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê API –ò–ó –ë–†–ê–£–ó–ï–†–ê")
        print("=" * 38)
        
        print("""
–®–ê–ì–ò –î–õ–Ø –ü–û–ò–°–ö–ê API –í –ë–†–ê–£–ó–ï–†–ï:

1. üåê –û—Ç–∫—Ä–æ–π—Ç–µ live-—Ä—É–ª–µ—Ç–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ
2. üîß –ù–∞–∂–º–∏—Ç–µ F12 ‚Üí –≤–∫–ª–∞–¥–∫–∞ Network
3. üéØ –ü–æ—Å—Ç–∞–≤—å—Ç–µ —Ñ–∏–ª—å—Ç—Ä XHR/Fetch  
4. üé∞ –ü–æ–Ω–∞–±–ª—é–¥–∞–π—Ç–µ –∑–∞ –∏–≥—Ä–æ–π 2-3 –º–∏–Ω—É—Ç—ã
5. üìã –ù–∞–π–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å—ã —Å –¥–∞–Ω–Ω—ã–º–∏ —Ä—É–ª–µ—Ç–∫–∏

–¢–ò–ü–ò–ß–ù–´–ï –ù–ê–ó–í–ê–ù–ò–Ø API:
‚Ä¢ live_results, game_history, roulette_data
‚Ä¢ api/games/, live/, results/
‚Ä¢ websocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        """)
        
        choice = input("–ì–æ—Ç–æ–≤—ã –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ? (y/n): ").lower()
        if choice != 'y':
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            return
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        self.collect_api_info()
        self.create_config()
        self.test_config()
        self.show_next_steps()
    
    def collect_api_info(self):
        """–°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± API"""
        print("\nüìù –í–í–û–î –ò–ù–§–û–†–ú–ê–¶–ò–ò –û–ë API")
        print("-" * 26)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        casino_name = input("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–∑–∏–Ω–æ: ").strip()
        casino_url = input("URL —Å–∞–π—Ç–∞ –∫–∞–∑–∏–Ω–æ: ").strip()
        
        # –°–æ–±–∏—Ä–∞–µ–º API endpoints
        print("\nüîó API ENDPOINTS")
        print("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ API URLs (–ø–æ –æ–¥–Ω–æ–º—É, Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è):")
        
        endpoints = {}
        counter = 1
        
        while True:
            url = input(f"API URL #{counter} (–∏–ª–∏ Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è): ").strip()
            if not url:
                break
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ API
            print("–ß—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç—Ç–æ—Ç API?")
            print("1. –¢–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä—É–ª–µ—Ç–∫–∏")
            print("2. –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä") 
            print("3. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–ª–∞—Ö")
            print("4. –î—Ä—É–≥–æ–µ")
            
            api_type = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø (1-4): ").strip()
            
            type_names = {
                '1': 'live_results',
                '2': 'history', 
                '3': 'tables',
                '4': 'other'
            }
            
            endpoint_name = type_names.get(api_type, 'api_' + str(counter))
            endpoints[endpoint_name] = url
            
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: {endpoint_name} -> {url}")
            counter += 1
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        print("\nüîê –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´")
        needs_auth = input("API —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é? (y/n): ").lower() == 'y'
        
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Accept': 'application/json'
        }
        
        if needs_auth:
            auth_header = input("Authorization header (–µ—Å–ª–∏ –µ—Å—Ç—å): ").strip()
            if auth_header:
                headers['Authorization'] = auth_header
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.config = {
            'casino_name': casino_name,
            'casino_url': casino_url,
            'connection_method': 'api',
            'api': {
                'base_url': self.extract_base_url(casino_url),
                'endpoints': endpoints,
                'headers': headers,
                'timeout': 10
            },
            'betting': {
                'base_bet': 100,
                'max_bet': 10000,
                'bankroll': 100000
            },
            'safety': {
                'enabled': True,
                'max_daily_loss': 50000
            }
        }
        
        print(f"\n‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è {casino_name}")
        print(f"   üîó {len(endpoints)} API endpoints")
        print(f"   üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {'–î–∞' if needs_auth else '–ù–µ—Ç'}")
    
    def create_config(self):
        """–°–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        print("\nüíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
        print("-" * 23)
        
        try:
            config_path = Path("casino_setup.json")
            
            with open(config_path, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, indent=2, ensure_ascii=False)
            
            print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {config_path}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏
            print("\nüìã –°–û–•–†–ê–ù–ï–ù–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:")
            print(f"   –ö–∞–∑–∏–Ω–æ: {self.config['casino_name']}")
            print(f"   URL: {self.config['casino_url']}")
            print(f"   Endpoints:")
            for name, url in self.config['api']['endpoints'].items():
                print(f"     ‚Ä¢ {name}: {url}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def test_config(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API")
        print("-" * 16)
        
        test_choice = input("–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API —Å–µ–π—á–∞—Å? (y/n): ").lower()
        if test_choice != 'y':
            print("‚è≠Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
            return
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π endpoint
        for name, url in self.config['api']['endpoints'].items():
            print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É—é {name}...")
            
            try:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
                req = urllib.request.Request(url)
                for header, value in self.config['api']['headers'].items():
                    req.add_header(header, value)
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
                with urllib.request.urlopen(req, timeout=5) as response:
                    status_code = response.getcode()
                    content_type = response.headers.get('Content-Type', '')
                    
                    if status_code == 200:
                        print(f"   ‚úÖ {name}: HTTP {status_code}, {content_type}")
                        
                        # –ß–∏—Ç–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é —á–∞—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
                        data = response.read(500).decode('utf-8', errors='ignore')
                        if data:
                            print(f"   üìÑ –î–∞–Ω–Ω—ã–µ: {data[:100]}...")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ JSON
                            if 'json' in content_type.lower():
                                try:
                                    json.loads(data)
                                    print("   üìä –§–æ—Ä–º–∞—Ç: –í–∞–ª–∏–¥–Ω—ã–π JSON")
                                except:
                                    print("   ‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: –ù–µ JSON –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω")
                    else:
                        print(f"   ‚ö†Ô∏è {name}: HTTP {status_code}")
                        
            except urllib.error.HTTPError as e:
                print(f"   ‚ùå {name}: HTTP {e.code} - {e.reason}")
            except urllib.error.URLError as e:
                print(f"   ‚ùå {name}: –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è - {e.reason}")
            except Exception as e:
                print(f"   ‚ùå {name}: {e}")
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    
    def show_next_steps(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏"""
        print("\nüéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò")
        print("-" * 14)
        
        print("""
–§–ê–ô–õ–´ –°–û–ó–î–ê–ù–´:
‚úÖ casino_setup.json - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞–∑–∏–Ω–æ

–ß–¢–û –î–ï–õ–ê–¢–¨ –î–ê–õ–¨–®–ï:

1. üß™ –î–ï–¢–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï:
   python test_connection.py
   
2. üöÄ –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´:
   python src/main.py
   
3. üìä –í –ú–ï–ù–Æ –í–´–ë–ï–†–ò–¢–ï:
   "–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
   
4. üìà –ê–ù–ê–õ–ò–ó –ò –°–¢–†–ê–¢–ï–ì–ò–ò:
   –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–∞—à–∏ API
   –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä—É–ª–µ—Ç–∫–∏

–ü–û–õ–ï–ó–ù–´–ï –ö–û–ú–ê–ù–î–´:
‚Ä¢ python simple_api_finder.py - –ø–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö API
‚Ä¢ python setup_casino.py - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
‚Ä¢ python src/main.py - –æ—Å–Ω–æ–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
        """)
        
        print("üéâ –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("üí° –ï—Å–ª–∏ API –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ Network tab –≤ –±—Ä–∞—É–∑–µ—Ä–µ –µ—â–µ —Ä–∞–∑")
    
    def extract_base_url(self, url):
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—ã–π URL"""
        if not url:
            return ""
        
        if '://' in url:
            parts = url.split('/')
            return '/'.join(parts[:3])
        
        return url


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        setup = QuickAPISetup()
        setup.run()
        
    except KeyboardInterrupt:
        print("\n\nüëã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()