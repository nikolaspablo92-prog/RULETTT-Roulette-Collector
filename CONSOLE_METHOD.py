"""
📊 ИТОГОВОЕ РЕШЕНИЕ - ПОЛУЧИТЬ ДАННЫЕ ПРЯМО СЕЙЧАС!
===================================================

У вас есть CSS селектор вашей рулетки - отлично!
Давайте получим данные ПРЯМО СЕЙЧАС самым простым способом!

🎯 САМЫЙ ПРОСТОЙ СПОСОБ - КОНСОЛЬ БРАУЗЕРА:
============================================

ШАГ 1: Откройте страницу с вашей рулеткой в Chrome

ШАГ 2: Нажмите F12 (откроется Developer Tools)

ШАГ 3: Перейдите на вкладку "Console" (Консоль)

ШАГ 4: Вставьте этот код и нажмите Enter:

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
// 🎯 КОД ДЛЯ ИЗВЛЕЧЕНИЯ ЧИСЕЛ С ВАШЕЙ РУЛЕТКИ

// Ваш CSS селектор
const selector = "#root > div > div.app-container > div.games-slots--kYClr > div > div.game-node--pwxxn > div > div > div.game-table > div.game-table__game-specific > div > div.game-area__history-line--Lkj9A";

// Находим элемент
const element = document.querySelector(selector);

if (element) {
    console.log('✅ Элемент найден!');
    
    // Извлекаем все числа рулетки (0-36)
    const allText = element.innerText + ' ' + element.innerHTML;
    const numbers = allText.match(/\b([0-9]|[1-2][0-9]|3[0-6])\b/g);
    
    if (numbers) {
        // Убираем дубликаты
        const unique = [...new Set(numbers.filter(n => n >= 0 && n <= 36))];
        
        console.log('🎰 Найдено уникальных чисел:', unique.length);
        console.log('📊 Числа:', unique.join(', '));
        
        // Создаем результат для сохранения
        const results = unique.map(num => {
            const n = parseInt(num);
            let color = 'green';
            if (n > 0) {
                const reds = [1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36];
                color = reds.includes(n) ? 'red' : 'black';
            }
            return {number: n, color: color};
        });
        
        console.log('📋 Результаты с цветами:', results);
        
        // Копируем в буфер обмена
        copy(JSON.stringify(results, null, 2));
        console.log('✅ Результаты скопированы в буфер обмена!');
        console.log('💾 Вставьте в текстовый файл (Ctrl+V)');
        
    } else {
        console.log('❌ Числа не найдены');
    }
} else {
    console.log('❌ Элемент не найден');
    console.log('💡 Попробуйте упрощенный селектор:');
    console.log('const selector = ".game-area__history-line";');
}
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

ШАГ 5: Нажмите Ctrl+V в текстовом редакторе
         Данные скопированы!

🎉 РЕЗУЛЬТАТ:
=============

Вы получите JSON с числами и цветами:
[
  {"number": 25, "color": "red"},
  {"number": 14, "color": "red"},
  {"number": 0, "color": "green"},
  ...
]

Эти данные ТОЛЬКО с вашей рулетки!
Никаких смешанных результатов!

💡 АЛЬТЕРНАТИВНЫЕ СЕЛЕКТОРЫ:
============================

Если основной селектор не работает, попробуйте:

// Вариант 1 (упрощенный):
const selector = ".game-area__history-line";

// Вариант 2 (еще проще):
const selector = "[class*='history-line']";

// Вариант 3 (по game-table):
const selector = ".game-table__game-specific";

🔄 МОНИТОРИНГ В РЕАЛЬНОМ ВРЕМЕНИ:
=================================

Для автоматического обновления каждые 30 секунд:

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
// 🔄 АВТОМАТИЧЕСКИЙ МОНИТОРИНГ

const selector = ".game-area__history-line";
let lastResults = [];

setInterval(() => {
    const element = document.querySelector(selector);
    if (element) {
        const allText = element.innerText + ' ' + element.innerHTML;
        const numbers = allText.match(/\b([0-9]|[1-2][0-9]|3[0-6])\b/g);
        
        if (numbers) {
            const unique = [...new Set(numbers)];
            if (JSON.stringify(unique) !== JSON.stringify(lastResults)) {
                console.log(new Date().toLocaleTimeString(), '- Новые результаты:', unique);
                lastResults = unique;
            }
        }
    }
}, 30000); // Каждые 30 секунд

console.log('🔄 Мониторинг запущен! Обновление каждые 30 секунд...');
console.log('⏹️  Для остановки обновите страницу');
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🎯 ПОЧЕМУ ЭТОТ МЕТОД ЛУЧШИЙ:
============================

✅ Работает СРАЗУ (не нужны токены)
✅ Не требует установки (работает в браузере)
✅ ТОЧНО берет данные с вашего элемента
✅ Один стол - гарантированно
✅ Простое копирование результатов
✅ Можно настроить автообновление

❌ Недостатки:
- Требует открытый браузер
- Ручное копирование данных

📊 СОХРАНЕНИЕ ДАННЫХ:
=====================

После копирования результатов:

1. Создайте файл: roulette_data.json
2. Вставьте скопированные данные (Ctrl+V)
3. Используйте эти данные в системе анализа

ИЛИ

1. Вставьте в Excel
2. Преобразуйте в таблицу
3. Анализируйте как удобно

🚀 АВТОМАТИЗАЦИЯ (ЕСЛИ НУЖНА):
==============================

Если нужна полная автоматизация:

1. Обновите токены API → py strict_single_table.py
2. Используйте веб-скрапер → py web_scraper_single_roulette.py

Но для начала используйте КОНСОЛЬНЫЙ МЕТОД!
Это самый быстрый способ получить данные ПРЯМО СЕЙЧАС!

═══════════════════════════════════════════════════════════
🎉 ГОТОВО! КОПИРУЙТЕ КОД В КОНСОЛЬ И ПОЛУЧИТЕ ДАННЫЕ!
═══════════════════════════════════════════════════════════

F12 → Console → Вставить код → Enter → Готово! 🎰✨
"""

if __name__ == "__main__":
    print(__doc__)