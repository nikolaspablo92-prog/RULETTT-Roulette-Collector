"""
–ê–ù–ê–õ–ò–ó–ê–¢–û–† API –ò–ó –ö–û–ù–°–û–õ–ò –ë–†–ê–£–ó–ï–†–ê
=================================

–≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ API –∏–∑ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
–∏ —Å–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ä—É–ª–µ—Ç–∫–∏.
"""

import json
import urllib.request
import urllib.parse
from pathlib import Path

class APIAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö API"""
    
    def __init__(self):
        self.found_apis = []
        self.roulette_apis = []
        
    def analyze_paddypower_apis(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ API –æ—Ç Paddy Power"""
        print("üéØ –ê–ù–ê–õ–ò–ó API PADDY POWER")
        print("=" * 26)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ API –∫–æ—Ç–æ—Ä—ã–µ –º—ã –Ω–∞—à–ª–∏
        apis = {
            "tables_details": {
                "url": "https://games.paddypower.com/api/tables-details",
                "method": "GET",
                "description": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–ª–∞—Ö live-–∫–∞–∑–∏–Ω–æ",
                "priority": "HIGH"
            },
            "pragmatic_statistics": {
                "url": "https://games.pragmaticplaylive.net/api/ui/statisticHistory",
                "method": "GET", 
                "description": "–ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä—É–ª–µ—Ç–∫–∏ (500 –∏–≥—Ä)",
                "priority": "VERY HIGH",
                "params": "tableId=roulettestura541&numberOfGames=500"
            },
            "table_config": {
                "url": "https://games.pragmaticplaylive.net/cgibin/tableconfig.jsp",
                "method": "GET",
                "description": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç–æ–ª–∞ —Ä—É–ª–µ—Ç–∫–∏",
                "priority": "HIGH",
                "params": "table_id=roulettestura541"
            },
            "player_config": {
                "url": "https://games.pragmaticplaylive.net/cgibin/playerconfig.jsp", 
                "method": "GET",
                "description": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–∫–∞",
                "priority": "MEDIUM",
                "params": "table_id=roulettestura541"
            },
            "balance": {
                "url": "https://games.pragmaticplaylive.net/cgibin/balance.jsp",
                "method": "GET", 
                "description": "–ë–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞",
                "priority": "LOW"
            },
            "instant_points": {
                "url": "https://promo.pragmaticplaylive.net/api/v2/fetchinstantpoints",
                "method": "GET",
                "description": "–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –æ—á–∫–∏/–ø—Ä–æ–º–æ",
                "priority": "LOW"
            }
        }
        
        print("üîç –ù–ê–ô–î–ï–ù–ù–´–ï API:")
        for name, api in apis.items():
            print(f"‚úÖ {name}:")
            print(f"   URL: {api['url']}")
            print(f"   –ú–µ—Ç–æ–¥: {api['method']}")
            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {api['description']}")
            print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {api['priority']}")
            if 'params' in api:
                print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {api['params']}")
            print()
        
        return apis
    
    def extract_auth_headers(self):
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        print("üîê –ù–ê–ô–î–ï–ù–ù–´–ï –ó–ê–ì–û–õ–û–í–ö–ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò:")
        
        headers = {
            "pragmatic_session": "_fnL3MJVfFXHrua4kCzrnZt9R2iRB6dtjIwd5J35sO2tbm7gU1n_!-428929514-77fbc135",
            "pragmatic_bearer": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJwcGMxNzM1MjEzMzYzMzU5IiwicHBpZCI6MTI0NDUyMTk1LCJjYyI6IkdCIiwiY3NpZCI6InBwY2RrMDAwMDAwMDMyNTUiLCJqc2lkIjoiX2ZuTDNNSlZmRlhIcnVhNGtDenJuWnQ5UjJpUkI2ZHRqSXdkNUozNXNPMnRibTdnVTFuXyEtNDI4OTI5NTE0LTc3ZmJjMTM1IiwiZXBpZCI6IjU0NjAyNjMzIiwiZW52SWQiOjEsIm9waWQiOjE2NzksImpkIjoiVUsiLCJjdXIiOiJHQlAiLCJzbiI6ImxvbGE3NiIsInBhIjp0cnVlLCJzY3NpZCI6MzI1NSwidWNpZCI6MTM4NDAwMiwiaWF0IjoxNzYwMDYxODY5LCJleHAiOjE3NjAwNjU0Njl9.nztC0hgkedA1yqoNpmOKeknSa1GltLTftuNw7YK8XF57ZnVqeBtGdy-YbiZN33fjbxTDr_aIfPMX2wtt2hn_tw",
            "paddypower_auth": "zPMBVXgcjQ47fQ8OOE+hdHP7JsdZ1UPhODFaPQYlSbA=",
            "paddypower_application": "SRbxTcviudtb943"
        }
        
        print("üîë JSESSIONID:", headers["pragmatic_session"][:50] + "...")
        print("üé´ Bearer Token:", headers["pragmatic_bearer"][:50] + "...")
        print("üè∑Ô∏è PP Auth:", headers["paddypower_auth"])
        print("üì± PP Application:", headers["paddypower_application"])
        
        return headers
    
    def test_api_endpoints(self, apis, headers):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ API endpoints"""
        print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API ENDPOINTS")
        print("=" * 30)
        
        results = {}
        
        for name, api in apis.items():
            print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É—é {name}...")
            
            try:
                # –°—Ç—Ä–æ–∏–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                url = api['url']
                if 'params' in api:
                    url += '?' + api['params']
                
                # –î–æ–±–∞–≤–ª—è–µ–º timestamp –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö API
                if 'pragmaticplaylive.net' in url:
                    separator = '&' if '?' in url else '?'
                    url += f"{separator}JSESSIONID={headers['pragmatic_session']}&ck=1760061900000&game_mode=lobby_desktop"
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
                req = urllib.request.Request(url)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                req.add_header('User-Agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36')
                req.add_header('Accept', 'application/json, text/plain, */*')
                req.add_header('Accept-Language', 'ru,en-US;q=0.9,en;q=0.8,lt;q=0.7')
                
                if 'promo.pragmaticplaylive.net' in url:
                    req.add_header('Authorization', f"Bearer {headers['pragmatic_bearer']}")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
                with urllib.request.urlopen(req, timeout=10) as response:
                    status_code = response.getcode()
                    content_type = response.headers.get('Content-Type', '')
                    data = response.read(1000).decode('utf-8', errors='ignore')
                    
                    results[name] = {
                        'status': status_code,
                        'content_type': content_type,
                        'data_preview': data[:200],
                        'success': status_code == 200
                    }
                    
                    if status_code == 200:
                        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: HTTP {status_code}")
                        print(f"   üìä –¢–∏–ø: {content_type}")
                        print(f"   üìÑ –î–∞–Ω–Ω—ã–µ: {data[:100]}...")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ä—É–ª–µ—Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                        if self.contains_roulette_data(data):
                            print(f"   üé∞ –°–û–î–ï–†–ñ–ò–¢ –î–ê–ù–ù–´–ï –†–£–õ–ï–¢–ö–ò!")
                            self.roulette_apis.append(name)
                    else:
                        print(f"   ‚ö†Ô∏è HTTP {status_code}")
                        
            except urllib.error.HTTPError as e:
                print(f"   ‚ùå HTTP Error {e.code}: {e.reason}")
                if e.code == 401:
                    print(f"   üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
                results[name] = {'status': e.code, 'success': False, 'error': str(e)}
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
                results[name] = {'status': 0, 'success': False, 'error': str(e)}
        
        return results
    
    def contains_roulette_data(self, data):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∞—Ç –ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—É–ª–µ—Ç–∫–µ"""
        roulette_indicators = [
            'roulette', 'wheel', 'spin', 'number', 'red', 'black',
            'winning', 'history', 'result', 'ball', 'sector',
            '"0"', '"1"', '"2"', '"3"', '"4"', '"5"', '"6"', '"7"', '"8"', '"9"'
        ]
        
        data_lower = data.lower()
        found_indicators = [indicator for indicator in roulette_indicators if indicator in data_lower]
        
        return len(found_indicators) >= 2
    
    def create_casino_config(self, apis, headers, results):
        """–°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–∞–∑–∏–Ω–æ"""
        print("\n‚öôÔ∏è –°–û–ó–î–ê–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
        print("=" * 24)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ API
        working_apis = {name: api for name, api in apis.items() 
                       if results.get(name, {}).get('success', False)}
        
        if not working_apis:
            print("‚ùå –ù–µ—Ç —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö API –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return None
        
        config = {
            "casino_name": "Paddy Power + Pragmatic Play Live",
            "connection_method": "api",
            "api": {
                "base_url": "https://games.pragmaticplaylive.net",
                "endpoints": {},
                "headers": {
                    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
                    "Accept": "application/json, text/plain, */*",
                    "Accept-Language": "ru,en-US;q=0.9,en;q=0.8,lt;q=0.7"
                },
                "auth": {
                    "jsessionid": headers["pragmatic_session"],
                    "bearer_token": headers["pragmatic_bearer"],
                    "pp_auth": headers["paddypower_auth"],
                    "pp_application": headers["paddypower_application"]
                }
            },
            "betting": {
                "base_bet": 100,
                "max_bet": 10000,
                "bankroll": 100000
            },
            "safety": {
                "enabled": True,
                "max_daily_loss": 50000
            },
            "table_info": {
                "table_id": "roulettestura541",
                "game_id": "952a1"
            }
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–±–æ—á–∏–µ endpoints
        for name, api in working_apis.items():
            endpoint_path = api['url']
            if 'params' in api:
                endpoint_path += '?' + api['params']
            
            config['api']['endpoints'][name] = {
                'url': endpoint_path,
                'method': api['method'],
                'description': api['description'],
                'priority': api['priority']
            }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        try:
            config_path = Path(__file__).parent / "paddypower_config.json"
            with open(config_path, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
            
            print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {config_path}")
            print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(working_apis)} —Ä–∞–±–æ—á–∏—Ö API")
            print(f"üé∞ –†—É–ª–µ—Ç–æ—á–Ω—ã—Ö API: {len(self.roulette_apis)}")
            
            return config
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return None
    
    def show_usage_instructions(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
        print("\nüìã –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ")
        print("=" * 30)
        
        print("""
üéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:

1. üìÅ –û–ë–ù–û–í–ò–¢–ï –û–°–ù–û–í–ù–£–Æ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Æ:
   cp paddypower_config.json casino_setup.json

2. üß™ –ü–†–û–¢–ï–°–¢–ò–†–£–ô–¢–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï:
   python test_connection.py

3. üöÄ –ó–ê–ü–£–°–¢–ò–¢–ï –°–ò–°–¢–ï–ú–£:
   python src/main.py

4. üìä –í –ú–ï–ù–Æ –í–´–ë–ï–†–ò–¢–ï:
   "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏" ‚Üí "–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"

‚ö†Ô∏è –í–ê–ñ–ù–û:
‚Ä¢ –¢–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–º–µ—é—Ç —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
‚Ä¢ –û–±–Ω–æ–≤–ª—è–π—Ç–µ –∏—Ö –∫–∞–∂–¥—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤
‚Ä¢ –ù–µ –¥–µ–ª–∞–π—Ç–µ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã

üîß –ù–ê–°–¢–†–û–ô–ö–ê –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–Ø:
–°–æ–∑–¥–∞–π—Ç–µ —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
–∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥.
        """)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞"""
        print("üîç –ê–ù–ê–õ–ò–ó–ê–¢–û–† API –ò–ó –ö–û–ù–°–û–õ–ò –ë–†–ê–£–ó–ï–†–ê")
        print("=" * 38)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ API
        apis = self.analyze_paddypower_apis()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        headers = self.extract_auth_headers()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º API
        results = self.test_api_endpoints(apis, headers)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = self.create_casino_config(apis, headers, results)
        
        if config:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            self.show_usage_instructions()
            
            print("\nüéâ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
            print("–ù–∞–π–¥–µ–Ω—ã —Ä–∞–±–æ—á–∏–µ API –¥–ª—è Paddy Power + Pragmatic Play!")
        else:
            print("\nüòû –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        analyzer = APIAnalyzer()
        analyzer.run()
        
    except KeyboardInterrupt:
        print("\n\nüëã –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()