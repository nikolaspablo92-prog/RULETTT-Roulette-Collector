"""
ü§ñ –ë–æ—Ç-—Å–∏–º—É–ª—è—Ç–æ—Ä —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
–≠–º—É–ª—è—Ü–∏—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±—Ö–æ–¥–∞ anti-bot —Å–∏—Å—Ç–µ–º
"""

import random
import time
import asyncio
import json
from datetime import datetime
from typing import Dict, List, Tuple, Optional
import math


class HumanBehaviorSimulator:
    """–°–∏–º—É–ª—è—Ç–æ—Ä —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è"""
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–æ–≤–µ–¥–µ–Ω–∏—è
    CONFIG = {
        "delays": {
            "min_action": 0.5,          # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏ (—Å–µ–∫)
            "max_action": 3.5,          # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏ (—Å–µ–∫)
            "thinking_mean": 0.8,       # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è "—Ä–∞–∑–¥—É–º–∏–π" (—Å–µ–∫)
            "thinking_stddev": 0.3,     # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–∑–¥—É–º–∏–π
            "reading_per_word": 0.15,   # –í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ (—Å–µ–∫)
        },
        "mouse": {
            "move_steps": (20, 40),     # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –º—ã—à–∏
            "jitter_range": (-2, 2),    # –î–∏–∞–ø–∞–∑–æ–Ω –º–∏–∫—Ä–æ-–¥—Ä–æ–∂–∞–Ω–∏—è (–ø–∏–∫—Å–µ–ª–∏)
            "step_delay": (0.01, 0.03), # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏ (—Å–µ–∫)
            "overshoot_chance": 0.15,   # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–º–∞—Ö–Ω—É—Ç—å—Å—è –∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            "curve_factor": 0.3,        # –§–∞–∫—Ç–æ—Ä –∏–∑–≥–∏–±–∞ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ (0-1)
        },
        "scroll": {
            "speed_range": (100, 300),  # –°–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ (–ø–∏–∫—Å/—Å–µ–∫)
            "pause_chance": 0.3,        # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è "—á—Ç–µ–Ω–∏—è"
            "pause_duration": (1, 4),   # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—É–∑—ã (—Å–µ–∫)
            "back_scroll_chance": 0.15, # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∏—Ç—å –Ω–∞–∑–∞–¥
            "momentum": 0.8,            # –ò–Ω–µ—Ä—Ü–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ (0-1)
        },
        "click": {
            "hover_before": 0.7,        # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞–≤–µ—Å—Ç–∏ –∫—É—Ä—Å–æ—Ä –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º
            "hover_duration": (0.3, 1.5),# –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞–≤–µ–¥–µ–Ω–∏—è (—Å–µ–∫)
            "double_check": 0.3,        # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞–≤–µ—Å—Ç–∏ –∫—É—Ä—Å–æ—Ä –¥–≤–∞–∂–¥—ã
            "miss_rate": 0.05,          # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–º–∞—Ö–∞
            "miss_correction": (0.1, 0.3),# –í—Ä–µ–º—è –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏—é –ø—Ä–æ–º–∞—Ö–∞ (—Å–µ–∫)
        },
        "typing": {
            "wpm_range": (40, 80),      # –°–ª–æ–≤–∞ –≤ –º–∏–Ω—É—Ç—É
            "typo_rate": 0.03,          # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ–ø–µ—á–∞—Ç–∫–∏
            "typo_correction_delay": (0.2, 0.5),  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
            "pause_on_punctuation": True,  # –ü–∞—É–∑–∞ –Ω–∞ –∑–Ω–∞–∫–∞—Ö –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
            "punctuation_pause": (0.2, 0.5),  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—É–∑—ã
        }
    }
    
    def __init__(self, config: Dict = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞
        
        Args:
            config: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        """
        if config:
            self._update_config(config)
        
        self.action_history = []
        self.session_start = datetime.now()
        
        print("‚úÖ –°–∏–º—É–ª—è—Ç–æ—Ä —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _update_config(self, config: Dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        for category, settings in config.items():
            if category in self.CONFIG:
                self.CONFIG[category].update(settings)
    
    # ============================================
    # –í–†–ï–ú–ï–ù–ù–´–ï –ó–ê–î–ï–†–ñ–ö–ò
    # ============================================
    
    def human_delay(self, base_delay: float = None) -> float:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        
        Args:
            base_delay: –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω–∞—è)
        
        Returns:
            –í—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        if base_delay is None:
            base_delay = random.uniform(
                self.CONFIG["delays"]["min_action"],
                self.CONFIG["delays"]["max_action"]
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º "—Ä–∞–∑–¥—É–º—å—è" —Å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
        thinking_delay = random.gauss(
            self.CONFIG["delays"]["thinking_mean"],
            self.CONFIG["delays"]["thinking_stddev"]
        )
        
        total_delay = max(0.1, base_delay + thinking_delay)
        return total_delay
    
    def reading_delay(self, text: str) -> float:
        """
        –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è "—á—Ç–µ–Ω–∏—è" —Ç–µ–∫—Å—Ç–∞
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è
        
        Returns:
            –í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        word_count = len(text.split())
        reading_time = word_count * self.CONFIG["delays"]["reading_per_word"]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —á–∏—Ç–∞—é—Ç –±—ã—Å—Ç—Ä–µ–µ/–º–µ–¥–ª–µ–Ω–Ω–µ–µ)
        variance = random.uniform(0.8, 1.3)
        return reading_time * variance
    
    async def wait_human(self, delay: float = None):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        
        Args:
            delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–µ—Å–ª–∏ None, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        """
        if delay is None:
            delay = self.human_delay()
        
        await asyncio.sleep(delay)
    
    # ============================================
    # –î–í–ò–ñ–ï–ù–ò–ï –ú–´–®–ò
    # ============================================
    
    def bezier_curve(self, start: Tuple[float, float], 
                    end: Tuple[float, float], 
                    control: Tuple[float, float], 
                    t: float) -> Tuple[float, float]:
        """
        –ö–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è –∫—Ä–∏–≤–∞—è –ë–µ–∑—å–µ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
        
        Args:
            start: –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ (x, y)
            end: –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ (x, y)
            control: –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ (x, y)
            t: –ü–∞—Ä–∞–º–µ—Ç—Ä –∫—Ä–∏–≤–æ–π (0-1)
        
        Returns:
            –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ –Ω–∞ –∫—Ä–∏–≤–æ–π
        """
        x = (1 - t)**2 * start[0] + 2 * (1 - t) * t * control[0] + t**2 * end[0]
        y = (1 - t)**2 * start[1] + 2 * (1 - t) * t * control[1] + t**2 * end[1]
        return (x, y)
    
    def generate_mouse_path(self, start_x: float, start_y: float, 
                           end_x: float, end_y: float) -> List[Tuple[float, float]]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
        
        Args:
            start_x, start_y: –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
            end_x, end_y: –ö–æ–Ω–µ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
        
        Returns:
            –°–ø–∏—Å–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        """
        steps = random.randint(*self.CONFIG["mouse"]["move_steps"])
        
        # –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –¥–ª—è –∫—Ä–∏–≤–æ–π –ë–µ–∑—å–µ (—Å–æ–∑–¥–∞—ë—Ç –∏–∑–≥–∏–±)
        curve_factor = self.CONFIG["mouse"]["curve_factor"]
        mid_x = (start_x + end_x) / 2 + random.uniform(-100, 100) * curve_factor
        mid_y = (start_y + end_y) / 2 + random.uniform(-100, 100) * curve_factor
        
        path = []
        for i in range(steps + 1):
            t = i / steps
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ç–æ—á–∫—É –Ω–∞ –∫—Ä–∏–≤–æ–π –ë–µ–∑—å–µ
            x, y = self.bezier_curve(
                (start_x, start_y),
                (end_x, end_y),
                (mid_x, mid_y),
                t
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–∏–∫—Ä–æ-–¥—Ä–æ–∂–∞–Ω–∏–µ
            jitter_x = random.uniform(*self.CONFIG["mouse"]["jitter_range"])
            jitter_y = random.uniform(*self.CONFIG["mouse"]["jitter_range"])
            
            path.append((x + jitter_x, y + jitter_y))
        
        # –í–æ–∑–º–æ–∂–Ω—ã–π –ø—Ä–æ–º–∞—Ö —Å –∫–æ—Ä—Ä–µ–∫—Ü–∏–µ–π
        if random.random() < self.CONFIG["mouse"]["overshoot_chance"]:
            overshoot_x = end_x + random.uniform(-10, 10)
            overshoot_y = end_y + random.uniform(-10, 10)
            path.append((overshoot_x, overshoot_y))
            path.append((end_x, end_y))  # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è
        
        return path
    
    async def move_mouse_human(self, page, target_x: float, target_y: float, 
                              current_x: float = 0, current_y: float = 0):
        """
        –î–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏ —Å —ç–º—É–ª—è—Ü–∏–µ–π —á–µ–ª–æ–≤–µ–∫–∞ (–¥–ª—è Puppeteer/Playwright)
        
        Args:
            page: –û–±—ä–µ–∫—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±—Ä–∞—É–∑–µ—Ä–∞
            target_x, target_y: –¶–µ–ª–µ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            current_x, current_y: –¢–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        """
        path = self.generate_mouse_path(current_x, current_y, target_x, target_y)
        
        for x, y in path:
            await page.mouse.move(x, y)
            delay = random.uniform(*self.CONFIG["mouse"]["step_delay"])
            await asyncio.sleep(delay)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        self.action_history.append({
            "action": "mouse_move",
            "from": (current_x, current_y),
            "to": (target_x, target_y),
            "timestamp": datetime.now().isoformat(),
            "path_length": len(path)
        })
    
    # ============================================
    # –ö–õ–ò–ö–ò
    # ============================================
    
    async def click_human(self, page, element_selector: str = None, 
                         x: float = None, y: float = None):
        """
        –ö–ª–∏–∫ —Å —ç–º—É–ª—è—Ü–∏–µ–π —á–µ–ª–æ–≤–µ–∫–∞
        
        Args:
            page: –û–±—ä–µ–∫—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±—Ä–∞—É–∑–µ—Ä–∞
            element_selector: CSS —Å–µ–ª–µ–∫—Ç–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è x, y)
            x, y: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–∏–∫–∞ (–µ—Å–ª–∏ element_selector –Ω–µ —É–∫–∞–∑–∞–Ω)
        """
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —ç–ª–µ–º–µ–Ω—Ç–∞
        if element_selector:
            element = await page.query_selector(element_selector)
            if not element:
                print(f"‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {element_selector}")
                return
            
            box = await element.bounding_box()
            if not box:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —ç–ª–µ–º–µ–Ω—Ç–∞")
                return
            
            # –ö–ª–∏–∫–∞–µ–º –≤ —Å–ª—É—á–∞–π–Ω—É—é —Ç–æ—á–∫—É –≤–Ω—É—Ç—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
            target_x = box['x'] + random.uniform(box['width'] * 0.2, box['width'] * 0.8)
            target_y = box['y'] + random.uniform(box['height'] * 0.2, box['height'] * 0.8)
        else:
            target_x, target_y = x, y
        
        # –ù–∞–≤–µ–¥–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º
        if random.random() < self.CONFIG["click"]["hover_before"]:
            await self.move_mouse_human(page, target_x, target_y)
            hover_duration = random.uniform(*self.CONFIG["click"]["hover_duration"])
            await asyncio.sleep(hover_duration)
            
            # –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–Ω–∞–≤–µ—Å—Ç–∏ –∫—É—Ä—Å–æ—Ä —Å–Ω–æ–≤–∞)
            if random.random() < self.CONFIG["click"]["double_check"]:
                await page.mouse.move(target_x - 5, target_y - 5)
                await asyncio.sleep(0.1)
                await page.mouse.move(target_x, target_y)
        else:
            await self.move_mouse_human(page, target_x, target_y)
        
        # –ü—Ä–æ–º–∞—Ö —Å –∫–æ—Ä—Ä–µ–∫—Ü–∏–µ–π
        if random.random() < self.CONFIG["click"]["miss_rate"]:
            miss_x = target_x + random.uniform(-15, 15)
            miss_y = target_y + random.uniform(-15, 15)
            await page.mouse.move(miss_x, miss_y)
            correction_delay = random.uniform(*self.CONFIG["click"]["miss_correction"])
            await asyncio.sleep(correction_delay)
            await page.mouse.move(target_x, target_y)
        
        # –ö–ª–∏–∫ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –º–µ–∂–¥—É –Ω–∞–∂–∞—Ç–∏–µ–º –∏ –æ—Ç–ø—É—Å–∫–∞–Ω–∏–µ–º
        await page.mouse.down()
        await asyncio.sleep(random.uniform(0.05, 0.15))
        await page.mouse.up()
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.action_history.append({
            "action": "click",
            "element": element_selector,
            "coordinates": (target_x, target_y),
            "timestamp": datetime.now().isoformat()
        })
        
        print(f"üñ±Ô∏è –ö–ª–∏–∫: {element_selector or f'({target_x}, {target_y})'}")
    
    # ============================================
    # –ü–†–û–ö–†–£–¢–ö–ê
    # ============================================
    
    async def scroll_human(self, page, distance: int, direction: str = "down"):
        """
        –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å —ç–º—É–ª—è—Ü–∏–µ–π —á–µ–ª–æ–≤–µ–∫–∞
        
        Args:
            page: –û–±—ä–µ–∫—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±—Ä–∞—É–∑–µ—Ä–∞
            distance: –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ (–ø–∏–∫—Å–µ–ª–∏)
            direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ("down" –∏–ª–∏ "up")
        """
        scroll_multiplier = -1 if direction == "down" else 1
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –Ω–∞ —á–∞—Å—Ç–∏
        chunks = []
        remaining = abs(distance)
        
        while remaining > 0:
            chunk_size = min(random.randint(50, 200), remaining)
            chunks.append(chunk_size * scroll_multiplier)
            remaining -= chunk_size
            
            # –í–æ–∑–º–æ–∂–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è "—á—Ç–µ–Ω–∏—è"
            if random.random() < self.CONFIG["scroll"]["pause_chance"]:
                pause = random.uniform(*self.CONFIG["scroll"]["pause_duration"])
                chunks.append(("pause", pause))
        
        # –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –Ω–∞–∑–∞–¥
        if random.random() < self.CONFIG["scroll"]["back_scroll_chance"]:
            back_distance = random.randint(50, 150) * -scroll_multiplier
            chunks.append(back_distance)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
        for chunk in chunks:
            if isinstance(chunk, tuple) and chunk[0] == "pause":
                await asyncio.sleep(chunk[1])
            else:
                await page.evaluate(f"window.scrollBy(0, {chunk})")
                
                # –ò–Ω–µ—Ä—Ü–∏—è - –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ü—É
                speed = random.uniform(*self.CONFIG["scroll"]["speed_range"])
                delay = abs(chunk) / speed * self.CONFIG["scroll"]["momentum"]
                await asyncio.sleep(delay)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.action_history.append({
            "action": "scroll",
            "distance": distance,
            "direction": direction,
            "chunks": len([c for c in chunks if not isinstance(c, tuple)]),
            "timestamp": datetime.now().isoformat()
        })
        
        print(f"üìú –ü—Ä–æ–∫—Ä—É—Ç–∫–∞: {distance}px {direction}")
    
    # ============================================
    # –í–í–û–î –¢–ï–ö–°–¢–ê
    # ============================================
    
    async def type_human(self, page, selector: str, text: str):
        """
        –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å —ç–º—É–ª—è—Ü–∏–µ–π —á–µ–ª–æ–≤–µ–∫–∞
        
        Args:
            page: –û–±—ä–µ–∫—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±—Ä–∞—É–∑–µ—Ä–∞
            selector: CSS —Å–µ–ª–µ–∫—Ç–æ—Ä –ø–æ–ª—è –≤–≤–æ–¥–∞
            text: –¢–µ–∫—Å—Ç –¥–ª—è –≤–≤–æ–¥–∞
        """
        # –§–æ–∫—É—Å –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–µ
        await page.focus(selector)
        await asyncio.sleep(random.uniform(0.2, 0.5))
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏ (—Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É)
        wpm = random.uniform(*self.CONFIG["typing"]["wpm_range"])
        chars_per_second = (wpm * 5) / 60  # –°—Ä–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ = 5 —Å–∏–º–≤–æ–ª–æ–≤
        
        typed_text = ""
        i = 0
        
        while i < len(text):
            char = text[i]
            
            # –û–ø–µ—á–∞—Ç–∫–∞
            if random.random() < self.CONFIG["typing"]["typo_rate"]:
                # –í–≤–æ–¥–∏–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª
                wrong_char = random.choice("qwertyuiopasdfghjklzxcvbnm")
                await page.keyboard.press(wrong_char)
                typed_text += wrong_char
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
                correction_delay = random.uniform(*self.CONFIG["typing"]["typo_correction_delay"])
                await asyncio.sleep(correction_delay)
                
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º (Backspace)
                await page.keyboard.press("Backspace")
                typed_text = typed_text[:-1]
                await asyncio.sleep(0.1)
            
            # –í–≤–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª
            await page.keyboard.press(char)
            typed_text += char
            
            # –ü–∞—É–∑–∞ –Ω–∞ –∑–Ω–∞–∫–∞—Ö –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
            if self.CONFIG["typing"]["pause_on_punctuation"] and char in ".,!?;:":
                pause = random.uniform(*self.CONFIG["typing"]["punctuation_pause"])
                await asyncio.sleep(pause)
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏
            delay = 1 / chars_per_second
            variance = random.uniform(0.5, 1.5)
            await asyncio.sleep(delay * variance)
            
            i += 1
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.action_history.append({
            "action": "type",
            "selector": selector,
            "text_length": len(text),
            "wpm": wpm,
            "timestamp": datetime.now().isoformat()
        })
        
        print(f"‚å®Ô∏è –í–≤–µ–¥—ë–Ω —Ç–µ–∫—Å—Ç: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤ ({wpm:.0f} WPM)")
    
    # ============================================
    # –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –õ–û–ì–ò
    # ============================================
    
    def get_session_stats(self) -> Dict:
        """
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –¥–µ–π—Å—Ç–≤–∏–π
        """
        action_counts = {}
        for action in self.action_history:
            action_type = action["action"]
            action_counts[action_type] = action_counts.get(action_type, 0) + 1
        
        session_duration = (datetime.now() - self.session_start).total_seconds()
        
        return {
            "session_start": self.session_start.isoformat(),
            "duration_seconds": session_duration,
            "total_actions": len(self.action_history),
            "action_counts": action_counts,
            "actions_per_minute": len(self.action_history) / (session_duration / 60) if session_duration > 0 else 0
        }
    
    def export_activity_log(self, filepath: str):
        """
        –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ JSON
        
        Args:
            filepath: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        """
        data = {
            "session_stats": self.get_session_stats(),
            "action_history": self.action_history,
            "config": self.CONFIG
        }
        
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        
        print(f"üìÅ –õ–æ–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {filepath}")


# ============================================
# –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
# ============================================

async def demo_human_simulation():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è"""
    
    print("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
    print("ü§ñ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–ú–£–õ–Ø–¢–û–†–ê –ß–ï–õ–û–í–ï–ß–ï–°–ö–û–ì–û –ü–û–í–ï–î–ï–ù–ò–Ø")
    print("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
    
    simulator = HumanBehaviorSimulator()
    
    # –ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–µ—Ä–∂–µ–∫
    print("\n1Ô∏è‚É£ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏:")
    for i in range(3):
        delay = simulator.human_delay()
        print(f"   –ó–∞–¥–µ—Ä–∂–∫–∞ {i+1}: {delay:.2f} —Å–µ–∫")
    
    # –ü—Ä–∏–º–µ—Ä —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –º—ã—à–∏
    print("\n2Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –º—ã—à–∏:")
    path = simulator.generate_mouse_path(0, 0, 500, 300)
    print(f"   –û—Ç (0, 0) –¥–æ (500, 300)")
    print(f"   –¢–æ—á–µ–∫ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏: {len(path)}")
    print(f"   –ü–µ—Ä–≤—ã–µ 3 —Ç–æ—á–∫–∏: {path[:3]}")
    print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Ç–æ—á–∫–∏: {path[-3:]}")
    
    # –ü—Ä–∏–º–µ—Ä –∑–∞–¥–µ—Ä–∂–∫–∏ —á—Ç–µ–Ω–∏—è
    print("\n3Ô∏è‚É£ –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è:")
    text = "–≠—Ç–æ –ø—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —á—Ç–µ–Ω–∏—è"
    reading_time = simulator.reading_delay(text)
    print(f"   –¢–µ–∫—Å—Ç: '{text}'")
    print(f"   –°–ª–æ–≤: {len(text.split())}")
    print(f"   –í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è: {reading_time:.2f} —Å–µ–∫")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏
    print("\n4Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏:")
    stats = simulator.get_session_stats()
    print(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {stats['duration_seconds']:.2f} —Å–µ–∫")
    print(f"   –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {stats['total_actions']}")
    
    print("\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
    print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    asyncio.run(demo_human_simulation())
