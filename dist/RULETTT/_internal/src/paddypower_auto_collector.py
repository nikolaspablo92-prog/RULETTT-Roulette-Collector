"""
üé∞ PADDYPOWER –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ö–û–õ–õ–ï–ö–¢–û–† –° –ê–ù–¢–ò-–î–ï–¢–ï–ö–¢–û–ú
========================================================

–ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è:
- –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω—Ç–∏-–¥–µ—Ç–µ–∫—Ç (fingerprints, User-Agent, canvas/WebGL spoofing)
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç (–ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –∏–∑ .env)
- –û–±—Ä–∞–±–æ—Ç–∫–∞ cookies –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π
- –û–±—Ö–æ–¥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ø–æ–ø–∞–ø–æ–≤
- –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ä—É–ª–µ—Ç–∫–∞–º (–∞–≤—Ç–æ–ø–æ–∏—Å–∫ –∏–≥—Ä—ã)
- –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö

–ê–≤—Ç–æ—Ä: RULETTT Team
–í–µ—Ä—Å–∏—è: 3.0 (Enhanced Anti-Detect)
"""

import asyncio
import json
import random
import os
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Optional
import argparse

try:
    from pyppeteer import launch
    from pyppeteer.page import Page
    from pyppeteer.browser import Browser
    PYPPETEER_AVAILABLE = True
except ImportError:
    PYPPETEER_AVAILABLE = False
    print("‚ö†Ô∏è pyppeteer –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pyppeteer")

try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    print("‚ö†Ô∏è python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")

try:
    from bot_simulator import HumanBehaviorSimulator
    SIMULATOR_AVAILABLE = True
except ImportError:
    SIMULATOR_AVAILABLE = False
    print("‚ö†Ô∏è bot_simulator –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–∏–º—É–ª—è—Ü–∏—è —á–µ–ª–æ–≤–µ–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞")


class AntiDetectBrowser:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω—Ç–∏-–¥–µ—Ç–µ–∫—Ç –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞"""
    
    # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ User-Agents (–æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ 2025)
    USER_AGENTS = [
        # Chrome Windows
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36',
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36',
        
        # Chrome Mac
        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36',
        
        # Firefox Windows
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:122.0) Gecko/20100101 Firefox/122.0',
        
        # Edge
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0',
    ]
    
    # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
    SCREEN_RESOLUTIONS = [
        {'width': 1920, 'height': 1080},
        {'width': 1366, 'height': 768},
        {'width': 1536, 'height': 864},
        {'width': 1440, 'height': 900},
        {'width': 2560, 'height': 1440},
    ]
    
    # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —è–∑—ã–∫–∏
    LANGUAGES = [
        'en-US,en;q=0.9',
        'en-GB,en;q=0.9',
        'en-US,en;q=0.9,ru;q=0.8',
    ]
    
    # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    PLATFORMS = ['Win32', 'MacIntel', 'Linux x86_64']
    
    @staticmethod
    def get_random_fingerprint() -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ fingerprint"""
        resolution = random.choice(AntiDetectBrowser.SCREEN_RESOLUTIONS)
        
        return {
            'userAgent': random.choice(AntiDetectBrowser.USER_AGENTS),
            'viewport': resolution,
            'language': random.choice(AntiDetectBrowser.LANGUAGES),
            'platform': random.choice(AntiDetectBrowser.PLATFORMS),
            'timezone': 'Europe/London',  # Paddypower - UK
            'webgl_vendor': 'Google Inc. (NVIDIA)',
            'webgl_renderer': 'ANGLE (NVIDIA GeForce GTX 1660 Ti Direct3D11 vs_5_0 ps_5_0)',
        }
    
    @staticmethod
    async def apply_stealth(page: Page, fingerprint: Dict):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–Ω—Ç–∏-–¥–µ—Ç–µ–∫—Ç —Å–∫—Ä–∏–ø—Ç–æ–≤ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        
        print("üõ°Ô∏è –ü—Ä–∏–º–µ–Ω—è—é –∞–Ω—Ç–∏-–¥–µ—Ç–µ–∫—Ç –∑–∞—â–∏—Ç—É...")
        
        # 1. –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–ª–∞–≥–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        await page.evaluateOnNewDocument('''() => {
            // –£–¥–∞–ª—è–µ–º webdriver
            Object.defineProperty(navigator, 'webdriver', {
                get: () => false
            });
            
            // –ú–∞—Å–∫–∏—Ä—É–µ–º permissions
            const originalQuery = window.navigator.permissions.query;
            window.navigator.permissions.query = (parameters) => (
                parameters.name === 'notifications' ?
                    Promise.resolve({ state: Notification.permission }) :
                    originalQuery(parameters)
            );
            
            // –ú–∞—Å–∫–∏—Ä—É–µ–º –ø–ª–∞–≥–∏–Ω—ã
            Object.defineProperty(navigator, 'plugins', {
                get: () => [1, 2, 3, 4, 5]
            });
            
            // –ú–∞—Å–∫–∏—Ä—É–µ–º —è–∑—ã–∫–∏
            Object.defineProperty(navigator, 'languages', {
                get: () => ['en-US', 'en']
            });
        }''')
        
        # 2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ User-Agent –∏ Platform
        await page.evaluateOnNewDocument(f'''() => {{
            Object.defineProperty(navigator, 'userAgent', {{
                get: () => '{fingerprint["userAgent"]}'
            }});
            
            Object.defineProperty(navigator, 'platform', {{
                get: () => '{fingerprint["platform"]}'
            }});
            
            Object.defineProperty(navigator, 'hardwareConcurrency', {{
                get: () => {random.randint(4, 16)}
            }});
            
            Object.defineProperty(navigator, 'deviceMemory', {{
                get: () => {random.choice([4, 8, 16])}
            }});
        }}''')
        
        # 3. Canvas fingerprint spoofing (–ª–µ–≥–∫–∏–µ —à—É–º—ã)
        await page.evaluateOnNewDocument('''() => {
            const originalToDataURL = HTMLCanvasElement.prototype.toDataURL;
            HTMLCanvasElement.prototype.toDataURL = function(type) {
                const context = this.getContext('2d');
                const imageData = context.getImageData(0, 0, this.width, this.height);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –º–∏–∫—Ä–æ-—à—É–º (–Ω–µ–≤–∏–¥–∏–º—ã–π –≥–ª–∞–∑—É, –Ω–æ –º–µ–Ω—è–µ—Ç fingerprint)
                for (let i = 0; i < imageData.data.length; i += 4) {
                    if (Math.random() < 0.001) {
                        imageData.data[i] = Math.min(255, imageData.data[i] + Math.random() * 2);
                    }
                }
                
                context.putImageData(imageData, 0, 0);
                return originalToDataURL.apply(this, arguments);
            };
        }''')
        
        # 4. WebGL spoofing
        await page.evaluateOnNewDocument(f'''() => {{
            const getParameter = WebGLRenderingContext.prototype.getParameter;
            WebGLRenderingContext.prototype.getParameter = function(parameter) {{
                if (parameter === 37445) {{
                    return '{fingerprint["webgl_vendor"]}';
                }}
                if (parameter === 37446) {{
                    return '{fingerprint["webgl_renderer"]}';
                }}
                return getParameter.apply(this, arguments);
            }};
        }}''')
        
        # 5. Chrome runtime injection
        await page.evaluateOnNewDocument('''() => {
            window.chrome = {
                runtime: {},
                loadTimes: function() {},
                csi: function() {},
                app: {}
            };
        }''')
        
        # 6. Battery API spoofing
        await page.evaluateOnNewDocument('''() => {
            Object.defineProperty(navigator, 'getBattery', {
                value: () => Promise.resolve({
                    charging: true,
                    chargingTime: 0,
                    dischargingTime: Infinity,
                    level: 1,
                    addEventListener: () => {},
                    removeEventListener: () => {}
                })
            });
        }''')
        
        # 7. MediaDevices spoofing
        await page.evaluateOnNewDocument('''() => {
            navigator.mediaDevices.enumerateDevices = () => Promise.resolve([
                { kind: 'audioinput', deviceId: 'default', label: '', groupId: '' },
                { kind: 'videoinput', deviceId: 'default', label: '', groupId: '' },
                { kind: 'audiooutput', deviceId: 'default', label: '', groupId: '' }
            ]);
        }''')
        
        print("‚úÖ –ê–Ω—Ç–∏-–¥–µ—Ç–µ–∫—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")


class PaddypowerAutoCollector:
    """–ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –¥–ª—è Paddypower —Å –∞–≤—Ç–æ-–≤—Ö–æ–¥–æ–º"""
    
    def __init__(self, config_path: Optional[str] = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞"""
        self.config = self.load_config(config_path)
        self.browser: Optional[Browser] = None
        self.page: Optional[Page] = None
        self.simulator = HumanBehaviorSimulator() if SIMULATOR_AVAILABLE else None
        self.fingerprint = AntiDetectBrowser.get_random_fingerprint()
        self.cookies_file = Path('data/paddypower_cookies.json')
        self.session_active = False
        
        print("üé∞ Paddypower –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ö–æ–ª–ª–µ–∫—Ç–æ—Ä v3.0")
        print(f"üõ°Ô∏è –ê–Ω—Ç–∏-–¥–µ—Ç–µ–∫—Ç: ‚úÖ")
        print(f"ü§ñ –°–∏–º—É–ª—è—Ü–∏—è —á–µ–ª–æ–≤–µ–∫–∞: {'‚úÖ' if self.simulator else '‚ùå'}")
        
    def load_config(self, config_path: Optional[str] = None) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        config = {
            # Paddypower –∞–∫–∫–∞—É–Ω—Ç (–∏–∑ .env –∏–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤)
            'username': os.getenv('PADDYPOWER_USERNAME', ''),
            'password': os.getenv('PADDYPOWER_PASSWORD', ''),
            
            # URL-—ã
            'login_url': 'https://www.paddypower.com/login',
            'roulette_url': 'https://games.paddypower.com/roulette',
            'base_url': 'https://www.paddypower.com',
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
            'headless': os.getenv('BOT_HEADLESS', 'false').lower() == 'true',
            'duration_minutes': int(os.getenv('COLLECTION_DURATION', '30')),
            'check_interval': 30,  # —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            
            # XPath –∏–∑ paddypower_collector_v2.js
            'roulette_xpath': '/html/body/div[2]/div/div[3]/div[1]/div/div[1]/div/div/div[2]/div[7]/div/div[3]/div',
            
            # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            'selectors': {
                'login_button': 'button[data-testid="login-button"]',
                'username_input': 'input[name="username"], input[type="email"], input[data-testid="username"]',
                'password_input': 'input[name="password"], input[type="password"], input[data-testid="password"]',
                'submit_login': 'button[type="submit"]',
                'accept_cookies': 'button[data-testid="accept-cookies"], button:has-text("Accept")',
                'close_popup': 'button[aria-label="Close"], button.close, .modal-close',
                'roulette_game': 'a[href*="roulette"], div[data-game*="roulette"]',
                'game_iframe': 'iframe[src*="game"], iframe[name="game"]',
            },
            
            # –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
            'output_file': 'roulette_console_data.json',
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if not config['username'] or not config['password']:
            print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –õ–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –Ω–µ –∑–∞–¥–∞–Ω—ã!")
            print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
            print("   PADDYPOWER_USERNAME=–≤–∞—à_–ª–æ–≥–∏–Ω")
            print("   PADDYPOWER_PASSWORD=–≤–∞—à_–ø–∞—Ä–æ–ª—å")
            print("   –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏")
        
        return config
    
    async def init_browser(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ —Å –∞–Ω—Ç–∏-–¥–µ—Ç–µ–∫—Ç–æ–º"""
        print("\nüåê –ó–∞–ø—É—Å–∫–∞—é –±—Ä–∞—É–∑–µ—Ä...")
        
        browser_args = [
            '--no-sandbox',
            '--disable-setuid-sandbox',
            '--disable-blink-features=AutomationControlled',
            '--disable-dev-shm-usage',
            '--disable-web-security',
            '--disable-features=IsolateOrigins,site-per-process',
            f'--window-size={self.fingerprint["viewport"]["width"]},{self.fingerprint["viewport"]["height"]}',
            f'--user-agent={self.fingerprint["userAgent"]}',
            '--lang=en-GB',
            '--disable-infobars',
            '--disable-notifications',
            '--disable-popup-blocking',
        ]
        
        self.browser = await launch(
            headless=self.config['headless'],
            args=browser_args,
            ignoreHTTPSErrors=True,
            slowMo=10,  # –õ–µ–≥–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
        )
        
        self.page = await self.browser.newPage()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–Ω—Ç–∏-–¥–µ—Ç–µ–∫—Ç
        await AntiDetectBrowser.apply_stealth(self.page, self.fingerprint)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º viewport
        await self.page.setViewport(self.fingerprint['viewport'])
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º timezone –∏ geolocation (UK –¥–ª—è Paddypower)
        await self.page.emulateTimezone('Europe/London')
        await self.page.setGeolocation({'latitude': 51.5074, 'longitude': -0.1278})  # London
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ cookies –µ—Å–ª–∏ –µ—Å—Ç—å
        await self.load_cookies()
        
        print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –≥–æ—Ç–æ–≤")
        print(f"   User-Agent: {self.fingerprint['userAgent'][:80]}...")
        print(f"   Viewport: {self.fingerprint['viewport']['width']}x{self.fingerprint['viewport']['height']}")
        
    async def load_cookies(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö cookies"""
        if self.cookies_file.exists():
            try:
                with open(self.cookies_file, 'r') as f:
                    cookies = json.load(f)
                    await self.page.setCookie(*cookies)
                print("üç™ Cookies –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞")
                self.session_active = True
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ cookies: {e}")
    
    async def save_cookies(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ cookies –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Å–µ—Å—Å–∏–π"""
        try:
            cookies = await self.page.cookies()
            self.cookies_file.parent.mkdir(parents=True, exist_ok=True)
            with open(self.cookies_file, 'w') as f:
                json.dump(cookies, f, indent=2)
            print("üç™ Cookies —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è cookies: {e}")
    
    async def human_wait(self, min_sec: float = 1.0, max_sec: float = 3.0):
        """–ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞"""
        if self.simulator:
            await self.simulator.wait_human(min_sec, max_sec)
        else:
            await asyncio.sleep(random.uniform(min_sec, max_sec))
    
    async def handle_popups(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–ø–∞–ø–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        print("üö´ –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–ø–∞–ø—ã –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
        
        popup_selectors = [
            self.config['selectors']['accept_cookies'],
            self.config['selectors']['close_popup'],
            'button:has-text("Accept All")',
            'button:has-text("I Agree")',
            'button:has-text("Continue")',
            'button:has-text("OK")',
            'button[aria-label="Dismiss"]',
            '.cookie-banner button',
            '#onetrust-accept-btn-handler',
            '.gdpr-accept',
        ]
        
        for selector in popup_selectors:
            try:
                elements = await self.page.querySelectorAll(selector)
                if elements:
                    print(f"   ‚úÖ –ó–∞–∫—Ä—ã–≤–∞—é: {selector}")
                    await elements[0].click()
                    await self.human_wait(0.5, 1.5)
            except Exception:
                continue
        
        print("‚úÖ –ü–æ–ø–∞–ø—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
    
    async def auto_login(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç"""
        if not self.config['username'] or not self.config['password']:
            print("‚ùå –õ–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –Ω–µ –∑–∞–¥–∞–Ω—ã. –ü—Ä–æ–ø—É—Å–∫–∞—é –∞–≤—Ç–æ-–≤—Ö–æ–¥")
            return False
        
        print("\nüîê –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç...")
        
        try:
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
            print("   –û—Ç–∫—Ä—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞...")
            await self.page.goto(self.config['login_url'], {'waitUntil': 'networkidle2'})
            await self.human_wait(2, 4)
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–ø–∞–ø—ã
            await self.handle_popups()
            
            # –ò—â–µ–º –ø–æ–ª–µ username
            print("   –í–≤–æ–∂—É –ª–æ–≥–∏–Ω...")
            username_input = await self.page.querySelector(self.config['selectors']['username_input'])
            if not username_input:
                print("   ‚ùå –ü–æ–ª–µ –ª–æ–≥–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return False
            
            await username_input.click()
            await self.human_wait(0.3, 0.7)
            
            # –í–≤–æ–¥–∏–º username —Å —Å–∏–º—É–ª—è—Ü–∏–µ–π –ø–µ—á–∞—Ç–∏
            if self.simulator:
                for char in self.config['username']:
                    await username_input.type(char)
                    await asyncio.sleep(random.uniform(0.05, 0.15))
            else:
                await username_input.type(self.config['username'])
            
            await self.human_wait(0.5, 1.5)
            
            # –ò—â–µ–º –ø–æ–ª–µ password
            print("   –í–≤–æ–∂—É –ø–∞—Ä–æ–ª—å...")
            password_input = await self.page.querySelector(self.config['selectors']['password_input'])
            if not password_input:
                print("   ‚ùå –ü–æ–ª–µ –ø–∞—Ä–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return False
            
            await password_input.click()
            await self.human_wait(0.3, 0.7)
            
            # –í–≤–æ–¥–∏–º password
            if self.simulator:
                for char in self.config['password']:
                    await password_input.type(char)
                    await asyncio.sleep(random.uniform(0.05, 0.15))
            else:
                await password_input.type(self.config['password'])
            
            await self.human_wait(1, 2)
            
            # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
            print("   –ù–∞–∂–∏–º–∞—é –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞...")
            submit_button = await self.page.querySelector(self.config['selectors']['submit_login'])
            if submit_button:
                await submit_button.click()
            else:
                # –ü—Ä–æ–±—É–µ–º Enter
                await password_input.press('Enter')
            
            # –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏
            await self.human_wait(5, 8)
            await self.page.waitForNavigation({'waitUntil': 'networkidle2', 'timeout': 30000})
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º cookies
            await self.save_cookies()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞
            current_url = self.page.url
            if 'login' not in current_url.lower():
                print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç!")
                self.session_active = True
                return True
            else:
                print("‚ùå –í—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è (–≤—Å—ë –µ—â—ë –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ª–æ–≥–∏–Ω–∞)")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ-–≤—Ö–æ–¥–∞: {e}")
            return False
    
    async def navigate_to_roulette(self):
        """–ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —Ä—É–ª–µ—Ç–∫–µ"""
        print("\nüé∞ –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —Ä—É–ª–µ—Ç–∫–µ...")
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π URL
            print("   –û—Ç–∫—Ä—ã–≤–∞—é —Ä–∞–∑–¥–µ–ª —Ä—É–ª–µ—Ç–∫–∏...")
            await self.page.goto(self.config['roulette_url'], {'waitUntil': 'networkidle2', 'timeout': 60000})
            await self.human_wait(3, 5)
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–ø–∞–ø—ã
            await self.handle_popups()
            
            # –ò—â–µ–º iframe —Å –∏–≥—Ä–æ–π
            print("   –ò—â—É iframe —Å –∏–≥—Ä–æ–π...")
            iframe_element = await self.page.querySelector(self.config['selectors']['game_iframe'])
            
            if iframe_element:
                print("‚úÖ Iframe –Ω–∞–π–¥–µ–Ω!")
                iframe = await iframe_element.contentFrame()
                
                if iframe:
                    print("‚úÖ –ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ iframe")
                    return iframe
            
            # –ï—Å–ª–∏ iframe –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–≥—Ä—É Spin and Go Roulette
            print("   –ò—â—É —Å—Å—ã–ª–∫—É –Ω–∞ Spin and Go Roulette...")
            roulette_links = await self.page.querySelectorAll('a[href*="roulette"], button:has-text("Spin and Go")')
            
            if roulette_links:
                print(f"   –ù–∞–π–¥–µ–Ω–æ {len(roulette_links)} —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ä—É–ª–µ—Ç–∫—É")
                # –ö–ª–∏–∫–∞–µ–º –ø–æ –ø–µ—Ä–≤–æ–π
                await roulette_links[0].click()
                await self.human_wait(5, 8)
                await self.page.waitForNavigation({'waitUntil': 'networkidle2', 'timeout': 60000})
                
                # –°–Ω–æ–≤–∞ –∏—â–µ–º iframe
                iframe_element = await self.page.querySelector(self.config['selectors']['game_iframe'])
                if iframe_element:
                    iframe = await iframe_element.contentFrame()
                    if iframe:
                        print("‚úÖ –ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
                        return iframe
            
            print("‚ö†Ô∏è Iframe —Å –∏–≥—Ä–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É")
            return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {e}")
            return None
    
    async def inject_collector_script(self, target_page):
        """–ò–Ω—ä–µ–∫—Ü–∏—è JavaScript –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞"""
        print("\nüíâ –ò–Ω–∂–µ–∫—Ç–∏—Ä—É—é –∫–æ–ª–ª–µ–∫—Ç–æ—Ä...")
        
        # –ß–∏—Ç–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
        script_path = Path(__file__).parent.parent / 'paddypower_collector_v2.js'
        
        if not script_path.exists():
            print(f"‚ùå –°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {script_path}")
            return False
        
        try:
            with open(script_path, 'r', encoding='utf-8') as f:
                collector_script = f.read()
            
            # –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            await target_page.evaluate(collector_script)
            print("‚úÖ –ö–æ–ª–ª–µ–∫—Ç–æ—Ä –≤–Ω–µ–¥—Ä—ë–Ω!")
            
            # –î–∞—ë–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
            await self.human_wait(2, 3)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
            stats = await target_page.evaluate('typeof showPaddypowerStats !== "undefined"')
            if stats:
                print("‚úÖ –ö–æ–ª–ª–µ–∫—Ç–æ—Ä –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
                return True
            else:
                print("‚ö†Ô∏è –ö–æ–ª–ª–µ–∫—Ç–æ—Ä –≤–Ω–µ–¥—Ä—ë–Ω, –Ω–æ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—ä–µ–∫—Ü–∏–∏: {e}")
            return False
    
    async def check_collector_status(self, target_page):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞"""
        try:
            result = await target_page.evaluate('''
                (function() {
                    if (typeof showPaddypowerStats === 'function') {
                        return showPaddypowerStats();
                    }
                    return null;
                })()
            ''')
            
            if result:
                print(f"üìä –°–æ–±—Ä–∞–Ω–æ —Å–ø–∏–Ω–æ–≤: {result.get('total', 0)}")
                print(f"   üî¥ –ö—Ä–∞—Å–Ω—ã—Ö: {result.get('red', 0)}")
                print(f"   ‚ö´ –ß–µ—Ä–Ω—ã—Ö: {result.get('black', 0)}")
                print(f"   üü¢ –ó–µ—Ä–æ: {result.get('green', 0)}")
                print(f"   üéØ –ü–æ—Å–ª–µ–¥–Ω–µ–µ: {result.get('lastNumber', '?')} ({result.get('lastColor', '?')})")
            
            return result
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return None
    
    async def export_collected_data(self, target_page) -> Optional[Dict]:
        """–≠–∫—Å–ø–æ—Ä—Ç —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüì• –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...")
        
        try:
            data = await target_page.evaluate('''
                (function() {
                    if (typeof exportPaddypowerData === 'function') {
                        return exportPaddypowerData();
                    }
                    return null;
                })()
            ''')
            
            if data and data.get('data'):
                print(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(data['data'])} —Å–ø–∏–Ω–æ–≤")
                return data
            else:
                print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            return None
    
    async def save_to_file(self, data: Dict, filename: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª"""
        try:
            output_path = Path(filename)
            output_path.parent.mkdir(parents=True, exist_ok=True)
            
            with open(output_path, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)
            
            print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {output_path}")
            print(f"   –í—Å–µ–≥–æ —Å–ø–∏–Ω–æ–≤: {len(data.get('data', []))}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    async def run_collection_session(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–±–æ—Ä–∞"""
        print("\nüé¨ –ó–ê–ü–£–°–ö –°–ï–°–°–ò–ò –°–ë–û–†–ê")
        print("=" * 60)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
        await self.init_browser()
        
        # –ê–≤—Ç–æ-–≤—Ö–æ–¥ (–µ—Å–ª–∏ –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω—ã)
        if not self.session_active:
            login_success = await self.auto_login()
            if not login_success:
                print("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞—é –±–µ–∑ –∞–≤—Ç–æ-–≤—Ö–æ–¥–∞...")
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —Ä—É–ª–µ—Ç–∫–µ
        target_frame = await self.navigate_to_roulette()
        target_page = target_frame if target_frame else self.page
        
        # –ò–Ω—ä–µ–∫—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞
        collector_ready = await self.inject_collector_script(target_page)
        if not collector_ready:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–Ω–µ–¥—Ä–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ç–æ—Ä. –ó–∞–≤–µ—Ä—à–∞—é.")
            return
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–±–æ—Ä–∞
        print(f"\n‚è±Ô∏è –ù–∞—á–∞–ª–æ —Å–±–æ—Ä–∞ –Ω–∞ {self.config['duration_minutes']} –º–∏–Ω—É—Ç")
        print(f"   –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ {self.config['check_interval']} —Å–µ–∫—É–Ω–¥")
        print("=" * 60)
        
        start_time = datetime.now()
        duration_seconds = self.config['duration_minutes'] * 60
        iteration = 0
        
        while True:
            elapsed = (datetime.now() - start_time).total_seconds()
            
            if elapsed >= duration_seconds:
                print(f"\n‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ ({self.config['duration_minutes']} –º–∏–Ω—É—Ç)")
                break
            
            iteration += 1
            remaining = duration_seconds - elapsed
            
            print(f"\nüîÑ –ò—Ç–µ—Ä–∞—Ü–∏—è #{iteration} | –û—Å—Ç–∞–ª–æ—Å—å: {remaining/60:.1f} –º–∏–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            await self.check_collector_status(target_page)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
            if iteration % 3 == 0 and self.simulator:
                print("   üé≠ –°–∏–º—É–ª—è—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...")
                scroll_amount = random.randint(100, 300)
                if target_frame:
                    await target_page.evaluate(f'window.scrollBy(0, {scroll_amount})')
                else:
                    await self.page.evaluate(f'window.scrollBy(0, {scroll_amount})')
                await self.human_wait(0.5, 1.5)
            
            # –ñ–¥—ë–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            await asyncio.sleep(self.config['check_interval'])
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç
        print("\n" + "=" * 60)
        print("üèÅ –ó–ê–í–ï–†–®–ï–ù–ò–ï –°–ï–°–°–ò–ò")
        
        final_data = await self.export_collected_data(target_page)
        
        if final_data:
            await self.save_to_file(final_data, self.config['output_file'])
            print(f"\n‚úÖ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–û!")
            print(f"   –°–æ–±—Ä–∞–Ω–æ —Å–ø–∏–Ω–æ–≤: {len(final_data.get('data', []))}")
            print(f"   –§–∞–π–ª: {self.config['output_file']}")
        else:
            print("\n‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        
        print("=" * 60)
    
    async def cleanup(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞"""
        if self.browser:
            await self.browser.close()
            print("\nüö™ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description='üé∞ Paddypower –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ö–æ–ª–ª–µ–∫—Ç–æ—Ä —Å –ê–Ω—Ç–∏-–î–µ—Ç–µ–∫—Ç–æ–º v3.0'
    )
    
    parser.add_argument('--username', type=str, help='–õ–æ–≥–∏–Ω Paddypower')
    parser.add_argument('--password', type=str, help='–ü–∞—Ä–æ–ª—å Paddypower')
    parser.add_argument('--duration', type=int, default=30, help='–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–±–æ—Ä–∞ (–º–∏–Ω—É—Ç—ã)')
    parser.add_argument('--headless', action='store_true', help='–°–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º –±—Ä–∞—É–∑–µ—Ä–∞')
    parser.add_argument('--output', type=str, default='roulette_console_data.json', help='–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª')
    
    args = parser.parse_args()
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if args.username:
        os.environ['PADDYPOWER_USERNAME'] = args.username
    if args.password:
        os.environ['PADDYPOWER_PASSWORD'] = args.password
    if args.headless:
        os.environ['BOT_HEADLESS'] = 'true'
    
    # –°–æ–∑–¥–∞—ë–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–ª–ª–µ–∫—Ç–æ—Ä
    collector = PaddypowerAutoCollector()
    collector.config['duration_minutes'] = args.duration
    collector.config['output_file'] = args.output
    
    try:
        await collector.run_collection_session()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)")
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
    finally:
        await collector.cleanup()


if __name__ == '__main__':
    if not PYPPETEER_AVAILABLE:
        print("\n‚ùå –û–®–ò–ë–ö–ê: pyppeteer –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pyppeteer playwright")
        print("   –ó–∞—Ç–µ–º: playwright install chromium")
        exit(1)
    
    print("""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë  üé∞ PADDYPOWER –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ö–û–õ–õ–ï–ö–¢–û–† v3.0            ‚ïë
    ‚ïë                                                           ‚ïë
    ‚ïë  ‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω—Ç–∏-–¥–µ—Ç–µ–∫—Ç                              ‚ïë
    ‚ïë  ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç                        ‚ïë
    ‚ïë  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ cookies –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π                      ‚ïë
    ‚ïë  ‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ä—É–ª–µ—Ç–∫–∞–º                                ‚ïë
    ‚ïë  ‚úÖ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö                         ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)
    
    asyncio.get_event_loop().run_until_complete(main())
