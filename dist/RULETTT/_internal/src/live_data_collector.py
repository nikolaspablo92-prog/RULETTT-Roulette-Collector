"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä—É–ª–µ—Ç–∫–∏ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
"""

import time
import json
import os
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
import random
import urllib.request
import urllib.error
from pathlib import Path

class LiveDataCollector:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä—É–ª–µ—Ç–∫–∏"""
    
    def __init__(self):
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
        self.sources = {
            'roulette_tracker': 'https://roulettetracker.net',
            'casino_stats': 'https://casino-stats.com',
            'live_roulette': 'https://live-roulette-results.com'
        }
        self.config = self._load_casino_config()
    
    def _load_casino_config(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞–∑–∏–Ω–æ"""
        try:
            config_path = Path(__file__).parent.parent / "casino_setup.json"
            if config_path.exists():
                with open(config_path, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–∞–∑–∏–Ω–æ: {e}")
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return {
            'connection_method': 'mock',
            'casino_name': 'Demo Casino',
            'api': {},
            'scraping': {},
            'betting': {'base_bet': 100}
        }
    
    def get_live_results(self, source: str = 'mock', limit: int = 100) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∂–∏–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä—É–ª–µ—Ç–∫–∏ —Ç–æ–ª—å–∫–æ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–∞
        
        Args:
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö ('mock', 'api', 'scrape')
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–ø–∏–Ω–æ–≤
        """
        if source == 'mock':
            return self._get_mock_live_data(limit)
        elif source == 'api':
            return self._get_api_data(limit)
        elif source == 'scrape':
            return self._scrape_live_data(limit)
        else:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫: {source}")
    
    def _get_mock_live_data(self, limit: int) -> List[Dict]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏–º–∏—Ç–∏—Ä—É—é—â–∏–µ –∂–∏–≤—É—é —Ä—É–ª–µ—Ç–∫—É
        —Å –±–æ–ª–µ–µ —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
        """
        results = []
        base_time = datetime.now() - timedelta(minutes=limit * 2)
        
        # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä—É–ª–µ—Ç–∫–∏
        numbers_weights = self._get_realistic_weights()
        
        for i in range(limit):
            # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É —Å–ø–∏–Ω–∞–º–∏ (1-5 –º–∏–Ω—É—Ç)
            interval = random.choice([1, 1, 2, 2, 2, 3, 3, 4, 5])
            spin_time = base_time + timedelta(minutes=i * interval)
            
            # –í—ã–±–∏—Ä–∞–µ–º —á–∏—Å–ª–æ —Å —É—á–µ—Ç–æ–º –≤–µ—Å–æ–≤ (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —á–∏—Å–ª–∞ –≤—ã–ø–∞–¥–∞—é—Ç —á–∞—â–µ)
            number = random.choices(
                list(range(37)), 
                weights=numbers_weights,
                k=1
            )[0]
            
            color = self._get_color(number)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—Ç–æ–ª –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            target_table = self.config.get('table_info', {}).get('table_id', 'roulettestura541')
            
            result = {
                'number': number,
                'color': color,
                'timestamp': spin_time,
                'source': 'live_simulation',
                'table_id': target_table,  # –¢–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å—Ç–æ–ª
                'dealer': f'dealer_{random.randint(1, 3)}'  # –ú–µ–Ω—å—à–µ –¥–∏–ª–µ—Ä–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å—Ç–æ–ª–∞
            }
            results.append(result)
        
        return results
    
    def _get_realistic_weights(self) -> List[float]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –≤–µ—Å–∞ –¥–ª—è —á–∏—Å–µ–ª —Ä—É–ª–µ—Ç–∫–∏
        –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —á–∏—Å–ª–∞ –º–æ–≥—É—Ç –≤—ã–ø–∞–¥–∞—Ç—å —á–∞—â–µ –∏–∑-–∑–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –∫–æ–ª–µ—Å–∞
        """
        base_weight = 1.0
        weights = [base_weight] * 37
        
        # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —á–∏—Å–ª–∞ –¥–µ–ª–∞–µ–º —á—É—Ç—å –±–æ–ª–µ–µ/–º–µ–Ω–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–º–∏
        hot_numbers = [7, 17, 23, 29]  # "–≥–æ—Ä—è—á–∏–µ" —á–∏—Å–ª–∞
        cold_numbers = [1, 13, 31, 35]  # "—Ö–æ–ª–æ–¥–Ω—ã–µ" —á–∏—Å–ª–∞
        
        for num in hot_numbers:
            weights[num] = base_weight * 1.1
        
        for num in cold_numbers:
            weights[num] = base_weight * 0.9
        
        return weights
    
    def _get_api_data(self, limit: int) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API —Ç–æ–ª—å–∫–æ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–∞
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if self.config.get('connection_method') != 'api':
            print("‚ö†Ô∏è  API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é...")
            return self._get_mock_live_data(limit)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –æ–¥–Ω–æ–≥–æ —Å—Ç–æ–ª–∞
        return self._get_single_table_api_data(limit)
    
    def _get_single_table_api_data(self, limit: int) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –°–¢–†–û–ì–û —Å –æ–¥–Ω–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç–æ–ª–∞ —á–µ—Ä–µ–∑ API
        """
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–≥–∏–π —Å–±–æ—Ä—â–∏–∫ –æ–¥–Ω–æ–≥–æ —Å—Ç–æ–ª–∞
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–≥–∏–π —Å–±–æ—Ä—â–∏–∫
            import sys
            from pathlib import Path
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Å—Ç—Ä–æ–≥–æ–º—É —Å–±–æ—Ä—â–∏–∫—É
            strict_path = Path(__file__).parent.parent / "strict_single_table.py"
            if strict_path.exists():
                sys.path.insert(0, str(strict_path.parent))
                from strict_single_table import SingleTableOnlyCollector
                
                # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–≥–∏–π —Å–±–æ—Ä—â–∏–∫ –¥–ª—è –Ω–∞—à–µ–≥–æ —Å—Ç–æ–ª–∞
                target_table = "roulettestura541"  # –¢–û–õ–¨–ö–û —ç—Ç–æ—Ç —Å—Ç–æ–ª
                strict_collector = SingleTableOnlyCollector(target_table)
                
                print(f"üéØ –°–¢–†–û–ì–ò–ô –°–ë–û–† –î–ê–ù–ù–´–• –¢–û–õ–¨–ö–û –° –°–¢–û–õ–ê: {target_table}")
                results = strict_collector.get_single_table_data(limit)
                
                if results:
                    print(f"‚úÖ –ü–û–õ–£–ß–ï–ù–û {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¢–û–õ–¨–ö–û —Å —Å—Ç–æ–ª–∞ {target_table}")
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                    filtered = [r for r in results if r.get('table_id') == target_table]
                    if len(filtered) != len(results):
                        print(f"üö´ –û–¢–§–ò–õ–¨–¢–†–û–í–ê–ù–û {len(results) - len(filtered)} —á—É–∂–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                    return filtered
                else:
                    print(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å —Å—Ç–æ–ª–∞ {target_table}")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–æ–≥–æ–≥–æ —Å–±–æ—Ä—â–∏–∫–∞: {e}")
        
        # –§–æ–ª–ª–±—ç–∫ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
        return self._fallback_single_table_data(limit)
    
    def _fallback_single_table_data(self, limit: int) -> List[Dict]:
        """–§–æ–ª–ª–±—ç–∫ –º–µ—Ç–æ–¥ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
        try:
            target_table = "roulettestura541"  # –¢–û–õ–¨–ö–û —ç—Ç–æ—Ç —Å—Ç–æ–ª
            print(f"üéØ –§–æ–ª–ª–±—ç–∫: –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–∞ {target_table}...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç–æ–ª–∞
            auth = self.config['api']['auth']
            base_url = "https://games.pragmaticplaylive.net/api/ui/statisticHistory"
            
            import urllib.parse
            params = {
                'tableId': target_table,  # –°–¢–†–û–ì–û –Ω–∞—à —Å—Ç–æ–ª
                'numberOfGames': min(limit, 500)
            }
            
            url = f"{base_url}?" + urllib.parse.urlencode(params)
            
            req = urllib.request.Request(url)
            req.add_header('User-Agent', self.config['api']['headers']['User-Agent'])
            req.add_header('Accept', 'application/json, text/plain, */*')
            
            with urllib.request.urlopen(req, timeout=10) as response:
                if response.getcode() == 200:
                    data = json.loads(response.read().decode('utf-8'))
                    results = self._parse_api_history(data, target_table)
                    
                    # –°–¢–†–û–ì–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø: —É–±–∏—Ä–∞–µ–º –≤—Å–µ —á—Ç–æ –Ω–µ —Å –Ω–∞—à–µ–≥–æ —Å—Ç–æ–ª–∞
                    filtered_results = []
                    for result in results:
                        if result.get('table_id') == target_table:
                            filtered_results.append(result)
                        else:
                            print(f"üö´ –û–¢–§–ò–õ–¨–¢–†–û–í–ê–ù: {result.get('table_id')} (–Ω—É–∂–µ–Ω {target_table})")
                    
                    print(f"‚úÖ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(filtered_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å —Å—Ç–æ–ª–∞ {target_table}")
                    return filtered_results
                else:
                    print(f"‚ùå API –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.getcode()}")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–ª–ª–±—ç–∫ API: {e}")
        
        return self._get_mock_live_data(limit)
    
    def _parse_api_history(self, data: Dict, table_id: str) -> List[Dict]:
        """
        –ü–∞—Ä—Å–∏—Ç –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä –∏–∑ API –æ—Ç–≤–µ—Ç–∞
        """
        results = []
        
        try:
            if 'history' in data and isinstance(data['history'], list):
                print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(data['history'])} –∑–∞–ø–∏—Å–µ–π —Å —Å—Ç–æ–ª–∞ {table_id}")
                
                for game in data['history']:
                    if isinstance(game, dict):
                        # –ü–∞—Ä—Å–∏–º gameResult (—Ñ–æ—Ä–º–∞—Ç: "25 Red", "0 Green", "12 Black")
                        winning_number = None
                        api_color = None
                        
                        if 'gameResult' in game:
                            try:
                                parts = game['gameResult'].split()
                                if len(parts) >= 2:
                                    winning_number = int(parts[0])
                                    api_color = parts[1].lower()
                            except (ValueError, IndexError):
                                continue
                        
                        if winning_number is not None and 0 <= winning_number <= 36:
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç –∏–∑ API –∏–ª–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º
                            color = api_color if api_color in ['red', 'black', 'green'] else self._get_color(winning_number)
                            
                            # –í—Ä–µ–º—è –∏–≥—Ä—ã
                            timestamp = datetime.now()
                            if 'gameTime' in game:
                                try:
                                    timestamp = datetime.fromisoformat(game['gameTime'].replace('Z', '+00:00'))
                                except:
                                    pass
                            
                            result = {
                                'number': winning_number,
                                'color': color,
                                'timestamp': timestamp,
                                'source': 'pragmatic_api',
                                'table_id': table_id,
                                'game_id': game.get('gameId', ''),
                                'dealer': f'dealer_{table_id}'
                            }
                            
                            results.append(result)
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
                results.sort(key=lambda x: x['timestamp'], reverse=True)
                print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ç–æ–ª–∞ {table_id}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        
        return results
    
    def _scrape_live_data(self, limit: int) -> List[Dict]:
        """
        –ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ —Å –ø—É–±–ª–∏—á–Ω—ã—Ö —Å–∞–π—Ç–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä—É–ª–µ—Ç–∫–∏
        """
        try:
            print("üîç –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –ø—É–±–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
            
            # –ü—Ä–∏–º–µ—Ä –ø–∞—Ä—Å–∏–Ω–≥–∞ (–Ω—É–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–∞–π—Ç—ã)
            results = []
            
            # –ó–¥–µ—Å—å –±—ã–ª –±—ã —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
            # –ù–æ –º–Ω–æ–≥–∏–µ —Å–∞–π—Ç—ã –∑–∞—â–∏—â–µ–Ω—ã –æ—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞
            print("‚ö†Ô∏è  –ú–Ω–æ–≥–∏–µ —Å–∞–π—Ç—ã –∫–∞–∑–∏–Ω–æ –∑–∞—â–∏—â–µ–Ω—ã –æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
            print("   –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            
            return self._get_mock_live_data(limit)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            print("   –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–∏–º—É–ª—è—Ü–∏—é...")
            return self._get_mock_live_data(limit)
    
    def _get_color(self, number: int) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–≤–µ—Ç —á–∏—Å–ª–∞ –Ω–∞ —Ä—É–ª–µ—Ç–∫–µ"""
        if number == 0:
            return 'green'
        
        red_numbers = {1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36}
        return 'red' if number in red_numbers else 'black'
    
    def get_live_stream(self, duration_minutes: int = 60) -> List[Dict]:
        """
        –°–∏–º—É–ª–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        
        Args:
            duration_minutes: –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –º–∏–Ω—É—Ç–∞—Ö
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–ø–∏–Ω–æ–≤ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
        """
        print(f"üé∞ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∂–∏–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ {duration_minutes} –º–∏–Ω—É—Ç...")
        
        results = []
        start_time = time.time()
        end_time = start_time + (duration_minutes * 60)
        
        spin_counter = 0
        
        while time.time() < end_time:
            # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–ø–∏–Ω–∞–º–∏ (1-3 –º–∏–Ω—É—Ç—ã)
            sleep_time = random.uniform(60, 180)
            
            print(f"‚è≥ –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å–ø–∏–Ω... ({sleep_time:.0f} —Å–µ–∫)")
            time.sleep(min(sleep_time, 10))  # –î–ª—è –¥–µ–º–æ —É—Å–∫–æ—Ä—è–µ–º
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            new_results = self._get_mock_live_data(1)
            if new_results:
                spin_counter += 1
                result = new_results[0]
                result['spin_id'] = spin_counter
                results.append(result)
                
                print(f"üéØ –°–ø–∏–Ω #{spin_counter}: {result['number']} ({result['color']})")
                
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–∑—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                self._save_live_result(result)
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞ {duration_minutes} –º–∏–Ω—É—Ç")
        return results
    
    def _save_live_result(self, result: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            from data_collector import DataCollector
            
            db = DataCollector()
            db.add_spin(
                number=result['number'],
                timestamp=result['timestamp']
            )
            print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {result['number']} ({result['color']})")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def get_historical_data(self, days: int = 30) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        
        Args:
            days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        print(f"üìä –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ {days} –¥–Ω–µ–π...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
        total_spins = days * 12 * 24  # –ø—Ä–∏–º–µ—Ä–Ω–æ 12 —Å–ø–∏–Ω–æ–≤ –≤ —á–∞—Å, 24 —á–∞—Å–∞
        historical_data = []
        
        base_time = datetime.now() - timedelta(days=days)
        
        for i in range(total_spins):
            # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã (5-10 –º–∏–Ω—É—Ç)
            minutes_offset = i * random.uniform(5, 10)
            spin_time = base_time + timedelta(minutes=minutes_offset)
            
            number = random.choices(
                list(range(37)), 
                weights=self._get_realistic_weights(),
                k=1
            )[0]
            
            color = self._get_color(number)
            
            result = {
                'number': number,
                'color': color,
                'timestamp': spin_time,
                'source': 'historical_simulation',
                'spin_id': i + 1
            }
            historical_data.append(result)
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(historical_data)} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π")
        return historical_data
    
    def test_connection(self) -> Dict[str, bool]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
        print("üîå –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –¥–∞–Ω–Ω—ã—Ö...")
        
        results = {
            'mock': True,  # –í—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ
            'api': False,  # –¢—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            'scrape': False  # –ó–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–æ–≤
        }
        
        # –¢–µ—Å—Ç API
        try:
            # –ó–¥–µ—Å—å –±—ã–ª –±—ã —Ç–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ API
            print("üîë API: –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª—é—á–µ–π –¥–æ—Å—Ç—É–ø–∞")
        except:
            pass
        
        # –¢–µ—Å—Ç –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥–∞
        try:
            req = urllib.request.Request('https://httpbin.org/get', headers=self.headers)
            with urllib.request.urlopen(req, timeout=5) as response:
                if response.status == 200:
                    results['scrape'] = True
                    print("üåê –í–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ")
        except:
            print("üåê –í–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
        
        print("‚úÖ –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: –í—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞")
        
        return results

def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –º–æ–¥—É–ª—è"""
    collector = LiveDataCollector()
    
    print("=== –¢–ï–°–¢ –ú–û–î–£–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ñ–ò–í–´–• –î–ê–ù–ù–´–• ===\n")
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    print("1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π:")
    connections = collector.test_connection()
    print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏: {list(connections.keys())}\n")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("2. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
    recent_results = collector.get_live_results('mock', limit=10)
    for result in recent_results[-5:]:
        print(f"   {result['timestamp'].strftime('%H:%M:%S')}: "
              f"{result['number']} ({result['color']})")
    print()
    
    # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    print("3. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:")
    historical = collector.get_historical_data(days=1)
    print(f"   –ü–æ–ª—É—á–µ–Ω–æ {len(historical)} –∑–∞–ø–∏—Å–µ–π –∑–∞ 1 –¥–µ–Ω—å")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    colors = {}
    for result in historical:
        color = result['color']
        colors[color] = colors.get(color, 0) + 1
    
    total = len(historical)
    print(f"   –ö—Ä–∞—Å–Ω—ã—Ö: {colors.get('red', 0)} ({colors.get('red', 0)/total*100:.1f}%)")
    print(f"   –ß–µ—Ä–Ω—ã—Ö: {colors.get('black', 0)} ({colors.get('black', 0)/total*100:.1f}%)")
    print(f"   –ó–µ–ª–µ–Ω—ã—Ö: {colors.get('green', 0)} ({colors.get('green', 0)/total*100:.1f}%)")

if __name__ == "__main__":
    main()