"""
üîê –ú–µ–Ω–µ–¥–∂–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
–î–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞: –∞–¥–º–∏–Ω—ã (–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã) + –∫–ª–∏–µ–Ω—Ç—ã (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏)
"""

import sqlite3
import secrets
import hashlib
import jwt
import bcrypt
import json
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional, Tuple

class AuthManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"""
    
    # –†–æ–ª–∏ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    ROLES = {
        "super_admin": {
            "name": "–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            "permissions": [
                "full_access",
                "user_management",
                "key_generation",
                "bot_control",
                "view_logs",
                "system_config"
            ]
        },
        "team_member": {
            "name": "–ß–ª–µ–Ω –∫–æ–º–∞–Ω–¥—ã",
            "permissions": [
                "bot_control",
                "view_stats",
                "limited_key_generation",
                "view_logs"
            ]
        },
        "observer": {
            "name": "–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å",
            "permissions": [
                "view_stats",
                "view_logs"
            ]
        }
    }
    
    def __init__(self, db_path: str, secret_key: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        
        Args:
            db_path: –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
            secret_key: –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è JWT
        """
        self.db_path = Path(db_path)
        self.secret_key = secret_key
        self.db_path.parent.mkdir(parents=True, exist_ok=True)
        self.init_database()
    
    def init_database(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS admin_users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE NOT NULL,
                password_hash TEXT NOT NULL,
                role TEXT NOT NULL,
                created_at TEXT NOT NULL,
                last_login TEXT,
                is_active BOOLEAN DEFAULT 1,
                permissions TEXT,
                created_by TEXT
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS temp_keys (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                key_hash TEXT UNIQUE NOT NULL,
                client_name TEXT NOT NULL,
                created_at TEXT NOT NULL,
                expires_at TEXT NOT NULL,
                valid_hours TEXT NOT NULL,
                status TEXT DEFAULT 'active',
                usage_count INTEGER DEFAULT 0,
                max_usage INTEGER DEFAULT 1000,
                last_used_at TEXT,
                created_by_admin TEXT,
                ip_whitelist TEXT,
                notes TEXT
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –ª–æ–≥–æ–≤ –¥–æ—Å—Ç—É–ø–∞
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS access_logs (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_type TEXT NOT NULL,
                identifier TEXT NOT NULL,
                endpoint TEXT,
                method TEXT,
                status_code INTEGER,
                timestamp TEXT NOT NULL,
                ip_address TEXT,
                user_agent TEXT,
                hidden_mode BOOLEAN DEFAULT 0
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS active_sessions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                session_token TEXT UNIQUE NOT NULL,
                user_type TEXT NOT NULL,
                identifier TEXT NOT NULL,
                created_at TEXT NOT NULL,
                expires_at TEXT NOT NULL,
                ip_address TEXT,
                user_agent TEXT,
                last_activity TEXT
            )
        ''')
        
        conn.commit()
        conn.close()
        
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # ============================================
    # –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–´
    # ============================================
    
    def create_admin(self, username: str, password: str, role: str, 
                     created_by: str = "system") -> Dict:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        
        Args:
            username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            password: –ü–∞—Ä–æ–ª—å (–±—É–¥–µ—Ç –∑–∞—Ö—ç—à–∏—Ä–æ–≤–∞–Ω)
            role: –†–æ–ª—å (super_admin, team_member, observer)
            created_by: –ö—Ç–æ —Å–æ–∑–¥–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        """
        if role not in self.ROLES:
            raise ValueError(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å: {role}. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {list(self.ROLES.keys())}")
        
        # –•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
        password_hash = bcrypt.hashpw(password.encode(), bcrypt.gensalt()).decode()
        
        permissions = json.dumps(self.ROLES[role]["permissions"])
        created_at = datetime.now().isoformat()
        
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO admin_users (username, password_hash, role, created_at, 
                                       is_active, permissions, created_by)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', (username, password_hash, role, created_at, 1, permissions, created_by))
            
            conn.commit()
            user_id = cursor.lastrowid
            conn.close()
            
            print(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω: {username} (—Ä–æ–ª—å: {self.ROLES[role]['name']})")
            
            return {
                "id": user_id,
                "username": username,
                "role": role,
                "role_name": self.ROLES[role]["name"],
                "permissions": self.ROLES[role]["permissions"],
                "created_at": created_at
            }
        
        except sqlite3.IntegrityError:
            raise ValueError(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    def authenticate_admin(self, username: str, password: str, 
                          hidden_mode: bool = False) -> Optional[Dict]:
        """
        –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        
        Args:
            username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            password: –ü–∞—Ä–æ–ª—å
            hidden_mode: –°–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º (–Ω–µ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤ –ø—É–±–ª–∏—á–Ω—ã—Ö –ª–æ–≥–∞—Ö)
        
        Returns:
            JWT —Ç–æ–∫–µ–Ω –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–ª–∏ None
        """
        conn = sqlite3.connect(self.db_path)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT * FROM admin_users 
            WHERE username = ? AND is_active = 1
        ''', (username,))
        
        user = cursor.fetchone()
        
        if not user:
            conn.close()
            return None
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
        if not bcrypt.checkpw(password.encode(), user['password_hash'].encode()):
            conn.close()
            return None
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
        cursor.execute('''
            UPDATE admin_users 
            SET last_login = ? 
            WHERE id = ?
        ''', (datetime.now().isoformat(), user['id']))
        
        conn.commit()
        conn.close()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
        payload = {
            'user_id': user['id'],
            'username': user['username'],
            'role': user['role'],
            'permissions': json.loads(user['permissions']),
            'exp': datetime.utcnow() + timedelta(hours=8),  # –¢–æ–∫–µ–Ω –Ω–∞ 8 —á–∞—Å–æ–≤
            'iat': datetime.utcnow()
        }
        
        token = jwt.encode(payload, self.secret_key, algorithm='HS256')
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –Ω–µ —Å–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º)
        if not hidden_mode:
            self.log_access('admin', username, '/auth/login', 'POST', 200)
        
        print(f"‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω: {username} (—Ä–æ–ª—å: {user['role']})")
        if hidden_mode:
            print("üîí –°–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        
        return {
            'token': token,
            'user': {
                'id': user['id'],
                'username': user['username'],
                'role': user['role'],
                'role_name': self.ROLES[user['role']]['name'],
                'permissions': json.loads(user['permissions'])
            }
        }
    
    def verify_admin_token(self, token: str) -> Optional[Dict]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        
        Args:
            token: JWT —Ç–æ–∫–µ–Ω
        
        Returns:
            –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π payload –∏–ª–∏ None
        """
        try:
            payload = jwt.decode(token, self.secret_key, algorithms=['HS256'])
            return payload
        except jwt.ExpiredSignatureError:
            print("‚ùå –¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫")
            return None
        except jwt.InvalidTokenError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω")
            return None
    
    # ============================================
    # –í–†–ï–ú–ï–ù–ù–´–ï –ö–õ–Æ–ß–ò –î–õ–Ø –ö–õ–ò–ï–ù–¢–û–í
    # ============================================
    
    def generate_temp_key(self, client_name: str, valid_hours: List[int], 
                         ttl_minutes: int = 120, max_usage: int = 1000,
                         created_by_admin: str = "admin",
                         ip_whitelist: List[str] = None,
                         notes: str = "") -> Tuple[str, Dict]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        
        Args:
            client_name: –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞
            valid_hours: –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã –∫–ª—é—á–∞ (—Å–ø–∏—Å–æ–∫ 0-23)
            ttl_minutes: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–ª—é—á–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
            max_usage: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
            created_by_admin: –ò–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —Å–æ–∑–¥–∞–≤—à–µ–≥–æ –∫–ª—é—á
            ip_whitelist: –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö IP (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            notes: –ó–∞–º–µ—Ç–∫–∏
        
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (raw_key, key_info)
        """
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞
        raw_key = secrets.token_urlsafe(32)
        key_hash = hashlib.sha256(raw_key.encode()).hexdigest()
        
        created_at = datetime.now()
        expires_at = created_at + timedelta(minutes=ttl_minutes)
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO temp_keys (key_hash, client_name, created_at, expires_at,
                                 valid_hours, status, usage_count, max_usage,
                                 created_by_admin, ip_whitelist, notes)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            key_hash,
            client_name,
            created_at.isoformat(),
            expires_at.isoformat(),
            json.dumps(valid_hours),
            'active',
            0,
            max_usage,
            created_by_admin,
            json.dumps(ip_whitelist) if ip_whitelist else None,
            notes
        ))
        
        key_id = cursor.lastrowid
        conn.commit()
        conn.close()
        
        print(f"‚úÖ –ö–ª—é—á —Å–æ–∑–¥–∞–Ω –¥–ª—è '{client_name}'")
        print(f"   –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: {ttl_minutes} –º–∏–Ω—É—Ç")
        print(f"   –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: {valid_hours}")
        print(f"   –ú–∞–∫—Å–∏–º—É–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {max_usage}")
        
        return raw_key, {
            'id': key_id,
            'client_name': client_name,
            'created_at': created_at.isoformat(),
            'expires_at': expires_at.isoformat(),
            'valid_hours': valid_hours,
            'max_usage': max_usage
        }
    
    def validate_temp_key(self, key: str, ip_address: str = None) -> Dict:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞
        
        Args:
            key: –í—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª—é—á
            ip_address: IP –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ whitelist)
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        key_hash = hashlib.sha256(key.encode()).hexdigest()
        
        conn = sqlite3.connect(self.db_path)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT * FROM temp_keys 
            WHERE key_hash = ? AND status = 'active'
        ''', (key_hash,))
        
        key_data = cursor.fetchone()
        
        if not key_data:
            conn.close()
            return {'valid': False, 'reason': 'key_not_found', 'message': '‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
        expires_at = datetime.fromisoformat(key_data['expires_at'])
        if datetime.now() > expires_at:
            conn.close()
            return {'valid': False, 'reason': 'key_expired', 'message': '‚ùå –ö–ª—é—á –∏—Å—Ç—ë–∫'}
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (—á–∞—Å—ã —Ä–∞–±–æ—Ç—ã)
        valid_hours = json.loads(key_data['valid_hours'])
        current_hour = datetime.now().hour
        if current_hour not in valid_hours:
            conn.close()
            return {
                'valid': False, 
                'reason': 'outside_working_hours', 
                'message': f'‚ùå –í–Ω–µ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤. –î–æ—Å—Ç—É–ø–Ω–æ: {valid_hours}',
                'current_hour': current_hour,
                'valid_hours': valid_hours
            }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        if key_data['usage_count'] >= key_data['max_usage']:
            conn.close()
            return {'valid': False, 'reason': 'usage_limit_exceeded', 'message': '‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è'}
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ IP whitelist (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
        if key_data['ip_whitelist'] and ip_address:
            whitelist = json.loads(key_data['ip_whitelist'])
            if ip_address not in whitelist:
                conn.close()
                return {'valid': False, 'reason': 'ip_not_whitelisted', 'message': '‚ùå IP –∞–¥—Ä–µ—Å –Ω–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ'}
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        cursor.execute('''
            UPDATE temp_keys 
            SET usage_count = usage_count + 1,
                last_used_at = ?
            WHERE id = ?
        ''', (datetime.now().isoformat(), key_data['id']))
        
        conn.commit()
        conn.close()
        
        return {
            'valid': True,
            'client_name': key_data['client_name'],
            'usage_count': key_data['usage_count'] + 1,
            'max_usage': key_data['max_usage'],
            'expires_at': key_data['expires_at']
        }
    
    def revoke_temp_key(self, key_hash: str) -> bool:
        """
        –û—Ç–∑—ã–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞
        
        Args:
            key_hash: –•—ç—à –∫–ª—é—á–∞
        
        Returns:
            True –µ—Å–ª–∏ –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–∑–≤–∞–Ω
        """
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            UPDATE temp_keys 
            SET status = 'revoked' 
            WHERE key_hash = ?
        ''', (key_hash,))
        
        rows_affected = cursor.rowcount
        conn.commit()
        conn.close()
        
        if rows_affected > 0:
            print(f"‚úÖ –ö–ª—é—á –æ—Ç–æ–∑–≤–∞–Ω: {key_hash[:16]}...")
            return True
        else:
            print(f"‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω: {key_hash[:16]}...")
            return False
    
    def list_temp_keys(self, status: str = None) -> List[Dict]:
        """
        –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
        
        Args:
            status: –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É (active, expired, revoked)
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–ª—é—á–∞—Ö
        """
        conn = sqlite3.connect(self.db_path)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        if status:
            cursor.execute('SELECT * FROM temp_keys WHERE status = ? ORDER BY created_at DESC', (status,))
        else:
            cursor.execute('SELECT * FROM temp_keys ORDER BY created_at DESC')
        
        keys = []
        for row in cursor.fetchall():
            keys.append({
                'id': row['id'],
                'key_hash': row['key_hash'][:16] + "...",  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ
                'client_name': row['client_name'],
                'created_at': row['created_at'],
                'expires_at': row['expires_at'],
                'valid_hours': json.loads(row['valid_hours']),
                'status': row['status'],
                'usage_count': row['usage_count'],
                'max_usage': row['max_usage'],
                'last_used_at': row['last_used_at'],
                'created_by_admin': row['created_by_admin']
            })
        
        conn.close()
        return keys
    
    def cleanup_expired_keys(self) -> int:
        """
        –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç—ë–∫—à–∏—Ö –∫–ª—é—á–µ–π
        
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        """
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        current_time = datetime.now().isoformat()
        
        cursor.execute('''
            UPDATE temp_keys 
            SET status = 'expired' 
            WHERE status = 'active' AND expires_at < ?
        ''', (current_time,))
        
        rows_affected = cursor.rowcount
        conn.commit()
        conn.close()
        
        if rows_affected > 0:
            print(f"üóëÔ∏è –ò—Å—Ç–µ–∫–ª–æ –∫–ª—é—á–µ–π: {rows_affected}")
        
        return rows_affected
    
    # ============================================
    # –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
    # ============================================
    
    def log_access(self, user_type: str, identifier: str, endpoint: str, 
                   method: str, status_code: int, ip_address: str = None,
                   user_agent: str = None, hidden_mode: bool = False):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ
        
        Args:
            user_type: –¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (admin, client)
            identifier: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (username –∏–ª–∏ client_name)
            endpoint: –≠–Ω–¥–ø–æ–∏–Ω—Ç API
            method: HTTP –º–µ—Ç–æ–¥
            status_code: HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥
            ip_address: IP –∞–¥—Ä–µ—Å
            user_agent: User-Agent
            hidden_mode: –°–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º (–Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ –æ–±—â–∏—Ö –ª–æ–≥–∞—Ö)
        """
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO access_logs (user_type, identifier, endpoint, method, 
                                    status_code, timestamp, ip_address, 
                                    user_agent, hidden_mode)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            user_type,
            identifier,
            endpoint,
            method,
            status_code,
            datetime.now().isoformat(),
            ip_address,
            user_agent,
            1 if hidden_mode else 0
        ))
        
        conn.commit()
        conn.close()
    
    def get_access_logs(self, limit: int = 100, include_hidden: bool = False) -> List[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –¥–æ—Å—Ç—É–ø–∞
        
        Args:
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            include_hidden: –í–∫–ª—é—á–∞—Ç—å —Å–∫—Ä—ã—Ç—ã–µ –∑–∞–ø–∏—Å–∏
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –ª–æ–≥–∞–º–∏
        """
        conn = sqlite3.connect(self.db_path)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        if include_hidden:
            cursor.execute('SELECT * FROM access_logs ORDER BY timestamp DESC LIMIT ?', (limit,))
        else:
            cursor.execute('''
                SELECT * FROM access_logs 
                WHERE hidden_mode = 0 
                ORDER BY timestamp DESC LIMIT ?
            ''', (limit,))
        
        logs = [dict(row) for row in cursor.fetchall()]
        conn.close()
        
        return logs


# ============================================
# –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
# ============================================

if __name__ == "__main__":
    print("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
    print("üîê –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò")
    print("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    auth = AuthManager(
        db_path="data/auth.db",
        secret_key="your-secret-key-change-in-production"
    )
    
    print("\n1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
    try:
        admin = auth.create_admin(
            username="admin",
            password="secure_password_123",
            role="super_admin"
        )
        print(f"   ID: {admin['id']}")
        print(f"   –†–æ–ª—å: {admin['role_name']}")
        print(f"   –ü—Ä–∞–≤–∞: {', '.join(admin['permissions'])}")
    except ValueError as e:
        print(f"   {e}")
    
    print("\n2Ô∏è‚É£ –í—Ö–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
    result = auth.authenticate_admin("admin", "secure_password_123", hidden_mode=True)
    if result:
        print(f"   –¢–æ–∫–µ–Ω: {result['token'][:50]}...")
        print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {result['user']['username']}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
        print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞...")
        payload = auth.verify_admin_token(result['token'])
        if payload:
            print(f"   ‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω")
            print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {payload['username']}")
            print(f"   –ü—Ä–∞–≤–∞: {', '.join(payload['permissions'])}")
    
    print("\n4Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞...")
    raw_key, key_info = auth.generate_temp_key(
        client_name="–ö–ª–∏–µ–Ω—Ç –ê",
        valid_hours=[9, 10, 11, 14, 15, 16, 17, 18, 19, 20],
        ttl_minutes=120,
        max_usage=500,
        created_by_admin="admin"
    )
    
    print(f"\n   ‚ö†Ô∏è –í–ê–ñ–ù–û: –ö–ª—é—á –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑!")
    print(f"   –ö–ª—é—á: {raw_key}")
    print(f"   –ö–ª–∏–µ–Ω—Ç: {key_info['client_name']}")
    print(f"   –ò—Å—Ç–µ–∫–∞–µ—Ç: {key_info['expires_at']}")
    
    print("\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞...")
    validation = auth.validate_temp_key(raw_key)
    if validation['valid']:
        print(f"   ‚úÖ –ö–ª—é—á –≤–∞–ª–∏–¥–µ–Ω")
        print(f"   –ö–ª–∏–µ–Ω—Ç: {validation['client_name']}")
        print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {validation['usage_count']}/{validation['max_usage']}")
    else:
        print(f"   {validation['message']}")
    
    print("\n6Ô∏è‚É£ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª—é—á–µ–π...")
    keys = auth.list_temp_keys()
    print(f"   –í—Å–µ–≥–æ –∫–ª—é—á–µ–π: {len(keys)}")
    for key in keys[:3]:
        print(f"   - {key['client_name']}: {key['usage_count']}/{key['max_usage']} ({key['status']})")
    
    print("\n7Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç—ë–∫—à–∏—Ö –∫–ª—é—á–µ–π...")
    expired_count = auth.cleanup_expired_keys()
    print(f"   –û—á–∏—â–µ–Ω–æ: {expired_count} –∫–ª—é—á–µ–π")
    
    print("\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
    print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
