"""
üö® RULETTT Advanced Error Tracker
–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º, stack traces –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –æ—Ç—á—ë—Ç–∞–º–∏
"""

import traceback
import sys
import json
import sqlite3
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List, Optional, Callable
from collections import deque
import threading
import hashlib

from src.logger import setup_logger, log_error

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞
ERRORS_DB = Path(__file__).parent.parent / "data" / "errors.db"
ERRORS_DB.parent.mkdir(exist_ok=True)

# Logger –¥–ª—è error tracker
tracker_logger = setup_logger('rulettt.error_tracker', json_format=True)

class UserActionTracker:
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –æ—à–∏–±–∫–æ–π"""
    
    def __init__(self, max_actions: int = 50):
        self.max_actions = max_actions
        self._actions = deque(maxlen=max_actions)
        self._lock = threading.Lock()
    
    def track_action(self, action_type: str, details: Dict[str, Any]):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with self._lock:
            action = {
                'timestamp': datetime.utcnow().isoformat(),
                'type': action_type,
                'details': details
            }
            self._actions.append(action)
            tracker_logger.debug(f"Tracked action: {action_type}", extra=details)
    
    def get_recent_actions(self, count: Optional[int] = None) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–µ–π—Å—Ç–≤–∏–π"""
        with self._lock:
            if count is None:
                return list(self._actions)
            return list(self._actions)[-count:]
    
    def clear(self):
        """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–µ–π—Å—Ç–≤–∏–π"""
        with self._lock:
            self._actions.clear()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä –¥–µ–π—Å—Ç–≤–∏–π
action_tracker = UserActionTracker()

class ErrorDatabase:
    """–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–æ–∫"""
    
    def __init__(self, db_path: Path = ERRORS_DB):
        self.db_path = db_path
        self._init_db()
    
    def _init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –ë–î"""
        with sqlite3.connect(self.db_path) as conn:
            conn.execute("""
                CREATE TABLE IF NOT EXISTS errors (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    error_hash TEXT NOT NULL,
                    timestamp TEXT NOT NULL,
                    level TEXT NOT NULL,
                    error_type TEXT NOT NULL,
                    error_message TEXT NOT NULL,
                    module TEXT,
                    function TEXT,
                    line_number INTEGER,
                    stack_trace TEXT,
                    context TEXT,
                    user_actions TEXT,
                    user_id TEXT,
                    session_id TEXT,
                    request_id TEXT,
                    resolved BOOLEAN DEFAULT 0,
                    resolution_notes TEXT,
                    occurrences INTEGER DEFAULT 1,
                    first_seen TEXT,
                    last_seen TEXT
                )
            """)
            
            conn.execute("""
                CREATE INDEX IF NOT EXISTS idx_error_hash ON errors(error_hash)
            """)
            
            conn.execute("""
                CREATE INDEX IF NOT EXISTS idx_timestamp ON errors(timestamp)
            """)
            
            conn.execute("""
                CREATE INDEX IF NOT EXISTS idx_resolved ON errors(resolved)
            """)
            
            conn.commit()
    
    def save_error(self, error_data: Dict[str, Any]) -> int:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—à–∏–±–∫—É –≤ –ë–î
        Returns: ID –∑–∞–ø–∏—Å–∏
        """
        error_hash = self._generate_error_hash(error_data)
        
        with sqlite3.connect(self.db_path) as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –æ—à–∏–±–∫–∞
            existing = conn.execute(
                "SELECT id, occurrences FROM errors WHERE error_hash = ? AND resolved = 0",
                (error_hash,)
            ).fetchone()
            
            if existing:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
                error_id, occurrences = existing
                conn.execute(
                    "UPDATE errors SET occurrences = ?, last_seen = ? WHERE id = ?",
                    (occurrences + 1, error_data['timestamp'], error_id)
                )
                tracker_logger.info(
                    f"Updated existing error #{error_id}, occurrences: {occurrences + 1}"
                )
                return error_id
            else:
                # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                cursor = conn.execute("""
                    INSERT INTO errors (
                        error_hash, timestamp, level, error_type, error_message,
                        module, function, line_number, stack_trace, context,
                        user_actions, user_id, session_id, request_id,
                        first_seen, last_seen
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (
                    error_hash,
                    error_data['timestamp'],
                    error_data.get('level', 'ERROR'),
                    error_data['error_type'],
                    error_data['error_message'],
                    error_data.get('module'),
                    error_data.get('function'),
                    error_data.get('line_number'),
                    error_data.get('stack_trace'),
                    json.dumps(error_data.get('context', {}), ensure_ascii=False),
                    json.dumps(error_data.get('user_actions', []), ensure_ascii=False),
                    error_data.get('user_id'),
                    error_data.get('session_id'),
                    error_data.get('request_id'),
                    error_data['timestamp'],
                    error_data['timestamp']
                ))
                error_id = cursor.lastrowid
                tracker_logger.info(f"Saved new error #{error_id}")
                return error_id
    
    def get_unresolved_errors(self, limit: int = 100) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ—Ä–µ—à—ë–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫"""
        with sqlite3.connect(self.db_path) as conn:
            conn.row_factory = sqlite3.Row
            rows = conn.execute("""
                SELECT * FROM errors 
                WHERE resolved = 0 
                ORDER BY occurrences DESC, last_seen DESC
                LIMIT ?
            """, (limit,)).fetchall()
            
            return [dict(row) for row in rows]
    
    def get_error_statistics(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—à–∏–±–∫–∞–º"""
        with sqlite3.connect(self.db_path) as conn:
            stats = {}
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            stats['total_errors'] = conn.execute(
                "SELECT COUNT(*) FROM errors"
            ).fetchone()[0]
            
            # –ù–µ—Ä–µ—à—ë–Ω–Ω—ã–µ
            stats['unresolved_errors'] = conn.execute(
                "SELECT COUNT(*) FROM errors WHERE resolved = 0"
            ).fetchone()[0]
            
            # –ü–æ —Ç–∏–ø–∞–º
            stats['by_type'] = dict(conn.execute("""
                SELECT error_type, COUNT(*) as count 
                FROM errors WHERE resolved = 0
                GROUP BY error_type
                ORDER BY count DESC
                LIMIT 10
            """).fetchall())
            
            # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            stats['last_24h'] = conn.execute("""
                SELECT COUNT(*) FROM errors 
                WHERE datetime(timestamp) > datetime('now', '-1 day')
            """).fetchone()[0]
            
            # –¢–æ–ø –º–æ–¥—É–ª–µ–π —Å –æ—à–∏–±–∫–∞–º–∏
            stats['top_modules'] = dict(conn.execute("""
                SELECT module, COUNT(*) as count 
                FROM errors WHERE resolved = 0 AND module IS NOT NULL
                GROUP BY module
                ORDER BY count DESC
                LIMIT 5
            """).fetchall())
            
            return stats
    
    def mark_resolved(self, error_id: int, notes: str = ""):
        """–ü–æ–º–µ—á–∞–µ—Ç –æ—à–∏–±–∫—É –∫–∞–∫ —Ä–µ—à—ë–Ω–Ω—É—é"""
        with sqlite3.connect(self.db_path) as conn:
            conn.execute(
                "UPDATE errors SET resolved = 1, resolution_notes = ? WHERE id = ?",
                (notes, error_id)
            )
            tracker_logger.info(f"Marked error #{error_id} as resolved")
    
    def _generate_error_hash(self, error_data: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ö—ç—à –¥–ª—è –æ—à–∏–±–∫–∏ (–¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏)"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏, –º–æ–¥—É–ª—å, —Ñ—É–Ω–∫—Ü–∏—é –∏ –ø–µ—Ä–≤—ã–µ 2 —Å—Ç—Ä–æ–∫–∏ —Å—Ç–µ–∫—Ç—Ä–µ–π—Å–∞
        hash_parts = [
            error_data['error_type'],
            error_data.get('module', ''),
            error_data.get('function', ''),
        ]
        
        if error_data.get('stack_trace'):
            # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ —Å—Ç–µ–∫—Ç—Ä–µ–π—Å–∞
            hash_parts.append(error_data['stack_trace'][:200])
        
        hash_string = '|'.join(str(p) for p in hash_parts)
        return hashlib.md5(hash_string.encode()).hexdigest()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ë–î –æ—à–∏–±–æ–∫
error_db = ErrorDatabase()

class ErrorTracker:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫"""
    
    def __init__(self):
        self.error_handlers: List[Callable] = []
        self.context_data: Dict[str, Any] = {}
    
    def add_error_handler(self, handler: Callable):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ (–¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —Ç.–¥.)"""
        self.error_handlers.append(handler)
    
    def set_context(self, **kwargs):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –æ—à–∏–±–æ–∫"""
        self.context_data.update(kwargs)
    
    def clear_context(self):
        """–û—á–∏—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        self.context_data.clear()
    
    def track_error(
        self,
        exception: Exception,
        level: str = "ERROR",
        user_id: Optional[str] = None,
        session_id: Optional[str] = None,
        request_id: Optional[str] = None,
        additional_context: Optional[Dict] = None
    ) -> int:
        """
        –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—à–∏–±–∫—É —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        
        Returns: ID –æ—à–∏–±–∫–∏ –≤ –ë–î
        """
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
        exc_type, exc_value, exc_traceback = sys.exc_info()
        
        error_data = {
            'timestamp': datetime.utcnow().isoformat(),
            'level': level,
            'error_type': type(exception).__name__,
            'error_message': str(exception),
            'stack_trace': ''.join(traceback.format_exception(
                exc_type, exc_value, exc_traceback
            )) if exc_traceback else traceback.format_exc(),
            'user_id': user_id,
            'session_id': session_id,
            'request_id': request_id,
            'user_actions': action_tracker.get_recent_actions(20),
            'context': {
                **self.context_data,
                **(additional_context or {})
            }
        }
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ –æ—à–∏–±–∫–∏
        if exc_traceback:
            tb = traceback.extract_tb(exc_traceback)
            if tb:
                last_frame = tb[-1]
                error_data['module'] = Path(last_frame.filename).stem
                error_data['function'] = last_frame.name
                error_data['line_number'] = last_frame.lineno
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        log_error(
            f"{error_data['error_type']}: {error_data['error_message']}",
            exc_info=True,
            **{
                'user_id': user_id,
                'session_id': session_id,
                'request_id': request_id
            }
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        error_id = error_db.save_error(error_data)
        
        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
        for handler in self.error_handlers:
            try:
                handler(error_data, error_id)
            except Exception as e:
                tracker_logger.error(
                    f"Error handler failed: {e}",
                    exc_info=True
                )
        
        return error_id
    
    def track_exception_decorator(self, **kwargs):
        """
        –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö
        
        Usage:
            @error_tracker.track_exception_decorator(user_id='123')
            def my_function():
                raise ValueError("Error")
        """
        def decorator(func):
            def wrapper(*args, **func_kwargs):
                try:
                    return func(*args, **func_kwargs)
                except Exception as e:
                    self.track_error(e, **kwargs)
                    raise
            return wrapper
        return decorator

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π error tracker
error_tracker = ErrorTracker()

def track_action(action_type: str, **details):
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    action_tracker.track_action(action_type, details)

def get_error_report() -> Dict[str, Any]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –æ—à–∏–±–∫–∞–º"""
    stats = error_db.get_error_statistics()
    unresolved = error_db.get_unresolved_errors(limit=10)
    
    return {
        'generated_at': datetime.utcnow().isoformat(),
        'statistics': stats,
        'top_unresolved_errors': unresolved
    }

if __name__ == "__main__":
    print("üö® Testing RULETTT Error Tracker...")
    print(f"üìÅ Database: {ERRORS_DB}")
    print()
    
    # –¢–µ—Å—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
    track_action('button_click', button='test_button', page='dashboard')
    track_action('navigation', from_page='dashboard', to_page='analytics')
    track_action('data_load', table='roulette_spins', rows=100)
    
    # –¢–µ—Å—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏
    try:
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        result = 10 / 0
    except Exception as e:
        error_id = error_tracker.track_error(
            e,
            user_id='test_user',
            session_id='test_session',
            additional_context={'operation': 'division_test'}
        )
        print(f"‚úÖ Error tracked with ID: {error_id}")
    
    # –¢–µ—Å—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—à–∏–±–∫–∏ (–¥–æ–ª–∂–Ω–∞ —É–≤–µ–ª–∏—á–∏—Ç—å —Å—á—ë—Ç—á–∏–∫)
    try:
        result = 10 / 0
    except Exception as e:
        error_id = error_tracker.track_error(e, user_id='test_user')
        print(f"‚úÖ Same error tracked again with ID: {error_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\nüìä Error Statistics:")
    report = get_error_report()
    print(json.dumps(report['statistics'], indent=2, ensure_ascii=False))
    
    print("\n‚úÖ Error tracker test completed!")
