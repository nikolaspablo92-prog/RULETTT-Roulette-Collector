"""
üé≤ RULETTT - API –°–µ—Ä–≤–µ—Ä –¥–ª—è –û–±–ª–∞—á–Ω–æ–≥–æ –•—Ä–∞–Ω–µ–Ω–∏—è
===============================================

REST API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –∏ –º–æ–±–∏–ª—å–Ω—ã–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏
"""

from flask import Flask, jsonify, request, send_file
from flask_cors import CORS
from datetime import datetime, timedelta
import json
import sqlite3
import os
from typing import Dict, List, Optional

app = Flask(__name__)
CORS(app)  # –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞

class RouletteAPI:
    """API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ —Ä—É–ª–µ—Ç–∫–∏"""
    
    def __init__(self):
        self.db_path = "data/rulettt_cloud.db"
        self.ensure_database()
    
    def ensure_database(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if not os.path.exists("data"):
            os.makedirs("data")
            
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS roulette_spins (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                casino_name TEXT NOT NULL,
                number INTEGER NOT NULL,
                color TEXT NOT NULL,
                session_id TEXT,
                table_id TEXT,
                synced_to_cloud BOOLEAN DEFAULT FALSE
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS strategy_results (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                strategy_name TEXT NOT NULL,
                bet_amount REAL NOT NULL,
                win_amount REAL DEFAULT 0,
                session_id TEXT,
                profit REAL GENERATED ALWAYS AS (win_amount - bet_amount) STORED
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS team_sessions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                session_id TEXT UNIQUE NOT NULL,
                team_name TEXT NOT NULL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                active BOOLEAN DEFAULT TRUE,
                total_spins INTEGER DEFAULT 0,
                total_profit REAL DEFAULT 0
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS chat_messages (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                username TEXT NOT NULL,
                message TEXT NOT NULL,
                session_id TEXT,
                message_type TEXT DEFAULT 'text',
                FOREIGN KEY (session_id) REFERENCES team_sessions (session_id)
            )
        ''')
        
        conn.commit()
        conn.close()

api_manager = RouletteAPI()

@app.route('/api/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API"""
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'version': '1.0.0',
        'service': 'RULETTT Cloud API'
    })

@app.route('/api/spins', methods=['POST'])
def add_spin():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ø–∏–Ω–∞ —Ä—É–ª–µ—Ç–∫–∏"""
    try:
        data = request.get_json()
        
        required_fields = ['casino_name', 'number', 'color']
        if not all(field in data for field in required_fields):
            return jsonify({'error': '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è'}), 400
        
        conn = sqlite3.connect(api_manager.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO roulette_spins 
            (casino_name, number, color, session_id, table_id)
            VALUES (?, ?, ?, ?, ?)
        ''', (
            data['casino_name'],
            data['number'],
            data['color'],
            data.get('session_id'),
            data.get('table_id')
        ))
        
        spin_id = cursor.lastrowid
        conn.commit()
        conn.close()
        
        return jsonify({
            'success': True,
            'spin_id': spin_id,
            'message': f'–°–ø–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω: {data["number"]} ({data["color"]})'
        }), 201
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏–Ω–∞: {str(e)}'}), 500

@app.route('/api/spins', methods=['GET'])
def get_spins():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–ø–∏–Ω–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
    try:
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        casino = request.args.get('casino')
        session_id = request.args.get('session_id')
        limit = int(request.args.get('limit', 100))
        offset = int(request.args.get('offset', 0))
        
        conn = sqlite3.connect(api_manager.db_path)
        conn.row_factory = sqlite3.Row  # –í–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ª–æ–≤–∞—Ä–∏
        cursor = conn.cursor()
        
        # –°—Ç—Ä–æ–∏–º SQL –∑–∞–ø—Ä–æ—Å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        query = "SELECT * FROM roulette_spins WHERE 1=1"
        params = []
        
        if casino:
            query += " AND casino_name = ?"
            params.append(casino)
            
        if session_id:
            query += " AND session_id = ?"
            params.append(session_id)
        
        query += " ORDER BY timestamp DESC LIMIT ? OFFSET ?"
        params.extend([limit, offset])
        
        cursor.execute(query, params)
        spins = [dict(row) for row in cursor.fetchall()]
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        count_query = "SELECT COUNT(*) FROM roulette_spins WHERE 1=1"
        count_params = []
        
        if casino:
            count_query += " AND casino_name = ?"
            count_params.append(casino)
            
        if session_id:
            count_query += " AND session_id = ?"
            count_params.append(session_id)
        
        cursor.execute(count_query, count_params)
        total_count = cursor.fetchone()[0]
        
        conn.close()
        
        return jsonify({
            'spins': spins,
            'pagination': {
                'total': total_count,
                'limit': limit,
                'offset': offset,
                'has_more': (offset + limit) < total_count
            }
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏–Ω–æ–≤: {str(e)}'}), 500

@app.route('/api/statistics', methods=['GET'])
def get_statistics():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å–ø–∏–Ω–∞–º –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º"""
    try:
        session_id = request.args.get('session_id')
        days = int(request.args.get('days', 7))  # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π
        
        conn = sqlite3.connect(api_manager.db_path)
        cursor = conn.cursor()
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        date_filter = datetime.now() - timedelta(days=days)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ø–∏–Ω–æ–≤
        spin_query = '''
            SELECT 
                casino_name,
                COUNT(*) as total_spins,
                COUNT(CASE WHEN color = 'red' THEN 1 END) as red_count,
                COUNT(CASE WHEN color = 'black' THEN 1 END) as black_count,
                COUNT(CASE WHEN color = 'green' THEN 1 END) as green_count,
                AVG(number) as avg_number
            FROM roulette_spins 
            WHERE timestamp >= ?
        '''
        
        params = [date_filter.isoformat()]
        
        if session_id:
            spin_query += " AND session_id = ?"
            params.append(session_id)
        
        spin_query += " GROUP BY casino_name"
        
        cursor.execute(spin_query, params)
        spin_stats = []
        for row in cursor.fetchall():
            spin_stats.append({
                'casino': row[0],
                'total_spins': row[1],
                'red_count': row[2],
                'black_count': row[3],
                'green_count': row[4],
                'avg_number': round(row[5], 2) if row[5] else 0,
                'red_percentage': round((row[2] / row[1]) * 100, 1) if row[1] > 0 else 0,
                'black_percentage': round((row[3] / row[1]) * 100, 1) if row[1] > 0 else 0,
                'green_percentage': round((row[4] / row[1]) * 100, 1) if row[1] > 0 else 0
            })
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        strategy_query = '''
            SELECT 
                strategy_name,
                COUNT(*) as sessions,
                SUM(profit) as total_profit,
                AVG(profit) as avg_profit,
                MAX(profit) as max_profit,
                MIN(profit) as min_profit,
                COUNT(CASE WHEN profit > 0 THEN 1 END) as winning_sessions
            FROM strategy_results 
            WHERE timestamp >= ?
        '''
        
        strategy_params = [date_filter.isoformat()]
        
        if session_id:
            strategy_query += " AND session_id = ?"
            strategy_params.append(session_id)
        
        strategy_query += " GROUP BY strategy_name"
        
        cursor.execute(strategy_query, strategy_params)
        strategy_stats = []
        for row in cursor.fetchall():
            win_rate = (row[7] / row[1]) * 100 if row[1] > 0 else 0
            strategy_stats.append({
                'strategy': row[0],
                'sessions': row[1],
                'total_profit': round(row[2], 2) if row[2] else 0,
                'avg_profit': round(row[3], 2) if row[3] else 0,
                'max_profit': round(row[4], 2) if row[4] else 0,
                'min_profit': round(row[5], 2) if row[5] else 0,
                'winning_sessions': row[7],
                'win_rate': round(win_rate, 1)
            })
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor.execute('''
            SELECT 
                COUNT(*) as total_spins,
                COUNT(DISTINCT casino_name) as casinos_count,
                COUNT(DISTINCT session_id) as sessions_count
            FROM roulette_spins 
            WHERE timestamp >= ?
        ''', [date_filter.isoformat()])
        
        general_stats = cursor.fetchone()
        
        conn.close()
        
        return jsonify({
            'period': f'Last {days} days',
            'general': {
                'total_spins': general_stats[0],
                'casinos_count': general_stats[1],
                'sessions_count': general_stats[2]
            },
            'casinos': spin_stats,
            'strategies': strategy_stats,
            'generated_at': datetime.now().isoformat()
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}'}), 500

@app.route('/api/strategies', methods=['POST'])
def add_strategy_result():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    try:
        data = request.get_json()
        
        required_fields = ['strategy_name', 'bet_amount', 'win_amount']
        if not all(field in data for field in required_fields):
            return jsonify({'error': '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è'}), 400
        
        conn = sqlite3.connect(api_manager.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO strategy_results 
            (strategy_name, bet_amount, win_amount, session_id)
            VALUES (?, ?, ?, ?)
        ''', (
            data['strategy_name'],
            data['bet_amount'],
            data['win_amount'],
            data.get('session_id')
        ))
        
        result_id = cursor.lastrowid
        profit = data['win_amount'] - data['bet_amount']
        
        conn.commit()
        conn.close()
        
        return jsonify({
            'success': True,
            'result_id': result_id,
            'profit': round(profit, 2),
            'message': f'–†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω: {profit:+.2f}'
        }), 201
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {str(e)}'}), 500

@app.route('/api/sessions', methods=['POST'])
def create_team_session():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏"""
    try:
        data = request.get_json()
        
        if 'team_name' not in data:
            return jsonify({'error': '–¢—Ä–µ–±—É–µ—Ç—Å—è –∏–º—è –∫–æ–º–∞–Ω–¥—ã'}), 400
        
        session_id = f"team_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        
        conn = sqlite3.connect(api_manager.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO team_sessions (session_id, team_name)
            VALUES (?, ?)
        ''', (session_id, data['team_name']))
        
        conn.commit()
        conn.close()
        
        return jsonify({
            'success': True,
            'session_id': session_id,
            'team_name': data['team_name'],
            'created_at': datetime.now().isoformat()
        }), 201
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {str(e)}'}), 500

@app.route('/api/sessions', methods=['GET'])
def get_team_sessions():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
    try:
        conn = sqlite3.connect(api_manager.db_path)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT s.*, 
                   COUNT(rs.id) as spin_count,
                   COUNT(sr.id) as strategy_count
            FROM team_sessions s
            LEFT JOIN roulette_spins rs ON s.session_id = rs.session_id
            LEFT JOIN strategy_results sr ON s.session_id = sr.session_id
            GROUP BY s.id
            ORDER BY s.created_at DESC
        ''')
        
        sessions = []
        for row in cursor.fetchall():
            sessions.append({
                'session_id': row['session_id'],
                'team_name': row['team_name'],
                'created_at': row['created_at'],
                'active': bool(row['active']),
                'spin_count': row['spin_count'],
                'strategy_count': row['strategy_count']
            })
        
        conn.close()
        
        return jsonify({'sessions': sessions})
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π: {str(e)}'}), 500

@app.route('/api/export/<format>', methods=['GET'])
def export_data(format):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö"""
    try:
        session_id = request.args.get('session_id')
        days = int(request.args.get('days', 30))
        
        date_filter = datetime.now() - timedelta(days=days)
        
        conn = sqlite3.connect(api_manager.db_path)
        
        # –°—Ç—Ä–æ–∏–º –∑–∞–ø—Ä–æ—Å—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        spin_query = "SELECT * FROM roulette_spins WHERE timestamp >= ?"
        strategy_query = "SELECT * FROM strategy_results WHERE timestamp >= ?"
        params = [date_filter.isoformat()]
        
        if session_id:
            spin_query += " AND session_id = ?"
            strategy_query += " AND session_id = ?"
            params.append(session_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        cursor = conn.cursor()
        cursor.execute(spin_query, params)
        spins = [dict(zip([col[0] for col in cursor.description], row)) 
                for row in cursor.fetchall()]
        
        cursor.execute(strategy_query, params)
        strategies = [dict(zip([col[0] for col in cursor.description], row)) 
                     for row in cursor.fetchall()]
        
        conn.close()
        
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        
        if format.lower() == 'json':
            filename = f"rulettt_export_{timestamp}.json"
            filepath = f"exports/{filename}"
            
            export_data = {
                'export_info': {
                    'timestamp': datetime.now().isoformat(),
                    'period_days': days,
                    'session_id': session_id,
                    'total_spins': len(spins),
                    'total_strategies': len(strategies)
                },
                'roulette_spins': spins,
                'strategy_results': strategies
            }
            
            os.makedirs("exports", exist_ok=True)
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(export_data, f, indent=2, ensure_ascii=False, default=str)
            
            return send_file(filepath, as_attachment=True, 
                           download_name=filename, mimetype='application/json')
        
        else:
            return jsonify({'error': '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç JSON'}), 400
            
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}'}), 500

@app.route('/api/realtime/feed', methods=['GET'])
def get_realtime_feed():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        limit = int(request.args.get('limit', 50))
        
        conn = sqlite3.connect(api_manager.db_path)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–ø–∏–Ω—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        cursor.execute('''
            SELECT 'spin' as type, timestamp, casino_name as source, 
                   number || ' (' || color || ')' as description,
                   session_id
            FROM roulette_spins
            UNION ALL
            SELECT 'strategy' as type, timestamp, strategy_name as source,
                   '–ü—Ä–∏–±—ã–ª—å: ' || printf('%.2f', win_amount - bet_amount) as description,
                   session_id
            FROM strategy_results
            ORDER BY timestamp DESC
            LIMIT ?
        ''', [limit])
        
        feed = []
        for row in cursor.fetchall():
            feed.append({
                'type': row['type'],
                'timestamp': row['timestamp'],
                'source': row['source'],
                'description': row['description'],
                'session_id': row['session_id']
            })
        
        conn.close()
        
        return jsonify({
            'feed': feed,
            'generated_at': datetime.now().isoformat()
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–µ–Ω—Ç—ã: {str(e)}'}), 500

@app.route('/api/chat', methods=['GET'])
def get_chat_messages():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞"""
    try:
        session_id = request.args.get('session_id', 'default')
        limit = request.args.get('limit', 50, type=int)
        
        conn = sqlite3.connect(api_manager.db_path)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT * FROM chat_messages 
            WHERE session_id = ? OR session_id IS NULL
            ORDER BY timestamp DESC 
            LIMIT ?
        ''', (session_id, limit))
        
        messages = []
        for row in cursor.fetchall():
            messages.append({
                'id': row['id'],
                'timestamp': row['timestamp'],
                'username': row['username'],
                'message': row['message'],
                'session_id': row['session_id'],
                'message_type': row['message_type']
            })
        
        conn.close()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
        messages.reverse()
        
        return jsonify({
            'messages': messages,
            'count': len(messages),
            'session_id': session_id
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}'}), 500

@app.route('/api/chat', methods=['POST'])
def send_chat_message():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç"""
    try:
        data = request.get_json()
        
        required_fields = ['username', 'message']
        if not all(field in data for field in required_fields):
            return jsonify({'error': '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (username, message)'}), 400
        
        session_id = data.get('session_id', 'default')
        message_type = data.get('message_type', 'text')
        
        conn = sqlite3.connect(api_manager.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO chat_messages (username, message, session_id, message_type)
            VALUES (?, ?, ?, ?)
        ''', (data['username'], data['message'], session_id, message_type))
        
        conn.commit()
        message_id = cursor.lastrowid
        conn.close()
        
        return jsonify({
            'success': True,
            'message_id': message_id,
            'message': f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {data["username"]} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}'}), 500

@app.route('/api/chat/users', methods=['GET'])
def get_chat_users():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–∞—Ç–∞"""
    try:
        session_id = request.args.get('session_id', 'default')
        hours_ago = request.args.get('hours', 24, type=int)
        
        since_time = datetime.now() - timedelta(hours=hours_ago)
        
        conn = sqlite3.connect(api_manager.db_path)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT DISTINCT username, MAX(timestamp) as last_seen
            FROM chat_messages 
            WHERE (session_id = ? OR session_id IS NULL) 
            AND timestamp > ?
            GROUP BY username
            ORDER BY last_seen DESC
        ''', (session_id, since_time.isoformat()))
        
        users = []
        for row in cursor.fetchall():
            users.append({
                'username': row['username'],
                'last_seen': row['last_seen']
            })
        
        conn.close()
        
        return jsonify({
            'users': users,
            'count': len(users),
            'session_id': session_id
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}'}), 500

@app.route('/api/chat/ai', methods=['POST'])
def chat_with_ai():
    """AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã RULETTT"""
    try:
        data = request.get_json()
        
        required_fields = ['message']
        if not all(field in data for field in required_fields):
            return jsonify({'error': '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ message'}), 400
        
        user_message = data['message'].lower().strip()
        session_id = data.get('session_id', 'default')
        
        # –ü—Ä–æ—Å—Ç–æ–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        ai_responses = {
            '–ø—Ä–∏–≤–µ—Ç': '–ü—Ä–∏–≤–µ—Ç! üëã –Ø AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç RULETTT. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å –∞–Ω–∞–ª–∏–∑–æ–º –¥–∞–Ω–Ω—ã—Ö —Ä—É–ª–µ—Ç–∫–∏, —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏ –∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π!',
            '–ø–æ–º–æ—â—å': 'ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n‚Ä¢ "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" - –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö\n‚Ä¢ "—Å—Ç—Ä–∞—Ç–µ–≥–∏—è" - —Å–æ–≤–µ—Ç—ã –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º\n‚Ä¢ "–∫–æ–º–∞–Ω–¥–∞" - –ø–æ–º–æ—â—å —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–µ–π\n‚Ä¢ "api" - –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API',
            '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞': 'üìä –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n‚Ä¢ /api/statistics - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n‚Ä¢ Dashboard –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏\n‚Ä¢ Advanced Analytics –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞',
            '—Å—Ç—Ä–∞—Ç–µ–≥–∏—è': 'üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:\n‚Ä¢ –ú–∞—Ä—Ç–∏–Ω–≥–µ–π–ª (–≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫)\n‚Ä¢ –§–∏–±–æ–Ω–∞—á—á–∏ (—Å—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫)\n‚Ä¢ –ü–ª–æ—Å–∫–∏–µ —Å—Ç–∞–≤–∫–∏ (–Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫)\n–í—Å–µ–≥–¥–∞ –ø–æ–º–Ω–∏—Ç–µ –æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –±–∞–Ω–∫—Ä–æ–ª–ª–æ–º!',
            '–∫–æ–º–∞–Ω–¥–∞': 'üë• –î–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã:\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç —á–∞—Ç –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏\n‚Ä¢ –ù–∞–∑–Ω–∞—á–∞–π—Ç–µ —Ä–æ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º\n‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ\n‚Ä¢ –î–µ–ª–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞',
            'api': 'üîå API RULETTT:\n‚Ä¢ GET /api/health - —Å—Ç–∞—Ç—É—Å\n‚Ä¢ POST/GET /api/chat - —á–∞—Ç\n‚Ä¢ GET /api/statistics - –¥–∞–Ω–Ω—ã–µ\n‚Ä¢ POST /api/spins - –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–∏–Ω\n–ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –≤ dashboard',
            '–∫–æ–¥': 'üíª –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–¥–æ–º:\n‚Ä¢ –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –∫–æ–ª–ª–µ–∫—Ç–æ—Ä: auto_collector_console_code.js\n‚Ä¢ Python –∞–Ω–∞–ª–∏–∑: src/main.py\n‚Ä¢ API —Å–µ—Ä–≤–µ—Ä: api_server.py\n‚Ä¢ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã: webapp/',
            '–æ—à–∏–±–∫–∞': 'üêõ –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –æ—à–∏–±–æ–∫:\n1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞\n2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω\n3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ\n4. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É',
            '–∫–∞–∫': 'ü§î –û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å:\n‚Ä¢ –ö–∞–∫ —Å–æ–±–∏—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ?\n‚Ä¢ –ö–∞–∫ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã?\n‚Ä¢ –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–º–∞–Ω–¥—É?\n‚Ä¢ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API?'
        }
        
        # –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
        ai_response = None
        for key, response in ai_responses.items():
            if key in user_message:
                ai_response = response
                break
        
        # –û—Ç–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if not ai_response:
            ai_response = f'ü§ñ –ü–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "{data["message"]}"\n\n–ù–∞–ø–∏—à–∏—Ç–µ "–ø–æ–º–æ—â—å" —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —á—Ç–æ —è —É–º–µ—é, –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ RULETTT!'
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç AI –≤ —á–∞—Ç
        conn = sqlite3.connect(api_manager.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO chat_messages (username, message, session_id, message_type)
            VALUES (?, ?, ?, ?)
        ''', ('ü§ñ RULETTT AI', ai_response, session_id, 'ai'))
        
        conn.commit()
        message_id = cursor.lastrowid
        conn.close()
        
        return jsonify({
            'success': True,
            'message_id': message_id,
            'ai_response': ai_response,
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {str(e)}'}), 500

# ============ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ò –ú–û–ù–ò–¢–û–†–ò–ù–ì ============

@app.route('/api/logs', methods=['GET'])
def get_logs():
    """–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏"""
    try:
        import glob
        import re
        from pathlib import Path
        
        limit = int(request.args.get('limit', 100))
        level = request.args.get('level', '')
        
        logs = []
        log_dir = Path('logs')
        
        if not log_dir.exists():
            return jsonify([])
        
        # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤
        log_files = sorted(log_dir.glob('*.log'), key=lambda x: x.stat().st_mtime, reverse=True)
        
        for log_file in log_files[:3]:  # –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Ñ–∞–π–ª–∞
            with open(log_file, 'r', encoding='utf-8') as f:
                for line in f:
                    try:
                        # –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
                        log_entry = json.loads(line.strip())
                        if not level or log_entry.get('level') == level:
                            logs.append(log_entry)
                    except json.JSONDecodeError:
                        # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ª–æ–≥
                        match = re.match(r'(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}),\d+ - (\w+) - (.+)', line)
                        if match:
                            timestamp, log_level, message = match.groups()
                            if not level or log_level == level:
                                logs.append({
                                    'timestamp': timestamp,
                                    'level': log_level,
                                    'message': message
                                })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º
        logs.sort(key=lambda x: x.get('timestamp', ''), reverse=True)
        return jsonify(logs[:limit])
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/logs/stats', methods=['GET'])
def get_logs_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–æ–≥–æ–≤"""
    try:
        from src.error_tracker import error_db
        
        stats = error_db.get_error_statistics()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        db_path = "data/rulettt_cloud.db"
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        cursor.execute('''
            SELECT COUNT(DISTINCT session_id) 
            FROM team_sessions 
            WHERE created_at > datetime('now', '-1 hour')
        ''')
        active_sessions = cursor.fetchone()[0]
        conn.close()
        
        return jsonify({
            'total_errors': stats['total'],
            'unresolved_errors': stats['unresolved'],
            'last_24h': stats['last_24h'],
            'active_sessions': active_sessions,
            'by_type': stats['by_type'],
            'top_modules': stats['top_modules']
        })
        
    except Exception as e:
        return jsonify({
            'total_errors': 0,
            'unresolved_errors': 0,
            'last_24h': 0,
            'active_sessions': 0
        })

@app.route('/api/logs/stats/detailed', methods=['GET'])
def get_detailed_stats():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    try:
        from src.error_tracker import error_db
        
        stats = error_db.get_error_statistics()
        return jsonify(stats)
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/errors/unresolved', methods=['GET'])
def get_unresolved_errors():
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–µ—Ä–µ—à—ë–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏"""
    try:
        from src.error_tracker import error_db
        
        limit = int(request.args.get('limit', 50))
        errors = error_db.get_unresolved_errors(limit)
        
        return jsonify(errors)
        
    except Exception as e:
        return jsonify([])

@app.route('/api/errors/<int:error_id>/resolve', methods=['POST'])
def resolve_error(error_id):
    """–ü–æ–º–µ—Ç–∏—Ç—å –æ—à–∏–±–∫—É –∫–∞–∫ —Ä–µ—à—ë–Ω–Ω—É—é"""
    try:
        from src.error_tracker import error_db
        
        data = request.get_json()
        notes = data.get('notes', '')
        
        error_db.mark_resolved(error_id, notes)
        
        return jsonify({
            'success': True,
            'error_id': error_id
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/events', methods=['POST'])
def receive_event():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –æ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"""
    try:
        from src.logger import main_logger
        from src.error_tracker import action_tracker
        
        events = request.get_json()
        if not isinstance(events, list):
            events = [events]
        
        for event in events:
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            level = event.get('level', 'info').upper()
            log_func = getattr(main_logger, level.lower(), main_logger.info)
            log_func(f"Frontend event: {event.get('type')} - {json.dumps(event.get('details', {}))}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            action_tracker.track_action(
                action_type=event.get('type'),
                details=event.get('details', {})
            )
        
        return jsonify({
            'success': True,
            'received': len(events)
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/events', methods=['GET'])
def get_events():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è"""
    try:
        from src.error_tracker import action_tracker
        
        limit = int(request.args.get('limit', 100))
        actions = action_tracker.get_recent_actions(limit)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        events = []
        for action in actions:
            events.append({
                'type': action['type'],
                'timestamp': action['timestamp'],
                'details': action['details']
            })
        
        return jsonify(events)
        
    except Exception as e:
        return jsonify([])

@app.route('/api/logs/clear', methods=['POST'])
def clear_logs():
    """–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏ (—Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)"""
    try:
        from pathlib import Path
        import shutil
        
        # –°–æ–∑–¥–∞—ë–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        backup_dir = Path('logs/backup')
        backup_dir.mkdir(parents=True, exist_ok=True)
        
        log_dir = Path('logs')
        if log_dir.exists():
            for log_file in log_dir.glob('*.log'):
                # –ö–æ–ø–∏—Ä—É–µ–º –≤ backup
                shutil.copy(log_file, backup_dir / f"{log_file.stem}_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log")
                # –û—á–∏—â–∞–µ–º
                log_file.write_text('')
        
        return jsonify({
            'success': True,
            'message': '–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã (—Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞)'
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    print("üé≤ –ó–∞–ø—É—Å–∫ RULETTT Cloud API —Å–µ—Ä–≤–µ—Ä–∞...")
    print("üì° API –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞: http://localhost:5000")
    print("üìä Endpoint'—ã:")
    print("   GET  /api/health - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏")
    print("   POST /api/spins - –î–æ–±–∞–≤–∏—Ç—å —Å–ø–∏–Ω")
    print("   GET  /api/spins - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏–Ω—ã")
    print("   GET  /api/statistics - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    print("   POST /api/strategies - –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
    print("   POST /api/sessions - –°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥. —Å–µ—Å—Å–∏—é")
    print("   GET  /api/sessions - –°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π")
    print("   GET  /api/export/<format> - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
    print("   GET  /api/realtime/feed - –õ–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    print("   üí¨ –ß–ê–¢:")
    print("   GET  /api/chat - –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞")
    print("   POST /api/chat - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
    print("   GET  /api/chat/users - –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
    print("   POST /api/chat/ai - ü§ñ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç")
    print("   üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì:")
    print("   GET  /api/logs - –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏")
    print("   GET  /api/logs/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–æ–≤")
    print("   GET  /api/logs/stats/detailed - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    print("   GET  /api/errors/unresolved - –ù–µ—Ä–µ—à—ë–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏")
    print("   POST /api/errors/<id>/resolve - –ü–æ–º–µ—Ç–∏—Ç—å –æ—à–∏–±–∫—É —Ä–µ—à—ë–Ω–Ω–æ–π")
    print("   POST /api/events - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ")
    print("   GET  /api/events - –ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è")
    print("   POST /api/logs/clear - –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏")
    
    app.run(debug=True, host='0.0.0.0', port=5000)