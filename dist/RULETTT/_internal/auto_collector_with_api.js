// ============================================
// üé∞ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –°–ë–û–†–©–ò–ö –° –û–¢–ü–†–ê–í–ö–û–ô –ù–ê API
// ============================================
// –≠—Ç–æ—Ç –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ù–ê–ü–†–Ø–ú–£–Æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
// –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ JSON —Ñ–∞–π–ª–æ–≤

(function() {
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    const CONFIG = {
        // ‚ö†Ô∏è –í–ê–ñ–ù–û: –ò–∑–º–µ–Ω–∏—Ç–µ —ç—Ç–æ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä –ø–æ–¥ –≤–∞—à–µ –∫–∞–∑–∏–Ω–æ!
        selector: ".game-area__history-line--Lkj9A",
        
        // URL –≤–∞—à–µ–≥–æ API —Å–µ—Ä–≤–µ—Ä–∞
        apiUrl: "http://localhost:5000/api/spins",
        
        // –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã
        updateInterval: 30000,  // 30 —Å–µ–∫—É–Ω–¥ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–ø–∏–Ω–æ–≤
        maxResults: 100,        // –ú–∞–∫—Å–∏–º—É–º –≤ localStorage
        
        // –ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ API
        autoSendToAPI: true,    // true = –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        
        // –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–∑–∏–Ω–æ/—Å—Ç–æ–ª–∞
        casinoName: "live_casino", // –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∫–∞–∑–∏–Ω–æ
        tableName: "auto_roulette_1", // –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–∞
        
        // localStorage
        storageKey: "rouletteData"
    };
    
    // –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
    let allResults = [];
    let lastCheck = null;
    let sentCount = 0;
    let failedCount = 0;
    
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.log('üé∞ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –°–ë–û–†–©–ò–ö –° API –ó–ê–ü–£–©–ï–ù!');
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.log('üåê API URL:', CONFIG.apiUrl);
    console.log('üé≤ –ö–∞–∑–∏–Ω–æ:', CONFIG.casinoName);
    console.log('üéØ –°—Ç–æ–ª:', CONFIG.tableName);
    console.log('‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ', CONFIG.updateInterval / 1000, '—Å–µ–∫—É–Ω–¥');
    console.log('üì° –ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ API:', CONFIG.autoSendToAPI ? '–í–ö–õ ‚úÖ' : '–í–´–ö–õ ‚ùå');
    console.log('');
    console.log('üìã –ö–û–ú–ê–ù–î–´:');
    console.log('  stopRouletteCollector()  - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–±–æ—Ä—â–∏–∫');
    console.log('  showRouletteStats()      - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
    console.log('  sendAllToAPI()           - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –Ω–∞ API');
    console.log('  clearRouletteData()      - –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
    console.log('  getAPIStatus()           - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤—è–∑—å —Å API');
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.log('');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    function loadSavedData() {
        try {
            const saved = localStorage.getItem(CONFIG.storageKey);
            if (saved) {
                allResults = JSON.parse(saved);
                console.log('üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ', allResults.length, '—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
            }
        } catch (e) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', e);
        }
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    function saveData() {
        try {
            localStorage.setItem(CONFIG.storageKey, JSON.stringify(allResults));
        } catch (e) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', e);
        }
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ API
    async function sendToAPI(spinData) {
        try {
            const payload = {
                number: spinData.number,
                color: spinData.color,
                timestamp: spinData.timestamp,
                casino_name: CONFIG.casinoName,
                table_name: CONFIG.tableName,
                source: "browser_console_auto"
            };
            
            const response = await fetch(CONFIG.apiUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(payload)
            });
            
            if (response.ok) {
                sentCount++;
                console.log('‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ API:', spinData.number, `(${spinData.color})`, '| –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', sentCount);
                return true;
            } else {
                failedCount++;
                console.warn('‚ö†Ô∏è API –æ—Ç–≤–µ—Ç–∏–ª —Å –æ—à–∏–±–∫–æ–π:', response.status, response.statusText);
                return false;
            }
        } catch (error) {
            failedCount++;
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ API:', error.message);
            console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: 1) –ó–∞–ø—É—â–µ–Ω –ª–∏ API —Å–µ—Ä–≤–µ—Ä, 2) –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ URL');
            return false;
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    async function collectData() {
        const element = document.querySelector(CONFIG.selector);
        
        if (!element) {
            console.warn('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç —Ä—É–ª–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–µ–ª–µ–∫—Ç–æ—Ä:', CONFIG.selector);
            console.log('üí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—é ‚Üí Inspect ‚Üí Copy selector');
            return;
        }
        
        // –ò—â–µ–º –ü–ï–†–í–´–ô –¥–æ—á–µ—Ä–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç (—Å–∞–º–æ–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ)
        const firstChild = element.querySelector('div:first-child');
        
        if (!firstChild) {
            console.warn('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏—Å—Ç–æ—Ä–∏–∏');
            return;
        }
        
        // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        const allText = firstChild.innerText + ' ' + firstChild.innerHTML;
        const numbers = allText.match(/\b([0-9]|[1-2][0-9]|3[0-6])\b/g);
        
        if (!numbers || numbers.length === 0) {
            return;
        }
        
        // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ü–ï–†–í–û–ï —á–∏—Å–ª–æ (—Å–∞–º–æ–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—ã–ø–∞–≤—à–µ–µ)
        const numStr = numbers[0];
        const num = parseInt(numStr);
        
        if (num < 0 || num > 36) {
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ù–û–í–û–ï —á–∏—Å–ª–æ (–Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ –µ–≥–æ –Ω–µ–¥–∞–≤–Ω–æ)
        const isDuplicate = allResults.some(r => 
            r.number === num && 
            Math.abs(new Date(r.timestamp) - new Date()) < 10000  // 10 —Å–µ–∫—É–Ω–¥
        );
        
        if (isDuplicate) {
            return; // –≠—Ç–æ —á–∏—Å–ª–æ —É–∂–µ –µ—Å—Ç—å, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç
        const reds = [1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36];
        const color = num === 0 ? 'green' : (reds.includes(num) ? 'red' : 'black');
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
        const spinData = {
            number: num,
            color: color,
            timestamp: new Date().toISOString(),
            casino: CONFIG.casinoName,
            table: CONFIG.tableName
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        allResults.unshift(spinData);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
        if (allResults.length > CONFIG.maxResults) {
            allResults = allResults.slice(0, CONFIG.maxResults);
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
        saveData();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ
        const emoji = color === 'red' ? 'üî¥' : color === 'black' ? '‚ö´' : 'üü¢';
        const time = new Date().toLocaleTimeString('ru-RU');
        
        console.log(time, emoji, num, '| –õ–æ–∫–∞–ª—å–Ω–æ:', allResults.length);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ API –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if (CONFIG.autoSendToAPI) {
            await sendToAPI(spinData);
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ —Å API
    window.getAPIStatus = async function() {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ —Å API...');
        try {
            const response = await fetch(CONFIG.apiUrl.replace('/spins', '/health'));
            if (response.ok) {
                const data = await response.json();
                console.log('‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω:', data);
                return true;
            } else {
                console.warn('‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:', response.status);
                return false;
            }
        } catch (error) {
            console.error('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
            console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∑–∞–ø—É—â–µ–Ω: py api_server.py');
            return false;
        }
    };
    
    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ API
    window.sendAllToAPI = async function() {
        if (allResults.length === 0) {
            console.log('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏');
            return;
        }
        
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞', allResults.length, '—Å–ø–∏–Ω–æ–≤ –Ω–∞ API...');
        
        let success = 0;
        let failed = 0;
        
        for (let i = 0; i < allResults.length; i++) {
            const spin = allResults[i];
            const sent = await sendToAPI(spin);
            if (sent) {
                success++;
            } else {
                failed++;
            }
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            if (i < allResults.length - 1) {
                await new Promise(resolve => setTimeout(resolve, 100));
            }
        }
        
        console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
        console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ú–ê–°–°–û–í–û–ô –û–¢–ü–†–ê–í–ö–ò:');
        console.log('  ‚úÖ –£—Å–ø–µ—à–Ω–æ:', success);
        console.log('  ‚ùå –û—à–∏–±–æ–∫:', failed);
        console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    };
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    window.showRouletteStats = function() {
        if (allResults.length === 0) {
            console.log('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
            return;
        }
        
        const colors = {red: 0, black: 0, green: 0};
        const numbers = {};
        
        allResults.forEach(r => {
            colors[r.color]++;
            numbers[r.number] = (numbers[r.number] || 0) + 1;
        });
        
        const total = allResults.length;
        
        console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
        console.log('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–û–ë–†–ê–ù–ù–´–• –î–ê–ù–ù–´–•');
        console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
        console.log('üé∞ –í—Å–µ–≥–æ —Å–ø–∏–Ω–æ–≤:', total);
        console.log('üì° –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ API:', sentCount);
        console.log('‚ùå –û—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏:', failedCount);
        console.log('');
        console.log('üé® –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤:');
        console.log('  üî¥ –ö—Ä–∞—Å–Ω—ã—Ö:', colors.red, `(${(colors.red/total*100).toFixed(1)}%)`);
        console.log('  ‚ö´ –ß–µ—Ä–Ω—ã—Ö:', colors.black, `(${(colors.black/total*100).toFixed(1)}%)`);
        console.log('  üü¢ –ó–µ–ª–µ–Ω—ã—Ö:', colors.green, `(${(colors.green/total*100).toFixed(1)}%)`);
        console.log('');
        
        const topNumbers = Object.entries(numbers)
            .sort((a, b) => b[1] - a[1])
            .slice(0, 5);
        
        console.log('üî• –¢–æ–ø-5 —á–∏—Å–µ–ª:');
        topNumbers.forEach(([num, count], i) => {
            const n = parseInt(num);
            const reds = [1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36];
            const emoji = n === 0 ? 'üü¢' : (reds.includes(n) ? 'üî¥' : '‚ö´');
            console.log(`  ${i+1}. ${emoji} ${num}: ${count} —Ä–∞–∑ (${(count/total*100).toFixed(1)}%)`);
        });
        console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    };
    
    // –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
    window.clearRouletteData = function() {
        const confirmed = confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!');
        if (!confirmed) return;
        
        allResults = [];
        sentCount = 0;
        failedCount = 0;
        localStorage.removeItem(CONFIG.storageKey);
        console.log('üóëÔ∏è –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    };
    
    // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–±–æ—Ä—â–∏–∫
    window.stopRouletteCollector = function() {
        if (window.rouletteCollectorInterval) {
            clearInterval(window.rouletteCollectorInterval);
            console.log('‚èπÔ∏è –°–±–æ—Ä—â–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            console.log('');
            console.log('üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
            console.log('  üé∞ –°–æ–±—Ä–∞–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', allResults.length);
            console.log('  ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ API:', sentCount);
            console.log('  ‚ùå –û—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏:', failedCount);
            console.log('');
            console.log('üí° –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: sendAllToAPI()');
        }
    };
    
    // –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
    window.exportRouletteData = function() {
        const jsonData = JSON.stringify(allResults, null, 2);
        
        console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
        console.log('üìã –≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–• (–†–ï–ó–ï–†–í–ù–ê–Ø –ö–û–ü–ò–Ø)');
        console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
        console.log('üìä –í—Å–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', allResults.length);
        console.log('');
        console.log(jsonData);
        console.log('');
        
        // –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä
        navigator.clipboard.writeText(jsonData)
            .then(() => {
                console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
                console.log('üí° –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤ —Ñ–∞–π–ª: roulette_console_data.json');
            })
            .catch(() => console.log('‚ö†Ô∏è –°–∫–æ–ø–∏—Ä—É–π—Ç–µ JSON –≤—ã—à–µ –≤—Ä—É—á–Ω—É—é'));
        
        return allResults;
    };
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    loadSavedData();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑—å —Å API
    getAPIStatus();
    
    // –ü–µ—Ä–≤—ã–π —Å–±–æ—Ä
    collectData();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä
    window.rouletteCollectorInterval = setInterval(collectData, CONFIG.updateInterval);
    
    console.log('‚úÖ –°–±–æ—Ä—â–∏–∫ –∞–∫—Ç–∏–≤–µ–Ω! –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏...');
    console.log('');
    
})();

// ============================================
// üéØ –ì–û–¢–û–í–û! –°–ë–û–†–©–ò–ö –° API –†–ê–ë–û–¢–ê–ï–¢!
// ============================================
