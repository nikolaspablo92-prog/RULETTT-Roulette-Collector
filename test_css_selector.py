"""
–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ –í–°–ï–• XPATH –í–ê–†–ò–ê–ù–¢–û–í
========================================

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã XPath —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å –≤–∞—à–µ–π —Ä—É–ª–µ—Ç–∫–∏
"""

import time
import sys


def test_all_xpaths():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã XPath"""
    
    print("üß™ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ XPATH –í–ê–†–ò–ê–ù–¢–û–í")
    print("="*70)
    
    # URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    url = input("\nüåê –í–≤–µ–¥–∏—Ç–µ URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ä—É–ª–µ—Ç–∫–æ–π: ").strip()
    if not url:
        print("‚ùå URL –Ω–µ –≤–≤–µ–¥–µ–Ω")
        return
    
    # –í–∞—Ä–∏–∞–Ω—Ç—ã XPath
    xpath_options = {
        "1. –ü–æ –∫–ª–∞—Å—Å—É history-line (–ø—Ä–æ—Å—Ç–æ–π)": "//div[contains(@class, 'game-area__history-line')]//div",
        "2. –ü–æ game-table__game-specific": "//div[contains(@class, 'game-table__game-specific')]//div[contains(@class, 'game-area__history-line')]",
        "3. –û—Ç root —ç–ª–µ–º–µ–Ω—Ç–∞": "//*[@id='root']//div[contains(@class, 'game-area__history-line')]",
        "4. –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π history": "//div[contains(@class, 'history-line')]",
        "5. –° –∏–Ω–¥–µ–∫—Å–æ–º [3]": "//*[@id='root']//div[contains(@class, 'game-area__history-line')]//div[3]",
        "6. –ü—Ä—è–º–æ–π –ø—É—Ç—å –æ—Ç root": "//*[@id='root']/div/div/div/div/div/div/div/div/div/div/div/div[contains(@class, 'history')]",
        "7. –õ—é–±–æ–π div —Å –∏—Å—Ç–æ—Ä–∏–µ–π": "//div[contains(@class, 'history')]",
        "8. CSS —Å–µ–ª–µ–∫—Ç–æ—Ä –∫–∞–∫ –µ—Å—Ç—å": "#root > div > div.app-container > div.games-slots--kYClr > div > div.game-node--pwxxn > div > div > div.game-table > div.game-table__game-specific > div > div.game-area__history-line--Lkj9A > div > div:nth-child(3)"
    }
    
    print(f"\nüéØ URL: {url}")
    print(f"\nüîç –ë—É–¥–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å {len(xpath_options)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ XPath")
    
    confirm = input("\n‚ñ∂Ô∏è  –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ? (y/n): ").strip().lower()
    if confirm != 'y':
        print("‚ùå –¢–µ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω")
        return
    
    # –ò–º–ø–æ—Ä—Ç—ã
    try:
        from selenium import webdriver
        from selenium.webdriver.chrome.options import Options
        from selenium.webdriver.common.by import By
        from selenium.webdriver.support.ui import WebDriverWait
        from selenium.webdriver.support import expected_conditions as EC
        from webdriver_manager.chrome import ChromeDriverManager
        from selenium.webdriver.chrome.service import Service
    except ImportError:
        print("‚ùå Selenium –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: py -m pip install selenium webdriver-manager")
        return
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
    print("\nüîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞...")
    chrome_options = Options()
    chrome_options.add_argument('--no-sandbox')
    chrome_options.add_argument('--disable-dev-shm-usage')
    
    try:
        service = Service(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=chrome_options)
    except:
        driver = webdriver.Chrome(options=chrome_options)
    
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    print(f"üåê –û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
    driver.get(url)
    
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ (15 —Å–µ–∫—É–Ω–¥)...")
    time.sleep(15)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π XPath
    successful_xpaths = []
    
    print("\n" + "="*70)
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï XPATH –í–ê–†–ò–ê–ù–¢–û–í:")
    print("="*70)
    
    for description, xpath in xpath_options.items():
        print(f"\nüìç –¢–µ—Å—Ç–∏—Ä—É–µ–º: {description}")
        print(f"   XPath: {xpath[:80]}...")
        
        try:
            # –î–ª—è CSS —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥
            if xpath.startswith("#"):
                print("   ‚ÑπÔ∏è  –≠—Ç–æ CSS —Å–µ–ª–µ–∫—Ç–æ—Ä, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º...")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º CSS_SELECTOR –≤–º–µ—Å—Ç–æ XPATH
                try:
                    element = driver.find_element(By.CSS_SELECTOR, xpath)
                    element_text = element.text
                    element_html = element.get_attribute('innerHTML')
                    children = element.find_elements(By.XPATH, ".//*")
                    
                    print(f"   ‚úÖ –ù–ê–ô–î–ï–ù! (CSS —Å–µ–ª–µ–∫—Ç–æ—Ä)")
                    print(f"   üìä –¢–µ–∫—Å—Ç: {element_text[:100]}")
                    print(f"   üìä –î–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(children)}")
                    
                    successful_xpaths.append({
                        'description': description,
                        'selector': xpath,
                        'type': 'CSS',
                        'text': element_text,
                        'children': len(children)
                    })
                except:
                    print(f"   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω (CSS)")
                continue
            
            # –î–ª—è XPath
            wait = WebDriverWait(driver, 5)
            element = wait.until(
                EC.presence_of_element_located((By.XPATH, xpath))
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            element_text = element.text
            element_html = element.get_attribute('innerHTML')
            children = element.find_elements(By.XPATH, ".//*")
            
            print(f"   ‚úÖ –ù–ê–ô–î–ï–ù!")
            print(f"   üìä –¢–µ–∫—Å—Ç ({len(element_text)} —Å–∏–º–≤–æ–ª–æ–≤): {element_text[:100]}")
            print(f"   üìä HTML ({len(element_html)} —Å–∏–º–≤–æ–ª–æ–≤): {element_html[:100]}")
            print(f"   üìä –î–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(children)}")
            
            # –ò—â–µ–º —á–∏—Å–ª–∞
            import re
            numbers = re.findall(r'\b([0-9]|[1-2][0-9]|3[0-6])\b', element_text + " " + element_html)
            if numbers:
                unique_numbers = list(set([int(n) for n in numbers if 0 <= int(n) <= 36]))
                print(f"   üéØ –ù–∞–π–¥–µ–Ω–æ —á–∏—Å–µ–ª —Ä—É–ª–µ—Ç–∫–∏: {len(unique_numbers)}")
                print(f"   üéØ –ß–∏—Å–ª–∞: {sorted(unique_numbers)[:10]}")
            
            successful_xpaths.append({
                'description': description,
                'xpath': xpath,
                'type': 'XPATH',
                'text': element_text,
                'children': len(children),
                'numbers': numbers if numbers else []
            })
            
        except Exception as e:
            print(f"   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω: {str(e)[:50]}")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "="*70)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("="*70)
    
    if successful_xpaths:
        print(f"\n‚úÖ –£–°–ü–ï–®–ù–û –ù–ê–ô–î–ï–ù–û: {len(successful_xpaths)} –≤–∞—Ä–∏–∞–Ω—Ç(–æ–≤)")
        
        for i, result in enumerate(successful_xpaths, 1):
            print(f"\n{i}. {result['description']}")
            print(f"   –¢–∏–ø: {result['type']}")
            if result['type'] == 'XPATH':
                print(f"   XPath: {result['xpath']}")
            else:
                print(f"   CSS: {result['selector']}")
            print(f"   –î–æ—á–µ—Ä–Ω–∏—Ö: {result['children']}")
            if 'numbers' in result and result['numbers']:
                print(f"   –ß–∏—Å–µ–ª –Ω–∞–π–¥–µ–Ω–æ: {len(result['numbers'])}")
        
        print("\n" + "="*70)
        print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:")
        print("="*70)
        
        # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç (—Å —á–∏—Å–ª–∞–º–∏ –∏ –¥–µ—Ç—å–º–∏)
        best = None
        for result in successful_xpaths:
            if 'numbers' in result and result['numbers'] and result['children'] > 0:
                if not best or len(result['numbers']) > len(best.get('numbers', [])):
                    best = result
        
        if best:
            print(f"\nüèÜ –õ–£–ß–®–ò–ô –í–ê–†–ò–ê–ù–¢: {best['description']}")
            if best['type'] == 'XPATH':
                print(f"\nüìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç XPath:")
                print(f"{best['xpath']}")
            else:
                print(f"\nüìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç CSS —Å–µ–ª–µ–∫—Ç–æ—Ä:")
                print(f"{best['selector']}")
            
            print(f"\nüéØ –í —ç—Ç–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ –Ω–∞–π–¥–µ–Ω–æ {len(best.get('numbers', []))} —á–∏—Å–µ–ª —Ä—É–ª–µ—Ç–∫–∏")
            print(f"üéØ –î–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {best['children']}")
        else:
            print(f"\nüéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–≤—ã–π —É—Å–ø–µ—à–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:")
            if successful_xpaths[0]['type'] == 'XPATH':
                print(f"{successful_xpaths[0]['xpath']}")
            else:
                print(f"{successful_xpaths[0]['selector']}")
    else:
        print("\n‚ùå –ù–ò –û–î–ò–ù –í–ê–†–ò–ê–ù–¢ –ù–ï –°–†–ê–ë–û–¢–ê–õ")
        print("\nüí° –ü–û–ü–†–û–ë–£–ô–¢–ï:")
        print("1. –£–≤–µ–ª–∏—á–∏—Ç—å –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏")
        print("2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        print("3. –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –≤—Ä—É—á–Ω—É—é –≤ DevTools")
        print("4. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä:")
        print("   //div[contains(@class, 'ball')]")
        print("   //div[contains(@class, 'number')]")
    
    input("\n‚è∏Ô∏è  –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞...")
    driver.quit()
    print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")


if __name__ == "__main__":
    test_all_xpaths()