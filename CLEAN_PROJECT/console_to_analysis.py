"""
üéØ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –î–ê–ù–ù–´–• –ò–ó –ö–û–ù–°–û–õ–ò –í –°–ò–°–¢–ï–ú–£ –ê–ù–ê–õ–ò–ó–ê
=================================================

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –±–µ—Ä–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏—Ö
–¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—É–ª–µ—Ç–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–≥—Ä—ã.

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
1. –ü–æ–ª—É—á–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ (–æ–Ω–∏ –≤ –±—É—Ñ–µ—Ä–µ –æ–±–º–µ–Ω–∞)
2. –í—Å—Ç–∞–≤—å—Ç–µ –≤ —Ñ–∞–π–ª roulette_console_data.json
3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: py console_to_analysis.py
"""

import json
import sys
from pathlib import Path
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.append(str(Path(__file__).parent / "src"))

from utils import RouletteUtils


class ConsoleDataAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞"""
    
    def __init__(self, data_file: str = "roulette_console_data.json"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        
        Args:
            data_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
        """
        self.data_file = Path(data_file)
        self.data = []
        self.stats = {}
        
    def load_data(self) -> bool:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞
        
        Returns:
            bool: True –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ
        """
        try:
            if not self.data_file.exists():
                print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.data_file}")
                print(f"")
                print(f"üí° –ò–ù–°–¢–†–£–ö–¶–ò–Ø:")
                print(f"   1. –û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ä—É–ª–µ—Ç–∫–∏")
                print(f"   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–¥ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
                print(f"   3. –í–≤–µ–¥–∏—Ç–µ: copy(JSON.stringify(window.rouletteResults, null, 2))")
                print(f"   4. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª '{self.data_file}' –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ (Ctrl+V)")
                print(f"   5. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞")
                return False
            
            with open(self.data_file, 'r', encoding='utf-8') as f:
                self.data = json.load(f)
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.data)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏")
            return True
            
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ JSON: {e}")
            print(f"üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return False
    
    def convert_to_analyzer_format(self) -> list:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        
        Returns:
            list: –î–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è GameAnalyzer
        """
        converted = []
        base_time = datetime.now()
        
        for i, result in enumerate(self.data):
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É (–∫–∞–∂–¥—ã–π —Å–ø–∏–Ω ~1 –º–∏–Ω—É—Ç–∞)
            spin_time = base_time.replace(second=0, microsecond=0) - timedelta(minutes=len(self.data) - i)
            
            converted.append({
                "number": result["number"],
                "color": result["color"],
                "time": spin_time.isoformat(),
                "table_id": "console_data",
                "source": "browser_console"
            })
        
        return converted
    
    def calculate_statistics(self):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–∞–Ω–Ω—ã–º"""
        if not self.data:
            return
        
        numbers = [r["number"] for r in self.data]
        colors = [r["color"] for r in self.data]
        
        # –ü–æ–¥—Å—á–µ—Ç —Ü–≤–µ—Ç–æ–≤
        color_counts = {
            "red": colors.count("red"),
            "black": colors.count("black"),
            "green": colors.count("green")
        }
        
        # –°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ —á–∏—Å–ª–∞
        number_counts = {}
        for num in numbers:
            number_counts[num] = number_counts.get(num, 0) + 1
        
        sorted_numbers = sorted(number_counts.items(), key=lambda x: x[1], reverse=True)
        
        # –°–µ—Ä–∏–∏
        red_series = self._find_series(colors, "red")
        black_series = self._find_series(colors, "black")
        
        self.stats = {
            "total_spins": len(self.data),
            "color_distribution": color_counts,
            "color_percentages": {
                color: round(count / len(self.data) * 100, 1)
                for color, count in color_counts.items()
            },
            "top_numbers": sorted_numbers[:5],
            "max_red_series": max(red_series) if red_series else 0,
            "max_black_series": max(black_series) if black_series else 0,
            "unique_numbers": len(set(numbers))
        }
    
    def _find_series(self, colors: list, target_color: str) -> list:
        """–ù–∞—Ö–æ–¥–∏—Ç —Å–µ—Ä–∏–∏ –æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞"""
        series = []
        current_series = 0
        
        for color in colors:
            if color == target_color:
                current_series += 1
            else:
                if current_series > 0:
                    series.append(current_series)
                current_series = 0
        
        if current_series > 0:
            series.append(current_series)
        
        return series
    
    def print_statistics(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ —ç–∫—Ä–∞–Ω"""
        if not self.stats:
            self.calculate_statistics()
        
        print("\n" + "="*60)
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –î–ê–ù–ù–´–ú –ò–ó –ö–û–ù–°–û–õ–ò")
        print("="*60)
        
        print(f"\nüé∞ –í—Å–µ–≥–æ —Å–ø–∏–Ω–æ–≤: {self.stats['total_spins']}")
        print(f"üî¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª: {self.stats['unique_numbers']}")
        
        print(f"\nüé® –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ü–≤–µ—Ç–∞–º:")
        for color, count in self.stats['color_distribution'].items():
            emoji = "üî¥" if color == "red" else "‚ö´" if color == "black" else "üü¢"
            pct = self.stats['color_percentages'][color]
            print(f"   {emoji} {color.upper()}: {count} ({pct}%)")
        
        print(f"\nüî• –¢–æ–ø-5 —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö —á–∏—Å–µ–ª:")
        for i, (number, count) in enumerate(self.stats['top_numbers'], 1):
            color = RouletteUtils.get_color(number)
            emoji = "üî¥" if color == "red" else "‚ö´" if color == "black" else "üü¢"
            print(f"   {i}. {emoji} {number}: {count} —Ä–∞–∑")
        
        print(f"\nüìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Å–µ—Ä–∏–∏:")
        print(f"   üî¥ –ö—Ä–∞—Å–Ω—ã—Ö –ø–æ–¥—Ä—è–¥: {self.stats['max_red_series']}")
        print(f"   ‚ö´ –ß–µ—Ä–Ω—ã—Ö –ø–æ–¥—Ä—è–¥: {self.stats['max_black_series']}")
        
        print("\n" + "="*60)
    
    def test_strategies(self, initial_balance: float = 1000.0):
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–≥—Ä—ã –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
        
        Args:
            initial_balance: –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        print("\n" + "="*60)
        print("üé≤ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–¢–†–ê–¢–ï–ì–ò–ô")
        print("="*60)
        
        if len(self.data) < 10:
            print("\n‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
            print("   –ú–∏–Ω–∏–º—É–º –Ω—É–∂–Ω–æ 10 —Å–ø–∏–Ω–æ–≤, —É –≤–∞—Å:", len(self.data))
            print("   –°–æ–±–µ—Ä–∏—Ç–µ –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞!")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        strategies = {
            "–ú–∞—Ä—Ç–∏–Ω–≥–µ–π–ª –Ω–∞ –∫—Ä–∞—Å–Ω–æ–µ": self._martingale_strategy("red", 10),
            "–ú–∞—Ä—Ç–∏–Ω–≥–µ–π–ª –Ω–∞ —á–µ—Ä–Ω–æ–µ": self._martingale_strategy("black", 10),
            "–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –Ω–∞ –∫—Ä–∞—Å–Ω–æ–µ": self._flat_bet_strategy("red", 10),
            "–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –Ω–∞ —á–µ—Ä–Ω–æ–µ": self._flat_bet_strategy("black", 10),
        }
        
        results = []
        
        for strategy_name, strategy_func in strategies.items():
            print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {strategy_name}")
            print(f"   –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${initial_balance}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            result = strategy_func(initial_balance)
            
            final_balance = result["final_balance"]
            profit = final_balance - initial_balance
            profit_pct = (profit / initial_balance) * 100
            
            emoji = "‚úÖ" if profit > 0 else "‚ùå" if profit < 0 else "‚ûñ"
            
            print(f"   {emoji} –ö–æ–Ω–µ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${final_balance:.2f}")
            print(f"   {emoji} –ü—Ä–∏–±—ã–ª—å/–£–±—ã—Ç–æ–∫: ${profit:.2f} ({profit_pct:+.1f}%)")
            print(f"   üìä –í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫: {result['total_bets']}")
            print(f"   üéØ –í—ã–∏–≥—Ä—ã—à–Ω—ã—Ö: {result['winning_bets']} ({result['win_rate']:.1f}%)")
            
            results.append({
                "strategy": strategy_name,
                "profit": profit,
                "profit_pct": profit_pct,
                "final_balance": final_balance,
                "total_bets": result['total_bets'],
                "win_rate": result['win_rate']
            })
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª—É—á—à—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        best = max(results, key=lambda x: x["profit"])
        worst = min(results, key=lambda x: x["profit"])
        
        print("\n" + "="*60)
        print("üèÜ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("="*60)
        print(f"\n‚úÖ –õ—É—á—à–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {best['strategy']}")
        print(f"   –ü—Ä–∏–±—ã–ª—å: ${best['profit']:.2f} ({best['profit_pct']:+.1f}%)")
        print(f"\n‚ùå –•—É–¥—à–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {worst['strategy']}")
        print(f"   –£–±—ã—Ç–æ–∫: ${worst['profit']:.2f} ({worst['profit_pct']:+.1f}%)")
        print("\n" + "="*60)
    
    def _martingale_strategy(self, target_color: str, initial_bet: float):
        """–°—Ç—Ä–∞—Ç–µ–≥–∏—è –ú–∞—Ä—Ç–∏–Ω–≥–µ–π–ª - —É–¥–≤–æ–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–∏–≥—Ä—ã—à–∞"""
        def test(initial_balance: float):
            balance = initial_balance
            current_bet = initial_bet
            total_bets = 0
            winning_bets = 0
            
            for result in self.data:
                if balance <= 0 or current_bet > balance:
                    break
                
                # –î–µ–ª–∞–µ–º —Å—Ç–∞–≤–∫—É
                balance -= current_bet
                total_bets += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∏–≥—Ä—ã—à
                if result["color"] == target_color:
                    payout = current_bet * 2  # –í—ã–ø–ª–∞—Ç–∞ 2:1 –∑–∞ —Ü–≤–µ—Ç
                    balance += payout
                    winning_bets += 1
                    current_bet = initial_bet  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
                else:
                    # –£–¥–≤–∞–∏–≤–∞–µ–º —Å—Ç–∞–≤–∫—É –ø–æ—Å–ª–µ –ø—Ä–æ–∏–≥—Ä—ã—à–∞
                    current_bet = min(current_bet * 2, balance)
            
            return {
                "final_balance": balance,
                "total_bets": total_bets,
                "winning_bets": winning_bets,
                "win_rate": (winning_bets / total_bets * 100) if total_bets > 0 else 0
            }
        
        return test
    
    def _flat_bet_strategy(self, target_color: str, bet_amount: float):
        """–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞ - –≤—Å–µ–≥–¥–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–∞—è —Å—É–º–º–∞"""
        def test(initial_balance: float):
            balance = initial_balance
            total_bets = 0
            winning_bets = 0
            
            for result in self.data:
                if balance <= 0 or bet_amount > balance:
                    break
                
                # –î–µ–ª–∞–µ–º —Å—Ç–∞–≤–∫—É
                balance -= bet_amount
                total_bets += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∏–≥—Ä—ã—à
                if result["color"] == target_color:
                    payout = bet_amount * 2  # –í—ã–ø–ª–∞—Ç–∞ 2:1 –∑–∞ —Ü–≤–µ—Ç
                    balance += payout
                    winning_bets += 1
            
            return {
                "final_balance": balance,
                "total_bets": total_bets,
                "winning_bets": winning_bets,
                "win_rate": (winning_bets / total_bets * 100) if total_bets > 0 else 0
            }
        
        return test
    
    def save_analysis_report(self, filename: str = "console_analysis_report.txt"):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ñ–∞–π–ª"""
        with open(filename, 'w', encoding='utf-8') as f:
            f.write("–û–¢–ß–ï–¢ –ê–ù–ê–õ–ò–ó–ê –î–ê–ù–ù–´–• –ò–ó –ö–û–ù–°–û–õ–ò –ë–†–ê–£–ó–ï–†–ê\n")
            f.write("="*60 + "\n")
            f.write(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: {self.data_file}\n")
            f.write("\n")
            
            if self.stats:
                f.write("–°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n")
                f.write(f"–í—Å–µ–≥–æ —Å–ø–∏–Ω–æ–≤: {self.stats['total_spins']}\n")
                f.write(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª: {self.stats['unique_numbers']}\n")
                f.write("\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤:\n")
                for color, count in self.stats['color_distribution'].items():
                    pct = self.stats['color_percentages'][color]
                    f.write(f"  {color}: {count} ({pct}%)\n")
                f.write("\n")
        
        print(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("="*60)
    print("üé∞ –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –ò–ó –ö–û–ù–°–û–õ–ò –ë–†–ê–£–ó–ï–†–ê")
    print("="*60)
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = ConsoleDataAnalyzer("roulette_console_data.json")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if not analyzer.load_data():
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    analyzer.calculate_statistics()
    analyzer.print_statistics()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    analyzer.test_strategies(initial_balance=1000.0)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    analyzer.save_analysis_report()
    
    print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print("\nüí° –°–û–í–ï–¢: –ó–∞–ø—É—Å–∫–∞–π—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
    print("   –∏–∑ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!\n")


if __name__ == "__main__":
    main()
