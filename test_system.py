"""
–ü–†–û–°–¢–û–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´
===================

–≠—Ç–æ—Ç —Ñ–∞–π–ª –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–∞—é—Ç –ª–∏ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã.
–ó–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.
"""

import sys
from pathlib import Path
import traceback

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.append(str(Path(__file__).parent / "src"))

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π...")
    
    try:
        from utils import RouletteUtils
        print("‚úÖ utils.py - OK")
    except Exception as e:
        print(f"‚ùå utils.py - –û–®–ò–ë–ö–ê: {e}")
        return False
    
    try:
        from data_collector import DataCollector
        print("‚úÖ data_collector.py - OK")
    except Exception as e:
        print(f"‚ùå data_collector.py - –û–®–ò–ë–ö–ê: {e}")
        return False
    
    try:
        from game_analyzer import GameAnalyzer, PredefinedStrategies
        print("‚úÖ game_analyzer.py - OK")
    except Exception as e:
        print(f"‚ùå game_analyzer.py - –û–®–ò–ë–ö–ê: {e}")
        return False
    
    try:
        from ai_assistant import AIAssistant
        print("‚úÖ ai_assistant.py - OK")
    except Exception as e:
        print(f"‚ùå ai_assistant.py - –û–®–ò–ë–ö–ê: {e}")
        return False
    
    return True

def test_basic_functionality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å...")
    
    try:
        from utils import RouletteUtils
        from data_collector import DataCollector
        from datetime import datetime, timedelta
        
        # –¢–µ—Å—Ç —É—Ç–∏–ª–∏—Ç
        utils = RouletteUtils()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–≤–µ—Ç–∞
        assert utils.get_color(17) == "black", "–ß–∏—Å–ª–æ 17 –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–µ—Ä–Ω—ã–º"
        assert utils.get_color(18) == "red", "–ß–∏—Å–ª–æ 18 –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫—Ä–∞—Å–Ω—ã–º" 
        assert utils.get_color(0) == "green", "–ß–∏—Å–ª–æ 0 –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–µ–ª–µ–Ω—ã–º"
        print("‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ç–Ω–æ—Å—Ç—å
        assert utils.is_even(2) == True, "2 –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–µ—Ç–Ω—ã–º"
        assert utils.is_even(3) == False, "3 –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ—á–µ—Ç–Ω—ã–º"
        assert utils.is_even(0) == None, "0 –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∏ —á–µ—Ç–Ω—ã–º –Ω–∏ –Ω–µ—á–µ—Ç–Ω—ã–º"
        print("‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–µ—Ç–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç —Å–±–æ—Ä—â–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        collector = DataCollector("data/test_simple.db")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–ø–∏–Ω
        spin_id = collector.add_spin(17, datetime.now(), "test_session")
        assert spin_id > 0, "ID —Å–ø–∏–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º"
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        start_date = datetime.now() - timedelta(days=1)
        stats = collector.get_statistics(start_date)
        assert stats['total_spins'] >= 1, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 1 —Å–ø–∏–Ω"
        print("‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: {e}")
        traceback.print_exc()
        return False

def test_strategies():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")
    
    try:
        from data_collector import DataCollector
        from game_analyzer import GameAnalyzer, PredefinedStrategies
        from datetime import datetime, timedelta
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        collector = DataCollector("data/test_strategies.db")
        start_date = datetime.now() - timedelta(days=2)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö
        collector.generate_random_spins(50, start_date)
        print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        analyzer = GameAnalyzer(collector)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        strategy = PredefinedStrategies.martingale_red(10)
        result = analyzer.test_strategy(strategy, start_date, None, 1000)
        
        assert "error" not in result, "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –≤—ã–¥–∞–≤–∞—Ç—å –æ—à–∏–±–∫—É"
        assert "total_profit" in result, "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–∏–±—ã–ª—å"
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
        traceback.print_exc()
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    print("="*50)
    print("    –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ê–ù–ê–õ–ò–ó–ê –†–£–õ–ï–¢–ö–ò")
    print("="*50)
    
    all_passed = True
    
    # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤
    if not test_imports():
        all_passed = False
    
    # –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    if not test_basic_functionality():
        all_passed = False
    
    # –¢–µ—Å—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    if not test_strategies():
        all_passed = False
    
    print("\n" + "="*50)
    if all_passed:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print("\n–ó–∞–ø—É—Å—Ç–∏—Ç–µ main.py –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:")
        print("python src/main.py")
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã")
    
    print("="*50)

if __name__ == "__main__":
    main()